<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Musical Math Adventure</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Comic Sans MS', cursive, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #e0f7fa 0%, #bbdefb 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .game-container {
            max-width: 1000px;
            margin: 0 auto;
            text-align: center;
        }
        
        .title-area {
            margin-bottom: 20px;
        }
        
        h1 {
            color: #6200ea;
            font-size: 36px;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .subtitle {
            font-size: 20px;
            color: #651fff;
            margin-bottom: 15px;
        }
        
        .game-tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            gap: 10px;
        }
        
        .tab-button {
            background: #7c4dff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 30px;
            font-size: 18px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: all 0.3s;
        }
        
        .tab-button:hover {
            background: #651fff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }
        
        .tab-button.active {
            background: #6200ea;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }
        
        .game-area {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .circle-container {
            position: relative;
            width: 400px;
            height: 400px;
            margin: 0 auto 30px;
        }
        
        .circle-bg {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: white;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        
        .note {
            position: absolute;
            width: 70px;
            height: 70px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: all 0.2s;
            user-select: none;
            z-index: 2;
        }
        
        .note:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 12px rgba(0,0,0,0.4);
        }
        
        .note.active {
            transform: scale(1.2);
            box-shadow: 0 8px 16px rgba(0,0,0,0.5), 0 0 20px rgba(255,255,255,0.8);
        }
        
        .note .number {
            font-size: 16px;
            margin-top: 4px;
        }
        
        .control-panel {
            background: white;
            padding: 20px;
            border-radius: 20px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 800px;
            margin-bottom: 30px;
        }
        
        .control-content {
            margin-top: 15px;
            text-align: left;
        }
        
        .control-title {
            color: #6200ea;
            font-size: 24px;
            margin-bottom: 10px;
            text-align: center;
        }
        
        .instruction-text {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 15px;
        }
        
        .connection-box {
            background: #e8eaf6;
            border-radius: 15px;
            padding: 15px;
            margin-top: 15px;
        }
        
        .highlight {
            color: #6200ea;
            font-weight: bold;
        }
        
        .quiz-container {
            background: white;
            padding: 20px;
            border-radius: 20px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 800px;
            display: none;
            margin-bottom: 30px;
        }
        
        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .quiz-counter {
            font-size: 20px;
            font-weight: bold;
            color: #6200ea;
        }
        
        .quiz-progress {
            width: 70%;
            height: 20px;
            background: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .quiz-progress-bar {
            height: 100%;
            background: linear-gradient(to right, #7c4dff, #6200ea);
            width: 0%;
            transition: width 0.5s;
        }
        
        .quiz-question {
            font-size: 22px;
            margin: 20px 0;
            color: #424242;
        }
        
        .pattern-display {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
        }
        
        .pattern-note {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            font-size: 18px;
            color: white;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .pattern-note.mystery {
            background: #e0e0e0;
            color: #424242;
            font-size: 30px;
        }
        
        .quiz-options {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
        }
        
        .quiz-option {
            background: #e8eaf6;
            color: #424242;
            font-size: 18px;
            font-weight: bold;
            padding: 15px 30px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.2s;
            min-width: 120px;
            border: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .quiz-option:hover {
            background: #c5cae9;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        }
        
        .quiz-feedback {
            height: 40px;
            font-size: 24px;
            font-weight: bold;
            margin: 20px 0;
        }
        
        .correct {
            color: #00c853;
        }
        
        .incorrect {
            color: #f44336;
        }
        
        .quiz-next-btn {
            background: #6200ea;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
            display: none;
            margin: 20px auto;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .quiz-next-btn:hover {
            background: #7c4dff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }
        
        .star-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 15px 0;
        }
        
        .star {
            width: 40px;
            height: 40px;
            background: #e0e0e0;
            clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
            transition: background 0.3s;
        }
        
        .star.earned {
            background: #ffd700;
            animation: star-pop 0.5s ease-out;
        }
        
        @keyframes star-pop {
            0% { transform: scale(0); }
            50% { transform: scale(1.3); }
            100% { transform: scale(1); }
        }
        
        .game-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            background: rgba(98, 0, 234, 0.9);
            color: white;
            padding: 30px 50px;
            border-radius: 20px;
            font-size: 28px;
            font-weight: bold;
            z-index: 100;
            opacity: 0;
            transition: all 0.5s;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        
        .game-message.show {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }
        
        .start-quiz-btn {
            background: #6200ea;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            margin: 20px auto;
            display: block;
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        }
        
        .start-quiz-btn:hover {
            background: #7c4dff;
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }
        
        .quiz-complete {
            text-align: center;
            display: none;
        }
        
        .quiz-complete h2 {
            color: #6200ea;
            font-size: 32px;
            margin-bottom: 15px;
        }
        
        .quiz-complete p {
            font-size: 20px;
            margin-bottom: 20px;
        }
        
        .quiz-results {
            font-size: 24px;
            font-weight: bold;
            color: #6200ea;
            margin: 20px 0;
        }
        
        .quiz-restart-btn {
            background: #6200ea;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s;
            margin: 20px auto;
            display: inline-block;
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        }
        
        .quiz-restart-btn:hover {
            background: #7c4dff;
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }
        
        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #f00;
            opacity: 0;
            animation: fall 3s ease-out forwards;
            z-index: 100;
        }
        
        @keyframes fall {
            0% {
                transform: translateY(0) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        @media (max-width: 600px) {
            h1 {
                font-size: 28px;
            }
            
            .circle-container {
                width: 320px;
                height: 320px;
            }
            
            .note {
                width: 50px;
                height: 50px;
                font-size: 16px;
            }
            
            .note .number {
                font-size: 12px;
            }
            
            .tab-button {
                padding: 10px 15px;
                font-size: 14px;
            }
            
            .control-title {
                font-size: 20px;
            }
            
            .instruction-text {
                font-size: 16px;
            }
            
            .quiz-question {
                font-size: 18px;
            }
            
            .pattern-note {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }
            
            .quiz-option {
                padding: 10px 20px;
                font-size: 16px;
                min-width: 100px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="title-area">
            <h1>Musical Math Adventure</h1>
            <div class="subtitle">Explore the amazing connection between music and math!</div>
        </div>
        
        <div class="game-tabs">
            <button class="tab-button active" data-tab="explore">Explore</button>
            <button class="tab-button" data-tab="quiz">Quiz Adventure</button>
        </div>
        
        <div class="game-area">
            <div class="circle-container">
                <div class="circle-bg"></div>
                <!-- Notes will be generated by JavaScript -->
            </div>
            
            <div class="control-panel">
                <div class="control-options">
                    <button class="tab-button active" data-mode="music">Music View</button>
                    <button class="tab-button" data-mode="math">Math View</button>
                    <button class="tab-button" data-mode="combined">Combined View</button>
                </div>
                
                <div class="control-content">
                    <h2 class="control-title">Click on any note to explore!</h2>
                    <p class="instruction-text">
                        This magical circle shows how music and math are connected. 
                        Each color represents a musical note and a number.
                    </p>
                    
                    <div class="connection-box">
                        <h3>Did You Know?</h3>
                        <p class="instruction-text">
                            When you move clockwise around the circle, each note is a 
                            <span class="highlight">perfect fifth</span> higher than the previous one!
                        </p>
                    </div>
                </div>
            </div>
            
            <button class="start-quiz-btn">Start Quiz Adventure!</button>
        </div>
        
        <div class="quiz-container">
            <div class="quiz-content">
                <div class="quiz-header">
                    <div class="quiz-counter">Question <span id="current-question">1</span> of <span id="total-questions">10</span></div>
                    <div class="quiz-progress">
                        <div class="quiz-progress-bar"></div>
                    </div>
                </div>
                
                <div class="star-container">
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                </div>
                
                <div class="quiz-question"></div>
                
                <div class="pattern-display"></div>
                
                <div class="quiz-options"></div>
                
                <div class="quiz-feedback"></div>
                
                <button class="quiz-next-btn">Next Question</button>
            </div>
            
            <div class="quiz-complete">
                <h2>Quiz Adventure Complete!</h2>
                <p>Amazing job exploring music and math!</p>
                <div class="star-container final-stars">
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                    <div class="star"></div>
                </div>
                <div class="quiz-results">You got <span class="correct-count">0</span> out of <span class="total-count">10</span> correct!</div>
                <button class="quiz-restart-btn">Play Again</button>
            </div>
        </div>
        
        <div class="game-message"></div>
    </div>

    <script>
        // Audio Context
        let audioContext;
        try {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            console.error('Web Audio API not supported in this browser');
        }
        
        // Musical constants
        const NOTES = ['C', 'G', 'D', 'A', 'E', 'B', 'F♯', 'C♯', 'G♯', 'D♯', 'A♯', 'F'];
        const MATH_VALUES = [0, 7, 2, 9, 4, 11, 6, 1, 8, 3, 10, 5];
        const FREQUENCIES = [
            261.63, // C4
            392.00, // G4
            293.66, // D4
            440.00, // A4
            329.63, // E4
            493.88, // B4
            369.99, // F#4
            277.18, // C#4
            415.30, // G#4
            311.13, // D#4
            466.16, // A#4
            349.23  // F4
        ];
        const COLORS = [
            '#FF5252', // C - Red
            '#FF9800', // G - Orange
            '#FFEB3B', // D - Yellow
            '#8BC34A', // A - Light Green
            '#4CAF50', // E - Green
            '#009688', // B - Teal
            '#00BCD4', // F# - Light Blue
            '#2196F3', // C# - Blue
            '#3F51B5', // G# - Indigo
            '#673AB7', // D# - Purple
            '#9C27B0', // A# - Pink
            '#E91E63'  // F - Rose
        ];
        
        // Game state
        let currentMode = 'music';
        let activeNote = null;
        let quizActive = false;
        let currentQuestion = 0;
        let correctAnswers = 0;
        let totalQuestions = 10;
        let noteElements = [];
        
        // Initialize the game
        function initGame() {
            createCircle();
            setupEventListeners();
            updateControlPanel();
        }
        
        // Create the circle of fifths
        function createCircle() {
            const circleContainer = document.querySelector('.circle-container');
            
            for (let i = 0; i < 12; i++) {
                // Calculate position
                const angle = (i * 30 - 90) * (Math.PI / 180); // Start at C (top)
                const radius = 160; // Distance from center
                const centerX = 200;
                const centerY = 200;
                
                const x = centerX + radius * Math.cos(angle);
                const y = centerY + radius * Math.sin(angle);
                
                // Create note element
                const note = document.createElement('div');
                note.className = 'note';
                note.style.left = `${x - 35}px`; // Adjust for element size
                note.style.top = `${y - 35}px`;
                note.style.backgroundColor = COLORS[i];
                note.dataset.index = i;
                
                // Set content based on mode
                note.innerHTML = `${NOTES[i]}`;
                
                // Add click handler
                note.addEventListener('click', () => handleNoteClick(i));
                
                // Add to container
                circleContainer.appendChild(note);
                noteElements.push(note);
            }
            
            updateNoteDisplay();
        }
        
        // Update note display based on current mode
        function updateNoteDisplay() {
            noteElements.forEach((note, i) => {
                switch (currentMode) {
                    case 'music':
                        note.innerHTML = `${NOTES[i]}`;
                        break;
                    case 'math':
                        note.innerHTML = `${MATH_VALUES[i]}`;
                        break;
                    case 'combined':
                        note.innerHTML = `${NOTES[i]}<div class="number">${MATH_VALUES[i]}</div>`;
                        break;
                }
            });
        }
        
        // Set up event listeners
        function setupEventListeners() {
            // Tab buttons
            document.querySelectorAll('.game-tabs .tab-button').forEach(button => {
                button.addEventListener('click', () => {
                    const tab = button.dataset.tab;
                    
                    // Update active tab
                    document.querySelectorAll('.game-tabs .tab-button').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    button.classList.add('active');
                    
                    // Show/hide appropriate content
                    if (tab === 'explore') {
                        document.querySelector('.game-area').style.display = 'flex';
                        document.querySelector('.quiz-container').style.display = 'none';
                        quizActive = false;
                    } else if (tab === 'quiz') {
                        document.querySelector('.game-area').style.display = 'none';
                        document.querySelector('.quiz-container').style.display = 'block';
                        document.querySelector('.quiz-content').style.display = 'block';
                        document.querySelector('.quiz-complete').style.display = 'none';
                        resetQuiz();
                        startQuiz();
                    }
                });
            });
            
            // Mode buttons
            document.querySelectorAll('.control-options .tab-button').forEach(button => {
                button.addEventListener('click', () => {
                    const mode = button.dataset.mode;
                    
                    // Update active button
                    document.querySelectorAll('.control-options .tab-button').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    button.classList.add('active');
                    
                    // Set mode
                    currentMode = mode;
                    updateNoteDisplay();
                    updateControlPanel();
                    
                    // Clear active note
                    if (activeNote !== null) {
                        noteElements[activeNote].classList.remove('active');
                        activeNote = null;
                    }
                });
            });
            
            // Start quiz button
            document.querySelector('.start-quiz-btn').addEventListener('click', () => {
                document.querySelector('.game-tabs [data-tab="quiz"]').click();
            });
            
            // Next question button
            document.querySelector('.quiz-next-btn').addEventListener('click', nextQuestion);
            
            // Restart quiz button
            document.querySelector('.quiz-restart-btn').addEventListener('click', () => {
                resetQuiz();
                document.querySelector('.quiz-content').style.display = 'block';
                document.querySelector('.quiz-complete').style.display = 'none';
                startQuiz();
            });
        }
        
        // Handle note click
        function handleNoteClick(index) {
            // Highlight note
            if (activeNote !== null) {
                noteElements[activeNote].classList.remove('active');
            }
            noteElements[index].classList.add('active');
            activeNote = index;
            
            // Play sound
            playNote(index);
            
            // Update info panel
            updateControlPanel(index);
        }
        
        // Update control panel content
        function updateControlPanel(noteIndex = null) {
            const controlTitle = document.querySelector('.control-title');
            const instructionText = document.querySelector('.instruction-text');
            const connectionBox = document.querySelector('.connection-box');
            
            if (noteIndex === null) {
                // Default content for each mode
                switch (currentMode) {
                    case 'music':
                        controlTitle.textContent = 'Music View: Notes and Harmony';
                        instructionText.innerHTML = 'In this view, each circle shows a musical note. Moving clockwise, each note is a perfect fifth (7 semitones) higher than the previous one.';
                        connectionBox.innerHTML = `
                            <h3>Did You Know?</h3>
                            <p class="instruction-text">
                                The Circle of Fifths helps musicians understand how musical keys are related.
                                Notes that are closer to each other on the circle sound more harmonious together!
                            </p>
                        `;
                        break;
                    case 'math':
                        controlTitle.textContent = 'Math View: Number Patterns';
                        instructionText.innerHTML = 'In this view, each circle shows a number in a special math system called "modulo 12" - just like a clock that goes from 0 to 11.';
                        connectionBox.innerHTML = `
                            <h3>Did You Know?</h3>
                            <p class="instruction-text">
                                When you add 7 to each number and take the remainder when divided by 12,
                                you get the next number in the circle. Try it: 0 + 7 = 7, 7 + 7 = 14, 14 ÷ 12 = 1 remainder 2!
                            </p>
                        `;
                        break;
                    case 'combined':
                        controlTitle.textContent = 'Combined View: Music + Math';
                        instructionText.innerHTML = 'This view shows both the note name and its number value, revealing how music and math are connected!';
                        connectionBox.innerHTML = `
                            <h3>Did You Know?</h3>
                            <p class="instruction-text">
                                Musical intervals have exact mathematical values:
                                <br>• Perfect fifth = +7 semitones
                                <br>• Perfect fourth = +5 semitones
                                <br>• Major third = +4 semitones
                            </p>
                        `;
                        break;
                }
            } else {
                // Content for specific note
                const note = NOTES[noteIndex];
                const value = MATH_VALUES[noteIndex];
                
                switch (currentMode) {
                    case 'music':
                        controlTitle.textContent = `The Note: ${note}`;
                        instructionText.innerHTML = `
                            ${note} is a musical note. Moving clockwise, the next note is ${NOTES[(noteIndex + 1) % 12]},
                            which is a perfect fifth higher than ${note}.
                        `;
                        connectionBox.innerHTML = `
                            <h3>${note} Major Scale</h3>
                            <p class="instruction-text">
                                ${note} major scale includes these notes: ${getMajorScale(noteIndex).join(', ')}
                                <br>These specific notes give ${note} major its unique sound!
                            </p>
                        `;
                        break;
                    case 'math':
                        controlTitle.textContent = `The Number: ${value}`;
                        instructionText.innerHTML = `
                            ${value} is the mathematical position in our system. 
                            When we add 7, we get ${(value + 7) % 12}, which is the next position clockwise.
                        `;
                        connectionBox.innerHTML = `
                            <h3>Mathematical Pattern</h3>
                            <p class="instruction-text">
                                If we keep adding 7 to ${value} (and taking the remainder when divided by 12):
                                <br>${value} → ${(value + 7) % 12} → ${(value + 14) % 12} → ${(value + 21) % 12} → ${(value + 28) % 12}
                                <br>We'll eventually visit all 12 positions before returning to ${value}!
                            </p>
                        `;
                        break;
                    case 'combined':
                        controlTitle.textContent = `${note} (Value: ${value})`;
                        instructionText.innerHTML = `
                            ${note} has the mathematical value ${value} in our system. 
                            From here, adding 7 gives us ${NOTES[MATH_VALUES.indexOf((value + 7) % 12)]} (${(value + 7) % 12}).
                        `;
                        connectionBox.innerHTML = `
                            <h3>Intervals from ${note}</h3>
                            <p class="instruction-text">
                                <br>• Perfect fifth (+7): ${note} → ${NOTES[MATH_VALUES.indexOf((value + 7) % 12)]}
                                <br>• Perfect fourth (+5): ${note} → ${NOTES[MATH_VALUES.indexOf((value + 5) % 12)]}
                                <br>• Major third (+4): ${note} → ${NOTES[MATH_VALUES.indexOf((value + 4) % 12)]}
                            </p>
                        `;
                        break;
                }
            }
        }
        
        // Play a note sound
        function playNote(index) {
            if (!audioContext) return;
            
            // Create oscillator and gain nodes
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            // Set properties
            oscillator.type = 'sine';
            oscillator.frequency.value = FREQUENCIES[index];
            gainNode.gain.value = 0;
            
            // Connect nodes
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            // Create envelope for smoother sound
            const now = audioContext.currentTime;
            gainNode.gain.setValueAtTime(0, now);
            gainNode.gain.linearRampToValueAtTime(0.3, now + 0.05);
            gainNode.gain.linearRampToValueAtTime(0, now + 0.8);
            
            // Start and stop
            oscillator.start(now);
            oscillator.stop(now + 1);
        }
        
        // Get major scale notes
        function getMajorScale(rootIndex) {
            const pattern = [0, 2, 4, 5, 7, 9, 11]; // Major scale pattern in semitones
            return pattern.map(step => {
                const mathValue = (MATH_VALUES[rootIndex] + step) % 12;
                return NOTES[MATH_VALUES.indexOf(mathValue)];
            });
        }
        
        // Start quiz
        function startQuiz() {
            quizActive = true;
            currentQuestion = 0;
            correctAnswers = 0;
            updateStars();
            
            // Update question counter
            document.getElementById('current-question').textContent = '1';
            document.getElementById('total-questions').textContent = totalQuestions;
            
            // Reset progress bar
            document.querySelector('.quiz-progress-bar').style.width = '0%';
            
            // Show first question
            showQuestion();
        }
        
        // Reset quiz
        function resetQuiz() {
            quizActive = false;
            currentQuestion = 0;
            correctAnswers = 0;
            
            // Reset stars
            document.querySelectorAll('.star').forEach(star => {
                star.classList.remove('earned');
            });
            
            // Hide next button
            document.querySelector('.quiz-next-btn').style.display = 'none';
            
            // Clear feedback
            document.querySelector('.quiz-feedback').textContent = '';
            document.querySelector('.quiz-feedback').className = 'quiz-feedback';
        }
        
        // Show a question
        function showQuestion() {
            const questionElement = document.querySelector('.quiz-question');
            const optionsContainer = document.querySelector('.quiz-options');
            const patternDisplay = document.querySelector('.pattern-display');
            const feedbackElement = document.querySelector('.quiz-feedback');
            
            // Clear previous content
            optionsContainer.innerHTML = '';
            patternDisplay.innerHTML = '';
            feedbackElement.textContent = '';
            feedbackElement.className = 'quiz-feedback';
            
            // Hide next button
            document.querySelector('.quiz-next-btn').style.display = 'none';
            
            // Get question
            const questions = getQuizQuestions();
            const questionData = processQuestion(questions[currentQuestion % questions.length]);
            
            // Set question text
            questionElement.innerHTML = questionData.question;
            
            // Create pattern display if needed
            if (questionData.pattern) {
                createPatternDisplay(questionData.pattern);
            }
            
            // Create option buttons
            questionData.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'quiz-option';
                button.textContent = option;
                button.addEventListener('click', () => checkQuizAnswer(option, questionData.answer, questionData.answerIndex));
                optionsContainer.appendChild(button);
            });
            
            // Update progress bar
            const progress = (currentQuestion / totalQuestions) * 100;
            document.querySelector('.quiz-progress-bar').style.width = `${progress}%`;
        }
        
        // Create pattern display for quiz
        function createPatternDisplay(pattern) {
            const patternDisplay = document.querySelector('.pattern-display');
            
            pattern.forEach(item => {
                const element = document.createElement('div');
                element.className = 'pattern-note';
                
                if (item === -1) {
                    // Mystery note
                    element.className += ' mystery';
                    element.textContent = '?';
                } else {
                    // Regular note
                    element.style.backgroundColor = COLORS[item];
                    element.textContent = NOTES[item];
                }
                
                patternDisplay.appendChild(element);
            });
        }
        
        // Check quiz answer
        function checkQuizAnswer(selected, correct, correctIndex) {
            const feedbackElement = document.querySelector('.quiz-feedback');
            const optionButtons = document.querySelectorAll('.quiz-option');
            
            // Disable all option buttons
            optionButtons.forEach(button => {
                button.disabled = true;
                
                // Highlight correct answer
                if (button.textContent === correct) {
                    button.style.backgroundColor = '#a5d6a7';
                    button.style.color = '#2e7d32';
                }
            });
            
            // Check if answer is correct
            if (selected === correct) {
                feedbackElement.textContent = '✓ Correct! Great job!';
                feedbackElement.className = 'quiz-feedback correct';
                correctAnswers++;
                
                // Update stars
                const starsEarned = Math.floor((correctAnswers / totalQuestions) * 5);
                updateStars(starsEarned);
                
                // Play success sound
                playSuccessSound();
                
                // Create celebration effect
                createConfetti();
            } else {
                feedbackElement.textContent = `✗ Not quite. The correct answer is ${correct}.`;
                feedbackElement.className = 'quiz-feedback incorrect';
                
                // Play error sound
                playErrorSound();
            }
            
            // Show next button
            document.querySelector('.quiz-next-btn').style.display = 'block';
            
            // If last question, change button text
            if (currentQuestion >= totalQuestions - 1) {
                document.querySelector('.quiz-next-btn').textContent = 'See Results';
            }
        }
        
        // Go to next question
        function nextQuestion() {
            currentQuestion++;
            
            // Update question counter
            document.getElementById('current-question').textContent = currentQuestion + 1;
            
            // Check if quiz is complete
            if (currentQuestion >= totalQuestions) {
                completeQuiz();
                return;
            }
            
            // Show next question
            showQuestion();
        }
        
        // Complete the quiz
        function completeQuiz() {
            // Show results
            document.querySelector('.quiz-content').style.display = 'none';
            document.querySelector('.quiz-complete').style.display = 'block';
            
            // Update results
            document.querySelector('.correct-count').textContent = correctAnswers;
            document.querySelector('.total-count').textContent = totalQuestions;
            
            // Update final stars
            const starsEarned = Math.floor((correctAnswers / totalQuestions) * 5);
            document.querySelectorAll('.final-stars .star').forEach((star, index) => {
                if (index < starsEarned) {
                    star.classList.add('earned');
                }
            });
            
            // Show appropriate message
            let message;
            if (correctAnswers === totalQuestions) {
                message = 'Perfect score! You\'re a musical math genius!';
                showGameMessage('PERFECT SCORE! AMAZING!');
                createManyConfetti(100);
            } else if (correctAnswers >= Math.floor(totalQuestions * 0.8)) {
                message = 'Excellent job! You really understand music and math!';
                showGameMessage('EXCELLENT JOB!');
                createManyConfetti(50);
            } else if (correctAnswers >= Math.floor(totalQuestions * 0.6)) {
                message = 'Good job! You\'re getting the hang of it!';
                showGameMessage('GOOD JOB!');
            } else {
                message = 'Keep practicing! You\'ll be a master in no time!';
            }
            
            document.querySelector('.quiz-complete p').textContent = message;
        }
        
        // Update stars display
        function updateStars(count = 0) {
            document.querySelectorAll('.quiz-content .star-container .star').forEach((star, index) => {
                if (index < count) {
                    if (!star.classList.contains('earned')) {
                        // New star earned
                        star.classList.add('earned');
                        playStarSound();
                    }
                } else {
                    star.classList.remove('earned');
                }
            });
        }
        
        // Show game message
        function showGameMessage(text) {
            const messageElement = document.querySelector('.game-message');
            messageElement.textContent = text;
            messageElement.classList.add('show');
            
            setTimeout(() => {
                messageElement.classList.remove('show');
            }, 3000);
        }
        
        // Create confetti effect
        function createConfetti() {
            for (let i = 0; i < 20; i++) {
                createConfettiPiece();
            }
        }
        
        // Create many confetti pieces
        function createManyConfetti(count) {
            for (let i = 0; i < count; i++) {
                setTimeout(() => {
                    createConfettiPiece();
                }, i * 50);
            }
        }
        
        // Create a single confetti piece
        function createConfettiPiece() {
            const colors = ['#ff5252', '#ff9800', '#ffeb3b', '#8bc34a', '#4caf50', '#2196f3', '#9c27b0'];
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            
            // Random properties
            const size = Math.random() * 10 + 5;
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            confetti.style.width = `${size}px`;
            confetti.style.height = `${size}px`;
            confetti.style.backgroundColor = color;
            
            // Random position
            const left = Math.random() * 100;
            const duration = Math.random() * 2 + 1;
            
            confetti.style.left = `${left}vw`;
            confetti.style.top = '0';
            confetti.style.animationDuration = `${duration}s`;
            
            // Add to body
            document.body.appendChild(confetti);
            
            // Remove after animation
            setTimeout(() => {
                confetti.remove();
            }, duration * 1000);
        }
        
        // Play success sound
        function playSuccessSound() {
            if (!audioContext) return;
            
            // Create oscillators
            const oscillator1 = audioContext.createOscillator();
            const oscillator2 = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            // Set properties
            oscillator1.type = 'sine';
            oscillator2.type = 'sine';
            oscillator1.frequency.value = 440; // A4
            oscillator2.frequency.value = 659.25; // E5
            gainNode.gain.value = 0;
            
            // Connect nodes
            oscillator1.connect(gainNode);
            oscillator2.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            // Create envelope
            const now = audioContext.currentTime;
            gainNode.gain.setValueAtTime(0, now);
            gainNode.gain.linearRampToValueAtTime(0.2, now + 0.05);
            gainNode.gain.linearRampToValueAtTime(0, now + 0.5);
            
            // Start and stop
            oscillator1.start(now);
            oscillator2.start(now + 0.08);
            oscillator1.stop(now + 0.6);
            oscillator2.stop(now + 0.6);
        }
        
        // Play error sound
        function playErrorSound() {
            if (!audioContext) return;
            
            // Create oscillator
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            // Set properties
            oscillator.type = 'sine';
            oscillator.frequency.value = 349.23; // F4
            gainNode.gain.value = 0;
            
            // Connect nodes
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            // Create envelope and pitch slide
            const now = audioContext.currentTime;
            gainNode.gain.setValueAtTime(0, now);
            gainNode.gain.linearRampToValueAtTime(0.2, now + 0.05);
            gainNode.gain.linearRampToValueAtTime(0, now + 0.5);
            
            oscillator.frequency.setValueAtTime(349.23, now);
            oscillator.frequency.exponentialRampToValueAtTime(220, now + 0.4);
            
            // Start and stop
            oscillator.start(now);
            oscillator.stop(now + 0.5);
        }
        
        // Play star earned sound
        function playStarSound() {
            if (!audioContext) return;
            
            // Create oscillator
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            // Set properties
            oscillator.type = 'sine';
            oscillator.frequency.value = 523.25; // C5
            gainNode.gain.value = 0;
            
            // Connect nodes
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            // Create envelope and pitch rise
            const now = audioContext.currentTime;
            gainNode.gain.setValueAtTime(0, now);
            gainNode.gain.linearRampToValueAtTime(0.2, now + 0.05);
            gainNode.gain.linearRampToValueAtTime(0, now + 0.3);
            
            oscillator.frequency.setValueAtTime(523.25, now);
            oscillator.frequency.exponentialRampToValueAtTime(783.99, now + 0.2);
            
            // Start and stop
            oscillator.start(now);
            oscillator.stop(now + 0.3);
        }
        
        // Get quiz questions
        function getQuizQuestions() {
            return [
                {
                    type: 'fifth-up',
                    difficulty: 1,
                    questionTemplate: 'What note is a perfect fifth above {note}?'
                },
                {
                    type: 'fourth-up',
                    difficulty: 1,
                    questionTemplate: 'What note is a perfect fourth above {note}?'
                },
                {
                    type: 'math-add',
                    difficulty: 1,
                    value: 7,
                    questionTemplate: 'If we add 7 to {value}, what note do we get?'
                },
                {
                    type: 'math-add',
                    difficulty: 2,
                    value: 4,
                    questionTemplate: 'If we add 4 to {value}, what note do we get? (This is a major third up)'
                },
                {
                    type: 'pattern-completion',
                    difficulty: 2,
                    questionTemplate: 'What note comes next in this pattern of perfect fifths?',
                    patternTemplate: function(noteIndex) {
                        return [
                            noteIndex, 
                            (noteIndex + 1) % 12, 
                            -1
                        ];
                    }
                },
                {
                    type: 'interval-identification',
                    difficulty: 2,
                    questionTemplate: 'What interval is between {note1} and {note2}?',
                    intervals: [
                        { semitones: 7, name: 'Perfect Fifth' },
                        { semitones: 5, name: 'Perfect Fourth' },
                        { semitones: 4, name: 'Major Third' }
                    ]
                },
                {
                    type: 'scale-identification',
                    difficulty: 3,
                    questionTemplate: 'Which of these notes is in the {note} major scale?'
                },
                {
                    type: 'pattern-completion',
                    difficulty: 3,
                    questionTemplate: 'Fill in the missing note in this pattern:',
                    patternTemplate: function(noteIndex) {
                        // Using major thirds (4 semitones)
                        const mathValue = MATH_VALUES[noteIndex];
                        return [
                            noteIndex, 
                            MATH_VALUES.indexOf((mathValue + 4) % 12), 
                            -1, 
                            MATH_VALUES.indexOf((mathValue + 12) % 12)
                        ];
                    },
                    getValue: function(noteIndex) {
                        const mathValue = MATH_VALUES[noteIndex];
                        return MATH_VALUES.indexOf((mathValue + 8) % 12);
                    }
                },
                {
                    type: 'key-relationship',
                    difficulty: 3,
                    questionTemplate: 'Which key is most closely related to {note} major?'
                },
                {
                    type: 'complex-pattern',
                    difficulty: 4,
                    questionTemplate: 'Complete this musical math pattern:',
                    patternTemplate: function(noteIndex) {
                        // Using a combination of intervals
                        const mathValue = MATH_VALUES[noteIndex];
                        return [
                            noteIndex, 
                            MATH_VALUES.indexOf((mathValue + 7) % 12), // Perfect fifth
                            MATH_VALUES.indexOf((mathValue + 7 + 7) % 12), // Two perfect fifths
                            -1
                        ];
                    },
                    getValue: function(noteIndex) {
                        const mathValue = MATH_VALUES[noteIndex];
                        return MATH_VALUES.indexOf((mathValue + 7 + 7 + 7) % 12); // Three perfect fifths
                    }
                }
            ];
        }
        
        // Process a question template
        function processQuestion(questionTemplate) {
            const result = {
                question: '',
                options: [],
                answer: '',
                answerIndex: null,
                pattern: null
            };
            
            // Select a random note/value
            const noteIndex = Math.floor(Math.random() * 12);
            const note = NOTES[noteIndex];
            const mathValue = MATH_VALUES[noteIndex];
            
            // Process by type
            switch (questionTemplate.type) {
                case 'fifth-up':
                    result.question = questionTemplate.questionTemplate.replace('{note}', note);
                    result.answerIndex = (noteIndex + 1) % 12; // Next note in circle (7 semitones up)
                    result.answer = NOTES[result.answerIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'fourth-up':
                    result.question = questionTemplate.questionTemplate.replace('{note}', note);
                    // Perfect fourth is 5 semitones up
                    const fourthIndex = MATH_VALUES.indexOf((mathValue + 5) % 12);
                    result.answerIndex = fourthIndex;
                    result.answer = NOTES[fourthIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'math-add':
                    result.question = questionTemplate.questionTemplate
                        .replace('{value}', mathValue)
                        .replace('{note}', note);
                    
                    // Add the specified value
                    const resultValue = (mathValue + questionTemplate.value) % 12;
                    result.answerIndex = MATH_VALUES.indexOf(resultValue);
                    result.answer = NOTES[result.answerIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'pattern-completion':
                    result.question = questionTemplate.questionTemplate;
                    result.pattern = questionTemplate.patternTemplate(noteIndex);
                    
                    // Get correct answer
                    if (questionTemplate.getValue) {
                        result.answerIndex = questionTemplate.getValue(noteIndex);
                    } else {
                        // By default, next note in pattern
                        const lastVisibleNote = result.pattern[result.pattern.indexOf(-1) - 1];
                        const lastVisibleIndex = typeof lastVisibleNote === 'number' ? lastVisibleNote : noteIndex;
                        result.answerIndex = (lastVisibleIndex + 1) % 12; // Next note in circle
                    }
                    
                    result.answer = NOTES[result.answerIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'interval-identification':
                    // Randomly select an interval
                    const intervalObj = questionTemplate.intervals[Math.floor(Math.random() * questionTemplate.intervals.length)];
                    const note2Index = MATH_VALUES.indexOf((mathValue + intervalObj.semitones) % 12);
                    const note2 = NOTES[note2Index];
                    
                    result.question = questionTemplate.questionTemplate
                        .replace('{note1}', note)
                        .replace('{note2}', note2);
                    
                    result.answer = intervalObj.name;
                    result.options = generateIntervalOptions(intervalObj.name);
                    break;
                    
                case 'scale-identification':
                    result.question = questionTemplate.questionTemplate.replace('{note}', note);
                    
                    // Generate major scale
                    const scaleNotes = getMajorScale(noteIndex);
                    
                    // Pick a random note from the scale for correct answer
                    const randomScaleIndex = Math.floor(Math.random() * scaleNotes.length);
                    result.answer = scaleNotes[randomScaleIndex];
                    
                    // Generate options
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'key-relationship':
                    result.question = questionTemplate.questionTemplate.replace('{note}', note);
                    
                    // Most closely related key is the dominant (fifth up)
                    result.answerIndex = (noteIndex + 1) % 12;
                    result.answer = NOTES[result.answerIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
                    
                case 'complex-pattern':
                    result.question = questionTemplate.questionTemplate;
                    result.pattern = questionTemplate.patternTemplate(noteIndex);
                    
                    // Get correct answer
                    result.answerIndex = questionTemplate.getValue(noteIndex);
                    result.answer = NOTES[result.answerIndex];
                    result.options = generateOptions(result.answer, NOTES);
                    break;
            }
            
            return result;
        }
        
        // Generate multiple choice options
        function generateOptions(correctAnswer, sourceArray) {
            // Start with correct answer
            const options = [correctAnswer];
            
            // Add random unique options
            while (options.length < 3) {
                const randomIndex = Math.floor(Math.random() * sourceArray.length);
                const option = sourceArray[randomIndex];
                
                if (!options.includes(option)) {
                    options.push(option);
                }
            }
            
            // Shuffle options
            return shuffleArray(options);
        }
        
        // Generate interval options
        function generateIntervalOptions(correctAnswer) {
            const intervals = [
                'Perfect Unison', 'Minor Second', 'Major Second', 
                'Minor Third', 'Major Third', 'Perfect Fourth', 
                'Tritone', 'Perfect Fifth', 'Minor Sixth', 
                'Major Sixth', 'Minor Seventh', 'Major Seventh', 'Octave'
            ];
            
            // Start with correct answer
            const options = [correctAnswer];
            
            // Add random unique options
            while (options.length < 3) {
                const randomIndex = Math.floor(Math.random() * intervals.length);
                const option = intervals[randomIndex];
                
                if (!options.includes(option)) {
                    options.push(option);
                }
            }
            
            // Shuffle options
            return shuffleArray(options);
        }
        
        // Shuffle array
        function shuffleArray(array) {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }
        
        // Initialize the game when the page loads
        window.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>
