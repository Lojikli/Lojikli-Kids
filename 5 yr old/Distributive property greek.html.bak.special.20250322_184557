<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algebra Fun</title>
    <style>
        :root {
            --primary-color: #4a90e2;
            --success-color: #28a745;
            --error-color: #dc3545;
            --font-family: 'Arial', sans-serif';
        <div id="problem"></div>
        <input type="text" id="answer" placeholder="Enter your answer" autocomplete="off">
        
        <div class="button-container">
            <div>
                <button class="greek-var-btn" id="var1"></button>
                <div class="key-hint">Press 'a'</div>
            </div>
            <div>
                <button class="greek-var-btn" id="var2"></button>
                <div class="key-hint">Press 's'</div>
            </div>
            <div>
                <button class="greek-var-btn" id="var3"></button>
                <div class="key-hint">Press 'd'</div>
            </div>
        </div>

        <div id="feedback" class="feedback"></div>

        <button class="main-btn" onclick="checkAnswer()">Check Answer</button>
        <button class="main-btn" onclick="generateProblem()">Next Problem</button>
        <button class="main-btn" onclick="toggleGreekAlphabet()">Show/Hide Greek Alphabet</button>

        <div class="greek-alphabet" id="greekAlphabet">
            <h3>Greek Alphabet Reference</h3>
            <div class="greek-grid">
                <div class="greek-letter">Î± (alpha)</div>
                <div class="greek-letter">Î² (beta)</div>
                <div class="greek-letter">Î³ (gamma)</div>
                <div class="greek-letter">Î´ (delta)</div>
                <div class="greek-letter">Îµ (epsilon)</div>
                <div class="greek-letter">Î¶ (zeta)</div>
                <div class="greek-letter">Î· (eta)</div>
                <div class="greek-letter">Î¸ (theta)</div>
                <div class="greek-letter">Î¹ (iota)</div>
                <div class="greek-letter">Îº (kappa)</div>
                <div class="greek-letter">Î» (lambda)</div>
                <div class="greek-letter">Î¼ (mu)</div>
                <div class="greek-letter">Î½ (nu)</div>
                <div class="greek-letter">Î¾ (xi)</div>
                <div class="greek-letter">Î¿ (omicron)</div>
                <div class="greek-letter">Ï€ (pi)</div>
                <div class="greek-letter">Ï (rho)</div>
                <div class="greek-letter">Ïƒ (sigma)</div>
                <div class="greek-letter">Ï„ (tau)</div>
                <div class="greek-letter">Ï… (upsilon)</div>
                <div class="greek-letter">Ï† (phi)</div>
                <div class="greek-letter">Ï‡ (chi)</div>
                <div class="greek-letter">Ïˆ (psi)</div>
                <div class="greek-letter">Ï‰ (omega)</div>
            </div>
        </div>
    </div>

    <script>
        let currentProblem = 
        s Learn Distributive Property!</h1>
        <div id="problem"></div>
        <input type="text" id="answer" placeholder="Enter your answer" autocomplete="off">
        
        <div class="button-container">
            <div>
                <button class="greek-var-btn" id="var1"></button>
                <div class="key-hint">Press 'a'</div>
            </div>
            <div>
                <button class="greek-var-btn" id="var2"></button>
                <div class="key-hint">Press 's'</div>
            </div>
            <div>
                <button class="greek-var-btn" id="var3"></button>
                <div class="key-hint">Press 'd'</div>
            </div>
        </div>

        <div id="feedback" class="feedback"></div>

        <button class="main-btn" onclick="checkAnswer()">Check Answer</button>
        <button class="main-btn" onclick="generateProblem()">Next Problem</button>
        <button class="main-btn" onclick="toggleGreekAlphabet()">Show/Hide Greek Alphabet</button>

        <div class="greek-alphabet" id="greekAlphabet">
            <h3>Greek Alphabet Reference</h3>
            <div class="greek-grid">
                <div class="greek-letter">Î± (alpha)</div>
                <div class="greek-letter">Î² (beta)</div>
                <div class="greek-letter">Î³ (gamma)</div>
                <div class="greek-letter">Î´ (delta)</div>
                <div class="greek-letter">Îµ (epsilon)</div>
                <div class="greek-letter">Î¶ (zeta)</div>
                <div class="greek-letter">Î· (eta)</div>
                <div class="greek-letter">Î¸ (theta)</div>
                <div class="greek-letter">Î¹ (iota)</div>
                <div class="greek-letter">Îº (kappa)</div>
                <div class="greek-letter">Î» (lambda)</div>
                <div class="greek-letter">Î¼ (mu)</div>
                <div class="greek-letter">Î½ (nu)</div>
                <div class="greek-letter">Î¾ (xi)</div>
                <div class="greek-letter">Î¿ (omicron)</div>
                <div class="greek-letter">Ï€ (pi)</div>
                <div class="greek-letter">Ï (rho)</div>
                <div class="greek-letter">Ïƒ (sigma)</div>
                <div class="greek-letter">Ï„ (tau)</div>
                <div class="greek-letter">Ï… (upsilon)</div>
                <div class="greek-letter">Ï† (phi)</div>
                <div class="greek-letter">Ï‡ (chi)</div>
                <div class="greek-letter">Ïˆ (psi)</div>
                <div class="greek-letter">Ï‰ (omega)</div>
            </div>
        </div>
    </div>

    <script>
        let currentProblem = {
            expression: '',
            answer: ''
        };

        const englishVariables = [...Array(26)].map((_, i) => String.fromCharCode(97 + i));
        const greekVariables = ['Î±', 'Î²', 'Î³', 'Î´', 'Îµ', 'Î¶', 'Î·', 'Î¸', 'Î¹', 'Îº', 'Î»', 'Î¼', 'Î½', 'Î¾', 'Î¿', 'Ï€', 'Ï', 'Ïƒ', 'Ï„', 'Ï…', 'Ï†', 'Ï‡', 'Ïˆ', 'Ï‰'];
        const allVariables = [...englishVariables, ...greekVariables];

        function generateProblem() {
            const a = Math.floor(Math.random() * 11) - 5;
            const b = Math.floor(Math.random() * 3) + 1;
            const c = Math.floor(Math.random() * 3) + 1;
            const d = Math.floor(Math.random() * 3) + 1;

            const variables = getRandomVariables(3);
            
            currentProblem.expression = `${a}(${b}${variables[0]} + ${c}${variables[1]} + ${d}${variables[2]}) = ?`;
            currentProblem.answer = `${a * b}${variables[0]} + ${a * c}${variables[1]} + ${a * d}${variables[2]}`;
            
            document.getElementById('problem').textContent = currentProblem.expression;
            document.getElementById('answer').value = '';
            document.getElementById('feedback').className = 'feedback';
            
            updateVariableButtons(variables);
        }

        function getRandomVariables(count) {
            const shuffled = [...allVariables].sort(() => 0.5 - Math.random());
            return shuffled.slice(0, count);
        }

        function updateVariableButtons(variables) {
            document.getElementById('var1').textContent = variables[0];
            document.getElementById('var2').textContent = variables[1];
            document.getElementById('var3').textContent = variables[2];
        }

        function insertVariable(variable) {
            const input = document.getElementById('answer');
            const start = input.selectionStart;
            const end = input.selectionEnd;
            const value = input.value;
            
            input.value = value.substring(0, start) + variable + value.substring(end);
            input.selectionStart = input.selectionEnd = start + variable.length;
            input.focus();
        }

        function checkAnswer() {
            const userAnswer = document.getElementById('answer').value.replace(/\s+/g, '');
            const correctAnswer = currentProblem.answer.replace(/\s+/g, '');
            const feedback = document.getElementById('feedback');

            if (userAnswer === correctAnswer) {
                feedback.textContent = 'Correct! Well done!';
                feedback.className = 'feedback success';
            } else {
                feedback.textContent = 'Not quite right. Try again!';
                feedback.className = 'feedback error';
            }
        }

        function toggleGreekAlphabet() {
            const alphabet = document.getElementById('greekAlphabet');
            alphabet.classList.toggle('show');
        }

        // Event Listeners
        document.getElementById('var1').addEventListener('click', () => insertVariable(document.getElementById('var1').textContent));
        document.getElementById('var2').addEventListener('click', () => insertVariable(document.getElementById('var2').textContent));
        document.getElementById('var3').addEventListener('click', () => insertVariable(document.getElementById('var3').textContent));

        document.addEventListener('keydown', (e) => {
            if (e.key === 'a') insertVariable(document.getElementById('var1').textContent);
            if (e.key === 's') insertVariable(document.getElementById('var2').textContent);
            if (e.key === 'd') insertVariable(document.getElementById('var3').textContent);
            if (e.key === 'Enter' && document.activeElement === document.getElementById('answer')) {
                checkAnswer();
            }
        });

        // Initialize first problem
        generateProblem();
    </script>
</body>
</html>
