<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PEMDAS Arithmetic Game</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Comic Sans MS', cursive, sans-serif;
        }
        
        body {
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            background-color: #f0f8ff;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .container {
            max-width: 600px;
            width: 100%;
            margin: 0 auto;
        }

        .title {
            font-size: 1.5rem;
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }

        .menu-screen, .game-screen {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
            align-items: center;
        }

        .game-screen {
            display: none;
        }

        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            width: 100%;
            max-width: 200px;
            margin: 5px 0;
        }

        button:hover {
            background-color: #45a049;
        }

        .problem {
            font-size: 1.5rem;
            margin: 20px 0;
            text-align: center;
        }

        .answer-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            width: 100%;
        }

        input {
            font-size: 1.2rem;
            padding: 10px;
            width: 100%;
            max-width: 150px;
            text-align: center;
            border: 2px solid #ccc;
            border-radius: 5px;
        }

        .feedback {
            font-size: 1.2rem;
            margin: 10px 0;
            text-align: center;
            min-height: 1.5em;
        }

        .score {
            display: flex;
            gap: 20px;
            margin: 10px 0;
            font-size: 1rem;
        }

        .pemdas-section {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 10px 0;
            flex-wrap: wrap;
        }

        .pemdas-checkbox {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .correct {
            color: green;
        }

        .incorrect {
            color: red;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        @media (max-width: 400px) {
            .title {
                font-size: 1.2rem;
            }
            
            .problem {
                font-size: 1.2rem;
            }

            button {
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="menu-screen">
            <h1 class="title">PEMDAS with Squares and Roots</h1>
            <button onclick="startGame(1)">Level 1</button>
            <button onclick="startGame(2)">Level 2</button>
            <button onclick="startGame(3)">Level 3</button>
            <button onclick="startGame(4)">Level 4</button>
            <button onclick="startGame(5)">Level 5</button>
            <button onclick="startGame('Root')">Root Mode</button>
            <button onclick="startGame('Imaginary')">Imaginary Mode</button>
            <button onclick="startGame('Mixed')">Mixed Mode</button>
        </div>

        <div class="game-screen">
            <div class="problem" id="problem"></div>
            <div class="answer-section">
                <input type="text" id="answer" placeholder="Enter answer" />
                <button onclick="checkAnswer()">Check Answer</button>
            </div>
            <div class="pemdas-section">
                <label class="pemdas-checkbox">
                    <input type="checkbox" id="P" /> P
                </label>
                <label class="pemdas-checkbox">
                    <input type="checkbox" id="E" /> E
                </label>
                <label class="pemdas-checkbox">
                    <input type="checkbox" id="MD" /> MD
                </label>
                <label class="pemdas-checkbox">
                    <input type="checkbox" id="AS" /> AS
                </label>
            </div>
            <div class="feedback" id="feedback"></div>
            <div class="score">
                <span id="correct">Correct: 0</span>
                <span id="incorrect">Incorrect: 0</span>
            </div>
            <div class="nav-buttons">
                <button onclick="previousProblem()">Previous</button>
                <button onclick="nextProblem()">Next</button>
            </div>
            <button onclick="returnToMenu()">Back to Menu</button>
        </div>
    </div>

    <script>
        let currentLevel = 1;
        let problems = [];
        let problemIndex = 0;
        let correctAnswers = 0;
        let incorrectAnswers = 0;
        let currentAnswer = null;
        let isRootMode = false;
        let isImaginaryMode = false;

        function generateProblems(level) {
            problems = [];
            for (let i = 0; i < 5; i++) {
                if (isImaginaryMode) {
                    const num = Math.floor(Math.random() * 10) + 1;
                    problems.push({
                        problem: `√${-num * num}`,
                        answer: [{ re: 0, im: num }, { re: 0, im: -num }]
                    });
                } else if (isRootMode) {
                    const num = Math.floor(Math.random() * 10) + 1;
                    problems.push({
                        problem: `√${num * num}`,
                        answer: [num, -num]
                    });
                } else if (level === 'Mixed') {
                    if (Math.random() < 0.5) {
                        const num = Math.floor(Math.random() * 10) + 1;
                        problems.push({
                            problem: `√${num * num}`,
                            answer: [num, -num]
                        });
                    } else {
                        const num = Math.floor(Math.random() * 10) + 1;
                        problems.push({
                            problem: `√${-num * num}`,
                            answer: [{ re: 0, im: num }, { re: 0, im: -num }]
                        });
                    }
                } else {
                    let problem, answer;
                    switch(level) {
                        case 1:
                            const n1 = Math.floor(Math.random() * 6) + 1;
                            const n2 = Math.floor(Math.random() * 6) + 1;
                            const n3 = Math.floor(Math.random() * 6) + 1;
                            problem = `${n1} + ${n2} × ${n3}`;
                            answer = n1 + n2 * n3;
                            break;
                        case 2:
                            const num1 = Math.floor(Math.random() * 6) + 1;
                            const num2 = Math.floor(Math.random() * 3) + 1;
                            problem = `${num1} + ${num2}²`;
                            answer = num1 + num2 * num2;
                            break;
                        case 3:
                            const a = Math.floor(Math.random() * 6) + 1;
                            const b = Math.pow(Math.floor(Math.random() * 4) + 1, 2);
                            const c = Math.floor(Math.random() * 6) + 1;
                            problem = `${a} + √${b} - ${c}`;
                            answer = a + Math.sqrt(b) - c;
                            break;
                        case 4:
                            const x = Math.floor(Math.random() * 6) + 1;
                            const y = Math.floor(Math.random() * 3) + 1;
                            const z = Math.floor(Math.random() * 6) + 1;
                            const dividend = x * y;
                            problem = `(${dividend} ÷ ${x})² + ${z}`;
                            answer = Math.pow(dividend / x, 2) + z;
                            break;
                        case 5:
                            const p = Math.floor(Math.random() * 3) + 1;
                            const q = Math.pow(Math.floor(Math.random() * 4) + 1, 2);
                            const r = Math.floor(Math.random() * 6) + 1;
                            problem = `(${p}² × √${q}) + ${r}`;
                            answer = (p * p * Math.sqrt(q)) + r;
                            break;
                    }
                    problems.push({ problem, answer });
                }
            }
        }

        function loadProblem() {
            if (problemIndex >= 0 && problemIndex < problems.length) {
                document.getElementById('problem').textContent = problems[problemIndex].problem;
                document.getElementById('answer').value = '';
                document.getElementById('feedback').textContent = '';
                resetCheckboxes();
            } else {
                document.getElementById('problem').textContent = 'No more problems!';
            }
        }

        function checkAnswer() {
            const userAnswer = document.getElementById('answer').value.trim();
            const currentProblem = problems[problemIndex];

            try {
                if (isImaginaryMode || (currentLevel === 'Mixed' && Array.isArray(currentProblem.answer) && typeof currentProblem.answer[0] === 'object')) {
                    // Handle imaginary numbers
                    const answers = userAnswer.split(',').map(a => {
                        const num = parseInt(a.replace(/[ji]/g, ''));
                        return { re: 0, im: num };
                    });
                    
                    const isCorrect = answers.length === 2 && 
                        currentProblem.answer.some(ans => 
                            answers.some(userAns => 
                                userAns.re === ans.re && userAns.im === ans.im
                            )
                        );

                    handleAnswerResult(isCorrect, currentProblem.answer.map(a => `${a.im}j`).join(', '));
                } else if (isRootMode || (currentLevel === 'Mixed' && Array.isArray(currentProblem.answer))) {
                    // Handle real roots
                    const userNum = parseInt(userAnswer);
                    const isCorrect = currentProblem.answer.includes(userNum);
                    handleAnswerResult(isCorrect, currentProblem.answer.join(', '));
                } else {
                    // Handle regular arithmetic
                    const userNum = parseFloat(userAnswer);
                    const isCorrect = Math.abs(userNum - currentProblem.answer) < 0.001;
                    handleAnswerResult(isCorrect, currentProblem.answer);
                }
            } catch (e) {
                showFeedback('Please enter a valid number', 'incorrect');
            }
        }

        function handleAnswerResult(isCorrect, correctAnswer) {
            if (isCorrect) {
                correctAnswers++;
                showFeedback('Correct!', 'correct');
                nextProblem();
            } else {
                incorrectAnswers++;
                showFeedback(`Incorrect! Correct answer: ${correctAnswer}`, 'incorrect');
            }
            updateScore();
        }

        function showFeedback(message, className) {
            const feedback = document.getElementById('feedback');
            feedback.textContent = message;
            feedback.className = 'feedback ' + className;
        }

        function updateScore() {
            document.getElementById('correct').textContent = `Correct: ${correctAnswers}`;
            document.getElementById('incorrect').textContent = `Incorrect: ${incorrectAnswers}`;
        }

        function nextProblem() {
            if (problemIndex < problems.length - 1) {
                problemIndex++;
                loadProblem();
            }
        }

        function previousProblem() {
            if (problemIndex > 0) {
                problemIndex--;
                loadProblem();
            }
        }

        function resetCheckboxes() {
            document.querySelectorAll('.pemdas-checkbox input').forEach(cb => cb.checked = false);
        }

        function startGame(level) {
            currentLevel = level;
            isRootMode = level === 'Root';
            isImaginaryMode = level === 'Imaginary';
            correctAnswers = 0;
            incorrectAnswers = 0;
            problemIndex = 0;
            generateProblems(level);
            loadProblem();
            document.querySelector('.menu-screen').style.display = 'none';
            document.querySelector('.game-screen').style.display = 'flex';
            updateScore();
        }

        function returnToMenu() {
            document.querySelector('.game-screen').style.display = 'none';
            document.querySelector('.menu-screen').style.display = 'flex';
        }

        // Handle keyboard shortcuts for PEMDAS checkboxes
        document.addEventListener('keypress', (e) => {
            const key = e.key.toLowerCase();
            const checkboxMap = {
                'p': 'P',
                'e': 'E',
                'm': 'MD',
                'd': 'MD',
                'a': 'AS',
                's': 'AS'
            };
            
            if (checkboxMap[key]) {
                const checkbox = document.getElementById(checkboxMap[key]);
                if (checkbox) {
                    checkbox.checked = !checkbox.checked;
                    e.preventDefault();
                }
            }
        });

        // Handle Enter key for checking answer
        document.getElementById('answer').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                checkAnswer();
            }
        });
    </script>
</body>
</html>