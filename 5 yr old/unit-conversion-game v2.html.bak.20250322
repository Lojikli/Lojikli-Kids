<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Unit Conversion Adventure</title>
  <style>
    :root {
      --primary-color: #4e54c8;
      --secondary-color: #8f94fb;
      --accent-color: #ff9a76;
      --text-color: #333333;
      --background-color: #f5f7ff;
      --success-color: #66BB6A;
      --error-color: #f44336;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Comic Sans MS', cursive, sans-serif;
    }

    body {
      background: linear-gradient(135deg, var(--background-color), #ffffff);
      color: var(--text-color);
      min-height: 100vh;
      overflow-x: hidden;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 1rem;
    }

    header {
      text-align: center;
      padding: 1rem;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      color: white;
      border-radius: 0 0 15px 15px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      position: relative;
      overflow: hidden;
    }

    h1 {
      margin-bottom: 0.5rem;
      font-size: 2.5rem;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    }

    h2 {
      margin: 1.5rem 0 1rem;
      color: var(--primary-color);
    }

    h3 {
      margin: 1rem 0 0.5rem;
      color: var(--secondary-color);
    }

    .bubble {
      position: absolute;
      border-radius: 50%;
      background-color: rgba(255,255,255,0.1);
      animation: float 20s infinite ease-in-out;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0) translateX(0); }
      25% { transform: translateY(-20px) translateX(10px); }
      50% { transform: translateY(-10px) translateX(-10px); }
      75% { transform: translateY(-5px) translateX(15px); }
    }

    main {
      margin: 1rem 0;
      min-height: 70vh;
    }

    .screen {
      display: none;
      opacity: 0;
      transition: opacity 0.5s ease;
      padding: 1rem;
      background-color: white;
      border-radius: 15px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    .screen.active {
      display: block;
      opacity: 1;
    }

    .welcome-screen, .character-select, .module-select, .intro-screen, .game-container, .quiz-container, .adventure-container, .explore-container, .settings-container, .certificate-screen {
      text-align: center;
    }

    .button-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1rem;
      margin: 1.5rem 0;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 50px;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      color: white;
      font-size: 1.1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .btn:active {
      transform: translateY(1px);
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    .btn-secondary {
      background: linear-gradient(90deg, var(--accent-color), #ffac76);
    }

    .character-options, .module-options {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1.5rem;
      margin: 2rem 0;
    }

    .character-card, .module-card {
      width: 220px;
      padding: 1.5rem;
      border-radius: 15px;
      background-color: white;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .character-card:hover, .module-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0,0,0,0.12);
    }

    .character-card.selected, .module-card.selected {
      border: 3px solid var(--accent-color);
    }

    .character-img, .module-img {
      width: 100%;
      height: 150px;
      margin-bottom: 1rem;
      background-color: #f0f0f0;
      border-radius: 8px;
      overflow: hidden;
      position: relative;
    }

    .module-name, .character-name {
      font-weight: bold;
      margin-bottom: 0.5rem;
      color: var(--primary-color);
    }

    .module-desc, .character-desc {
      font-size: 0.9rem;
      color: #666;
    }

    .dialogue-box {
      background-color: white;
      border-radius: 15px;
      padding: 1.5rem;
      margin: 1rem 0;
      position: relative;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    .dialogue-character {
      position: absolute;
      width: 100px;
      height: 100px;
      left: -50px;
      top: -20px;
    }

    .dialogue-text {
      margin-left: 60px;
      text-align: left;
      font-size: 1.1rem;
      line-height: 1.5;
    }

    .game-area {
      margin: 2rem 0;
      min-height: 400px;
      position: relative;
      border-radius: 15px;
      background-color: #f9f9f9;
      box-shadow: inset 0 2px 10px rgba(0,0,0,0.05);
      padding: 1.5rem;
    }

    .conversion-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1.5rem;
      padding: 1rem;
    }

    .conversion-group {
      display: flex;
      align-items: center;
      gap: 1rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .conversion-item {
      position: relative;
      width: 150px;
      height: 150px;
      background-color: white;
      border-radius: 15px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .conversion-item:hover {
      transform: scale(1.05);
    }

    .conversion-item.active {
      border: 3px solid var(--accent-color);
    }

    .conversion-value {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }

    .conversion-unit {
      font-size: 0.9rem;
      color: #666;
    }

    .conversion-arrow {
      font-size: 2rem;
      color: var(--primary-color);
    }

    .quiz-question {
      font-size: 1.2rem;
      margin-bottom: 1.5rem;
    }

    .quiz-options {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      max-width: 600px;
      margin: 0 auto;
    }

    .quiz-option {
      padding: 1rem;
      border-radius: 10px;
      background-color: #f5f5f5;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .quiz-option:hover {
      background-color: #e9e9e9;
    }

    .quiz-option.selected {
      background-color: var(--secondary-color);
      color: white;
    }

    .quiz-option.correct {
      background-color: var(--success-color);
      color: white;
    }

    .quiz-option.incorrect {
      background-color: var(--error-color);
      color: white;
    }

    .feedback {
      margin: 1.5rem 0;
      padding: 1rem;
      border-radius: 10px;
      font-weight: bold;
    }

    .feedback.success {
      background-color: rgba(102, 187, 106, 0.2);
      color: #2e7d32;
    }

    .feedback.error {
      background-color: rgba(244, 67, 54, 0.2);
      color: #c62828;
    }

    .progress-container {
      width: 100%;
      height: 10px;
      background-color: #e0e0e0;
      border-radius: 5px;
      margin: 1.5rem 0;
      overflow: hidden;
    }

    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      border-radius: 5px;
      transition: width 0.3s ease;
    }

    .score-container {
      display: flex;
      justify-content: space-between;
      max-width: 600px;
      margin: 1rem auto;
      font-weight: bold;
    }

    .interactive-element {
      position: relative;
      cursor: pointer;
    }

    .draggable {
      cursor: grab;
    }

    .draggable:active {
      cursor: grabbing;
    }

    .droppable {
      border: 2px dashed #ccc;
      background-color: rgba(240,240,240,0.5);
    }

    .droppable.active {
      border-color: var(--accent-color);
      background-color: rgba(255,154,118,0.1);
    }

    .settings-options {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      max-width: 600px;
      margin: 0 auto;
      text-align: left;
    }

    .settings-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .settings-group label {
      font-weight: bold;
      color: var(--primary-color);
    }

    .settings-group select, .settings-group input {
      padding: 0.75rem;
      border-radius: 8px;
      border: 1px solid #ddd;
      font-size: 1rem;
    }

    .slider-container {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    input[type="range"] {
      flex: 1;
    }

    .slider-value {
      width: 50px;
      text-align: center;
      font-weight: bold;
    }

    .toggle-container {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .toggle {
      position: relative;
      width: 60px;
      height: 34px;
    }

    .toggle input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 34px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }

    input:checked + .toggle-slider:before {
      transform: translateX(26px);
    }

    .badge-container {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin: 1.5rem 0;
    }

    .badge {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background-color: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .badge.unlocked {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .badge-icon {
      font-size: 2.5rem;
      color: white;
    }

    .badge-lock {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      color: white;
    }

    .certificate {
      padding: 2rem;
      border: 10px solid var(--primary-color);
      border-radius: 15px;
      background-color: white;
      max-width: 800px;
      margin: 0 auto;
      text-align: center;
    }

    .certificate-title {
      font-size: 2.5rem;
      color: var(--primary-color);
      margin-bottom: 1.5rem;
    }

    .certificate-name {
      font-size: 2rem;
      margin: 1.5rem 0;
      border-bottom: 2px solid var(--accent-color);
      padding-bottom: 0.5rem;
      display: inline-block;
    }

    .certificate-text {
      font-size: 1.2rem;
      margin-bottom: 1.5rem;
      line-height: 1.5;
    }

    .certificate-date {
      font-size: 1.1rem;
      font-style: italic;
      margin-top: 2rem;
    }

    .certificate-seal {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 1rem auto;
      font-size: 3rem;
      color: white;
      position: relative;
    }

    .certificate-seal::before {
      content: "";
      position: absolute;
      width: 90px;
      height: 90px;
      border-radius: 50%;
      border: 2px dashed white;
    }

    .star-rating {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin: 1rem 0;
      font-size: 2rem;
    }

    .star {
      cursor: pointer;
      color: #ddd;
      transition: color 0.2s ease;
    }

    .star.active {
      color: #ffc107;
    }

    .visualizer-container {
      height: 300px;
      margin: 1.5rem 0;
      position: relative;
      border-radius: 15px;
      overflow: hidden;
    }

    .visual-scene {
      width: 100%;
      height: 100%;
      background-color: #f5f5f5;
      position: relative;
    }

    .parameter-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin: 1.5rem 0;
    }

    .parameter-control {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 150px;
    }

    .parameter-label {
      font-weight: bold;
      margin-bottom: 0.5rem;
      color: var(--primary-color);
    }

    .parameter-input {
      width: 100%;
    }

    .visual-objects {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin: 1.5rem 0;
    }

    .visual-object {
      width: 100px;
      height: 100px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .visual-object:hover {
      transform: scale(1.05);
    }

    .visual-object.active {
      border: 3px solid var(--accent-color);
    }

    .nav-menu {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      display: flex;
      gap: 0.5rem;
      background-color: white;
      border-radius: 50px;
      padding: 0.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 100;
    }

    .nav-button {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f5f5f5;
      cursor: pointer;
      font-size: 1.2rem;
      transition: all 0.3s ease;
    }

    .nav-button:hover {
      background-color: var(--secondary-color);
      color: white;
    }

    .nav-button.active {
      background-color: var(--primary-color);
      color: white;
    }

    .hint-button {
      position: absolute;
      top: 1rem;
      right: 1rem;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--accent-color);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
      transition: all 0.3s ease;
    }

    .hint-button:hover {
      transform: scale(1.1);
    }

    .hint-popup {
      position: absolute;
      top: calc(100% + 10px);
      right: 0;
      width: 250px;
      padding: 1rem;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 100;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
      text-align: left;
    }

    .hint-button:hover .hint-popup {
      opacity: 1;
      pointer-events: auto;
    }

    @media (max-width: 768px) {
      .conversion-group {
        flex-direction: column;
      }
      
      .character-options, .module-options {
        gap: 1rem;
      }
      
      .character-card, .module-card {
        width: 180px;
        padding: 1rem;
      }
      
      .character-img, .module-img {
        height: 120px;
      }
      
      .dialogue-character {
        width: 80px;
        height: 80px;
        left: -30px;
        top: -10px;
      }
      
      .dialogue-text {
        margin-left: 40px;
        font-size: 1rem;
      }
      
      h1 {
        font-size: 2rem;
      }
    }

    /* Animation Classes */
    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
      40% {transform: translateY(-20px);}
      60% {transform: translateY(-10px);}
    }

    .bounce {
      animation: bounce 2s ease infinite;
    }

    @keyframes pulse {
      0% {transform: scale(1);}
      50% {transform: scale(1.05);}
      100% {transform: scale(1);}
    }

    .pulse {
      animation: pulse 2s ease infinite;
    }

    @keyframes shake {
      0%, 100% {transform: translateX(0);}
      10%, 30%, 50%, 70%, 90% {transform: translateX(-5px);}
      20%, 40%, 60%, 80% {transform: translateX(5px);}
    }

    .shake {
      animation: shake 0.5s ease;
    }

    @keyframes fadeIn {
      0% {opacity: 0;}
      100% {opacity: 1;}
    }

    .fade-in {
      animation: fadeIn 1s ease;
    }

    #loading {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.9);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .spinner {
      width: 70px;
      height: 70px;
      border: 8px solid #f3f3f3;
      border-top: 8px solid var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 1rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Character-specific styles */
    .character-measuring-tape {
      --character-primary: #ff9a76;
      --character-secondary: #ff5e5b;
    }

    .character-scale {
      --character-primary: #3FC1C9;
      --character-secondary: #0E86D4;
    }

    .character-clock {
      --character-primary: #67D5B5;
      --character-secondary: #20BF55;
    }

    .character-thermometer {
      --character-primary: #FF8C64;
      --character-secondary: #FF5722;
    }
  </style>
</head>
<body>
  <div id="loading">
    <div class="spinner"></div>
    <p>Loading Adventure...</p>
  </div>

  <header>
    <div class="bubble" style="width: 80px; height: 80px; top: 10%; left: 10%;"></div>
    <div class="bubble" style="width: 60px; height: 60px; top: 30%; left: 20%;"></div>
    <div class="bubble" style="width: 100px; height: 100px; top: 10%; left: 80%;"></div>
    <div class="bubble" style="width: 40px; height: 40px; top: 60%; left: 90%;"></div>
    <h1>Unit Conversion Adventure</h1>
    <p>Explore the Magical World of Measurements!</p>
  </header>

  <main class="container">
    <!-- Welcome Screen -->
    <div id="welcome-screen" class="screen welcome-screen active">
      <h2>Welcome Young Explorer!</h2>
      <p>Are you ready to discover the amazing world of measurements and unit conversions?</p>
      
      <div class="game-area">
        <svg id="welcome-svg" width="100%" height="100%" viewBox="0 0 800 400"></svg>
      </div>
      
      <div class="button-container">
        <button id="start-button" class="btn">Start Adventure</button>
        <button id="settings-button" class="btn btn-secondary">Settings</button>
      </div>
    </div>

    <!-- Character Select Screen -->
    <div id="character-select" class="screen character-select">
      <h2>Choose Your Guide</h2>
      <p>Select a friendly character to guide you through your measurement adventure!</p>
      
      <div class="character-options">
        <div class="character-card character-measuring-tape" data-character="measuringtape">
          <div class="character-img">
            <!-- SVG character will be rendered here -->
          </div>
          <div class="character-name">Measuring Tape Mia</div>
          <div class="character-desc">Expert on lengths and distances</div>
        </div>
        
        <div class="character-card character-scale" data-character="scale">
          <div class="character-img">
            <!-- SVG character will be rendered here -->
          </div>
          <div class="character-name">Balancing Bill</div>
          <div class="character-desc">Master of weights and mass</div>
        </div>
        
        <div class="character-card character-clock" data-character="clock">
          <div class="character-img">
            <!-- SVG character will be rendered here -->
          </div>
          <div class="character-name">Tick-Tock Tim</div>
          <div class="character-desc">Time conversion specialist</div>
        </div>
        
        <div class="character-card character-thermometer" data-character="thermometer">
          <div class="character-img">
            <!-- SVG character will be rendered here -->
          </div>
          <div class="character-name">Thermo Tina</div>
          <div class="character-desc">Temperature expert</div>
        </div>
      </div>
      
      <div class="button-container">
        <button id="confirm-character" class="btn" disabled>Continue</button>
        <button id="back-to-welcome" class="btn btn-secondary">Back</button>
      </div>
    </div>

    <!-- Module Select Screen -->
    <div id="module-select" class="screen module-select">
      <h2>Choose What to Learn</h2>
      <p>What kind of measurement would you like to explore today?</p>
      
      <div class="module-options">
        <div class="module-card" data-module="length">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Length & Distance</div>
          <div class="module-desc">Inches, feet, centimeters, meters</div>
        </div>
        
        <div class="module-card" data-module="weight">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Weight & Mass</div>
          <div class="module-desc">Ounces, pounds, grams, kilograms</div>
        </div>
        
        <div class="module-card" data-module="time">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Time</div>
          <div class="module-desc">Seconds, minutes, hours, days</div>
        </div>
        
        <div class="module-card" data-module="volume">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Volume</div>
          <div class="module-desc">Cups, pints, milliliters, liters</div>
        </div>
        
        <div class="module-card" data-module="temperature">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Temperature</div>
          <div class="module-desc">Fahrenheit and Celsius</div>
        </div>
        
        <div class="module-card" data-module="adventure">
          <div class="module-img">
            <!-- SVG illustration will be rendered here -->
          </div>
          <div class="module-name">Measurement Adventure</div>
          <div class="module-desc">Use all conversions to solve puzzles</div>
        </div>
      </div>
      
      <div class="button-container">
        <button id="confirm-module" class="btn" disabled>Start Learning</button>
        <button id="back-to-character" class="btn btn-secondary">Back</button>
      </div>
    </div>

    <!-- Intro Screen -->
    <div id="intro-screen" class="screen intro-screen">
      <h2 id="intro-title">Welcome to Length & Distance</h2>
      
      <div class="dialogue-box">
        <div class="dialogue-character" id="intro-character">
          <!-- Character SVG will be rendered here -->
        </div>
        <div class="dialogue-text" id="intro-text">
          Hi there! I'm Measuring Tape Mia! Today we're going to learn all about Length and Distance. Did you know we measure things in different units depending on how big they are? Let's explore inches, feet, centimeters, and meters together!
        </div>
      </div>
      
      <div class="game-area">
        <svg id="intro-svg" width="100%" height="100%" viewBox="0 0 800 400"></svg>
      </div>
      
      <div class="button-container">
        <button id="start-learning" class="btn">Let's Learn!</button>
        <button id="back-to-modules" class="btn btn-secondary">Choose Another Topic</button>
      </div>
    </div>

    <!-- Main Game Container -->
    <div id="game-container" class="screen game-container">
      <h2 id="game-title">Length & Distance</h2>
      
      <div class="progress-container">
        <div id="progress-bar" class="progress-bar" style="width: 0%"></div>
      </div>
      
      <div class="dialogue-box">
        <div class="dialogue-character" id="game-character">
          <!-- Character SVG will be rendered here -->
        </div>
        <div class="dialogue-text" id="game-text">
          Let's start with something simple! Did you know that 12 inches make 1 foot? And 100 centimeters make 1 meter? Let's try some conversions!
        </div>
      </div>
      
      <div class="game-area" id="game-area">
        <!-- Game content will be dynamically inserted here -->
      </div>
      
      <div class="button-container">
        <button id="game-continue" class="btn">Continue</button>
        <button id="game-hint" class="btn btn-secondary">Hint</button>
      </div>
    </div>

    <!-- Quiz Container -->
    <div id="quiz-container" class="screen quiz-container">
      <h2 id="quiz-title">Length & Distance Quiz</h2>
      
      <div class="progress-container">
        <div id="quiz-progress-bar" class="progress-bar" style="width: 0%"></div>
      </div>
      
      <div class="score-container">
        <div id="quiz-score">Score: 0</div>
        <div id="quiz-count">Question: 1/5</div>
      </div>
      
      <div class="quiz-question" id="quiz-question">
        If you have 36 inches, how many feet do you have?
      </div>
      
      <div class="quiz-options" id="quiz-options">
        <div class="quiz-option" data-answer="1">1 foot</div>
        <div class="quiz-option" data-answer="2">2 feet</div>
        <div class="quiz-option" data-answer="3">3 feet</div>
        <div class="quiz-option" data-answer="4">4 feet</div>
      </div>
      
      <div id="quiz-feedback" class="feedback"></div>
      
      <div class="button-container">
        <button id="quiz-check" class="btn" disabled>Check Answer</button>
        <button id="quiz-next" class="btn" style="display: none;">Next Question</button>
      </div>
    </div>

    <!-- Adventure Container -->
    <div id="adventure-container" class="screen adventure-container">
      <h2>Measurement Adventure</h2>
      
      <div class="dialogue-box">
        <div class="dialogue-character" id="adventure-character">
          <!-- Character SVG will be rendered here -->
        </div>
        <div class="dialogue-text" id="adventure-text">
          Welcome to the Measurement Adventure! You'll need to use everything you've learned about measurements to solve puzzles and complete missions!
        </div>
      </div>
      
      <div class="game-area" id="adventure-area">
        <!-- Adventure content will be dynamically inserted here -->
      </div>
      
      <div class="button-container">
        <button id="adventure-continue" class="btn">Continue</button>
        <button id="adventure-hint" class="btn btn-secondary">Hint</button>
      </div>
    </div>

    <!-- Explore Container -->
    <div id="explore-container" class="screen explore-container">
      <h2>Explore & Experiment</h2>
      
      <div class="dialogue-box">
        <div class="dialogue-character" id="explore-character">
          <!-- Character SVG will be rendered here -->
        </div>
        <div class="dialogue-text" id="explore-text">
          This is your laboratory! You can experiment with different conversions and see how they work. Try changing the parameters to see what happens!
        </div>
      </div>
      
      <div class="visualizer-container">
        <div class="visual-scene" id="visual-scene"></div>
      </div>
      
      <div class="parameter-controls" id="parameter-controls">
        <!-- Parameter controls will be dynamically inserted here -->
      </div>
      
      <div class="visual-objects" id="visual-objects">
        <!-- Visual objects will be dynamically inserted here -->
      </div>
      
      <div class="button-container">
        <button id="reset-parameters" class="btn btn-secondary">Reset</button>
        <button id="back-to-game" class="btn">Back to Learning</button>
      </div>
    </div>

    <!-- Settings Container -->
    <div id="settings-container" class="screen settings-container">
      <h2>Settings</h2>
      
      <div class="settings-options">
        <div class="settings-group">
          <label for="difficulty">Difficulty Level</label>
          <select id="difficulty">
            <option value="easy">Easy - Simple Conversions</option>
            <option value="medium" selected>Medium - More Complex Conversions</option>
            <option value="hard">Hard - Advanced Challenges</option>
            <option value="genius">Genius - PhD Level Concepts</option>
          </select>
        </div>
        
        <div class="settings-group">
          <label for="sound-effects">Sound Effects Volume</label>
          <div class="slider-container">
            <input type="range" id="sound-effects" min="0" max="100" value="80">
            <div class="slider-value" id="sound-effects-value">80%</div>
          </div>
        </div>
        
        <div class="settings-group">
          <label for="music">Background Music Volume</label>
          <div class="slider-container">
            <input type="range" id="music" min="0" max="100" value="50">
            <div class="slider-value" id="music-value">50%</div>
          </div>
        </div>
        
        <div class="settings-group">
          <label>Visual Effects</label>
          <div class="toggle-container">
            <label class="toggle">
              <input type="checkbox" id="visual-effects" checked>
              <span class="toggle-slider"></span>
            </label>
            <span>Enabled</span>
          </div>
        </div>
        
        <div class="settings-group">
          <label>Advanced Explanations</label>
          <div class="toggle-container">
            <label class="toggle">
              <input type="checkbox" id="advanced-explanations">
              <span class="toggle-slider"></span>
            </label>
            <span>Disabled</span>
          </div>
        </div>
        
        <div class="settings-group">
          <label for="text-speed">Text Speed</label>
          <div class="slider-container">
            <input type="range" id="text-speed" min="1" max="10" value="5">
            <div class="slider-value" id="text-speed-value">5</div>
          </div>
        </div>
        
        <div class="settings-group">
          <label for="theme">Color Theme</label>
          <select id="theme">
            <option value="default" selected>Default - Purple & Blue</option>
            <option value="green">Green Adventure</option>
            <option value="orange">Orange Delight</option>
            <option value="rainbow">Rainbow Explorer</option>
          </select>
        </div>
      </div>
      
      <div class="button-container">
        <button id="save-settings" class="btn">Save Settings</button>
        <button id="reset-settings" class="btn btn-secondary">Reset to Default</button>
      </div>
    </div>

    <!-- Certificate Screen -->
    <div id="certificate-screen" class="screen certificate-screen">
      <div class="certificate">
        <div class="certificate-title">Certificate of Achievement</div>
        
        <p>This is to certify that</p>
        <div class="certificate-name">Explorer Extraordinaire</div>
        
        <div class="certificate-text">
          has successfully completed all challenges in the 
          <strong id="certificate-module">Length & Distance</strong> 
          module of the Unit Conversion Adventure
        </div>
        
        <div class="star-rating">
          <span class="star active">★</span>
          <span class="star active">★</span>
          <span class="star active">★</span>
          <span class="star">★</span>
          <span class="star">★</span>
        </div>
        
        <div class="certificate-seal">
          <span>✓</span>
        </div>
        
        <div class="certificate-date" id="certificate-date">March 2, 2025</div>
      </div>
      
      <div class="button-container">
        <button id="play-again" class="btn">Play Another Module</button>
        <button id="share-certificate" class="btn btn-secondary">Print Certificate</button>
      </div>
    </div>
  </main>

  <div class="nav-menu">
    <div class="nav-button" id="nav-home">🏠</div>
    <div class="nav-button" id="nav-explore">🔍</div>
    <div class="nav-button" id="nav-settings">⚙️</div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"></script>

  <script>
    // ===== Main Application Logic =====
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize the application after a short loading delay
      setTimeout(() => {
        document.getElementById('loading').style.display = 'none';
        initApp();
        renderCharacters();
        renderModuleIcons();
        renderWelcomeScene();
      }, 1500);
      
      // Application state
      const state = {
        character: null,
        module: null,
        difficulty: 'medium',
        progress: {
          length: { completed: 0, total: 5, score: 0 },
          weight: { completed: 0, total: 5, score: 0 },
          time: { completed: 0, total: 5, score: 0 },
          volume: { completed: 0, total: 5, score: 0 },
          temperature: { completed: 0, total: 5, score: 0 },
          adventure: { completed: 0, total: 10, score: 0 }
        },
        settings: {
          soundEffects: 80,
          music: 50,
          visualEffects: true,
          advancedExplanations: false,
          textSpeed: 5,
          theme: 'default'
        },
        currentScreen: 'welcome-screen',
        currentStep: 0,
        quizData: {
          currentQuestion: 0,
          score: 0,
          selectedAnswer: null,
          questions: []
        },
        badgesEarned: [],
        parameters: {},
        audioContext: null,
        synth: null
      };
      
      // Initialize Web Audio API
      function initAudio() {
        try {
          state.audioContext = new (window.AudioContext || window.webkitAudioContext)();
          // Simple synth for sound effects using Tone.js
          state.synth = new Tone.Synth().toDestination();
          state.synth.volume.value = -10; // Lower volume a bit
        } catch (e) {
          console.error('Web Audio API is not supported in this browser.', e);
        }
      }
      
      // Sound effects
      function playSound(type) {
        if (!state.audioContext || !state.synth) return;
        
        const volume = state.settings.soundEffects / 100;
        
        switch(type) {
          case 'click':
            state.synth.triggerAttackRelease('C5', '16n', undefined, volume * 0.5);
            break;
          case 'success':
            state.synth.triggerAttackRelease('G5', '8n', undefined, volume * 0.6);
            setTimeout(() => {
              state.synth.triggerAttackRelease('C6', '4n', undefined, volume * 0.6);
            }, 150);
            break;
          case 'error':
            state.synth.triggerAttackRelease('E4', '8n', undefined, volume * 0.4);
            setTimeout(() => {
              state.synth.triggerAttackRelease('Eb4', '4n', undefined, volume * 0.4);
            }, 150);
            break;
          case 'complete':
            const notes = ['C5', 'E5', 'G5', 'C6'];
            notes.forEach((note, i) => {
              setTimeout(() => {
                state.synth.triggerAttackRelease(note, '8n', undefined, volume * 0.7);
              }, i * 150);
            });
            break;
        }
      }
      
      // Initialize application
      function initApp() {
        // Initialize audio on user interaction
        document.addEventListener('click', () => {
          if (!state.audioContext) {
            initAudio();
          }
        }, { once: true });
        
        // Load saved state from localStorage if available
        const savedState = localStorage.getItem('unitConversionState');
        if (savedState) {
          try {
            const parsed = JSON.parse(savedState);
            // Only copy safe properties
            state.progress = parsed.progress || state.progress;
            state.settings = parsed.settings || state.settings;
            state.badgesEarned = parsed.badgesEarned || [];
            
            // Apply loaded settings
            applySettings();
          } catch (e) {
            console.error('Error loading saved state:', e);
          }
        }
        
        // Initialize event listeners
        initEventListeners();
      }
      
      // Apply current settings
      function applySettings() {
        // Apply theme
        document.documentElement.className = '';
        document.documentElement.classList.add(`theme-${state.settings.theme}`);
        
        // Set form values to match settings
        document.getElementById('difficulty').value = state.difficulty;
        document.getElementById('sound-effects').value = state.settings.soundEffects;
        document.getElementById('sound-effects-value').textContent = `${state.settings.soundEffects}%`;
        document.getElementById('music').value = state.settings.music;
        document.getElementById('music-value').textContent = `${state.settings.music}%`;
        document.getElementById('visual-effects').checked = state.settings.visualEffects;
        document.getElementById('advanced-explanations').checked = state.settings.advancedExplanations;
        document.getElementById('text-speed').value = state.settings.textSpeed;
        document.getElementById('text-speed-value').textContent = state.settings.textSpeed;
        document.getElementById('theme').value = state.settings.theme;
        
        // Update toggle labels
        document.querySelector('input#visual-effects + .toggle-slider')
          .nextElementSibling.textContent = state.settings.visualEffects ? 'Enabled' : 'Disabled';
        document.querySelector('input#advanced-explanations + .toggle-slider')
          .nextElementSibling.textContent = state.settings.advancedExplanations ? 'Enabled' : 'Disabled';
      }
      
      // Save current state to localStorage
      function saveState() {
        const saveData = {
          progress: state.progress,
          settings: state.settings,
          badgesEarned: state.badgesEarned
        };
        
        localStorage.setItem('unitConversionState', JSON.stringify(saveData));
      }
      
      // Navigation between screens
      function navigateTo(screenId) {
        if (state.currentScreen === screenId) return;
        
        // Play click sound
        playSound('click');
        
        // Hide current screen
        document.getElementById(state.currentScreen).classList.remove('active');
        
        // Show new screen
        document.getElementById(screenId).classList.add('active');
        
        // Update state
        state.currentScreen = screenId;
        
        // Special handling for specific screens
        if (screenId === 'game-container') {
          state.currentStep = 0;
          initGameContent();
        } else if (screenId === 'quiz-container') {
          initQuiz();
        } else if (screenId === 'explore-container') {
          initExploreMode();
        }
        
        // Update nav menu
        updateNavMenu();
      }
      
      // Update navigation menu based on current screen
      function updateNavMenu() {
        const navButtons = document.querySelectorAll('.nav-button');
        navButtons.forEach(btn => btn.classList.remove('active'));
        
        if (state.currentScreen === 'welcome-screen' || 
            state.currentScreen === 'character-select' || 
            state.currentScreen === 'module-select') {
          document.getElementById('nav-home').classList.add('active');
        } else if (state.currentScreen === 'explore-container') {
          document.getElementById('nav-explore').classList.add('active');
        } else if (state.currentScreen === 'settings-container') {
          document.getElementById('nav-settings').classList.add('active');
        }
      }
      
      // Initialize all event listeners
      function initEventListeners() {
        // Welcome screen buttons
        document.getElementById('start-button').addEventListener('click', () => {
          navigateTo('character-select');
        });
        
        document.getElementById('settings-button').addEventListener('click', () => {
          navigateTo('settings-container');
        });
        
        // Character selection
        const characterCards = document.querySelectorAll('.character-card');
        characterCards.forEach(card => {
          card.addEventListener('click', () => {
            // Deselect all cards
            characterCards.forEach(c => c.classList.remove('selected'));
            // Select clicked card
            card.classList.add('selected');
            // Update state
            state.character = card.dataset.character;
            // Enable continue button
            document.getElementById('confirm-character').disabled = false;
          });
        });
        
        document.getElementById('confirm-character').addEventListener('click', () => {
          navigateTo('module-select');
        });
        
        document.getElementById('back-to-welcome').addEventListener('click', () => {
          navigateTo('welcome-screen');
        });
        
        // Module selection
        const moduleCards = document.querySelectorAll('.module-card');
        moduleCards.forEach(card => {
          card.addEventListener('click', () => {
            // Deselect all cards
            moduleCards.forEach(c => c.classList.remove('selected'));
            // Select clicked card
            card.classList.add('selected');
            // Update state
            state.module = card.dataset.module;
            // Enable continue button
            document.getElementById('confirm-module').disabled = false;
          });
        });
        
        document.getElementById('confirm-module').addEventListener('click', () => {
          // Update intro screen
          updateIntroScreen();
          navigateTo('intro-screen');
        });
        
        document.getElementById('back-to-character').addEventListener('click', () => {
          navigateTo('character-select');
        });
        
        // Intro screen
        document.getElementById('start-learning').addEventListener('click', () => {
          navigateTo('game-container');
        });
        
        document.getElementById('back-to-modules').addEventListener('click', () => {
          navigateTo('module-select');
        });
        
        // Game container
        document.getElementById('game-continue').addEventListener('click', () => {
          advanceGame();
        });
        
        document.getElementById('game-hint').addEventListener('click', () => {
          showHint();
        });
        
        // Quiz container
        document.getElementById('quiz-options').addEventListener('click', (e) => {
          if (!e.target.classList.contains('quiz-option')) return;
          
          const quizOptions = document.querySelectorAll('.quiz-option');
          quizOptions.forEach(opt => opt.classList.remove('selected'));
          
          e.target.classList.add('selected');
          state.quizData.selectedAnswer = e.target.dataset.answer;
          
          document.getElementById('quiz-check').disabled = false;
        });
        
        document.getElementById('quiz-check').addEventListener('click', () => {
          checkQuizAnswer();
        });
        
        document.getElementById('quiz-next').addEventListener('click', () => {
          nextQuizQuestion();
        });
        
        // Adventure container
        document.getElementById('adventure-continue').addEventListener('click', () => {
          advanceAdventure();
        });
        
        document.getElementById('adventure-hint').addEventListener('click', () => {
          showAdventureHint();
        });
        
        // Explore container
        document.getElementById('reset-parameters').addEventListener('click', () => {
          resetParameters();
        });
        
        document.getElementById('back-to-game').addEventListener('click', () => {
          navigateTo('game-container');
        });
        
        // Settings
        document.getElementById('sound-effects').addEventListener('input', (e) => {
          document.getElementById('sound-effects-value').textContent = `${e.target.value}%`;
        });
        
        document.getElementById('music').addEventListener('input', (e) => {
          document.getElementById('music-value').textContent = `${e.target.value}%`;
        });
        
        document.getElementById('visual-effects').addEventListener('change', (e) => {
          const label = e.target.nextElementSibling.nextElementSibling;
          label.textContent = e.target.checked ? 'Enabled' : 'Disabled';
        });
        
        document.getElementById('advanced-explanations').addEventListener('change', (e) => {
          const label = e.target.nextElementSibling.nextElementSibling;
          label.textContent = e.target.checked ? 'Enabled' : 'Disabled';
        });
        
        document.getElementById('text-speed').addEventListener('input', (e) => {
          document.getElementById('text-speed-value').textContent = e.target.value;
        });
        
        document.getElementById('save-settings').addEventListener('click', () => {
          saveSettings();
          navigateTo('welcome-screen');
        });
        
        document.getElementById('reset-settings').addEventListener('click', () => {
          resetSettings();
        });
        
        // Certificate screen
        document.getElementById('play-again').addEventListener('click', () => {
          navigateTo('module-select');
        });
        
        document.getElementById('share-certificate').addEventListener('click', () => {
          printCertificate();
        });
        
        // Navigation menu
        document.getElementById('nav-home').addEventListener('click', () => {
          navigateTo('welcome-screen');
        });
        
        document.getElementById('nav-explore').addEventListener('click', () => {
          navigateTo('explore-container');
        });
        
        document.getElementById('nav-settings').addEventListener('click', () => {
          navigateTo('settings-container');
        });
      }
      
      // Save settings
      function saveSettings() {
        state.difficulty = document.getElementById('difficulty').value;
        state.settings.soundEffects = parseInt(document.getElementById('sound-effects').value);
        state.settings.music = parseInt(document.getElementById('music').value);
        state.settings.visualEffects = document.getElementById('visual-effects').checked;
        state.settings.advancedExplanations = document.getElementById('advanced-explanations').checked;
        state.settings.textSpeed = parseInt(document.getElementById('text-speed').value);
        state.settings.theme = document.getElementById('theme').value;
        
        applySettings();
        saveState();
        
        playSound('success');
      }
      
      // Reset settings to default
      function resetSettings() {
        state.difficulty = 'medium';
        state.settings = {
          soundEffects: 80,
          music: 50,
          visualEffects: true,
          advancedExplanations: false,
          textSpeed: 5,
          theme: 'default'
        };
        
        applySettings();
        
        playSound('click');
      }
      
      // ===== Character Rendering =====
      function renderCharacters() {
        // Measuring Tape Character
        const measuringTapeCard = document.querySelector('.character-measuring-tape .character-img');
        measuringTapeCard.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
            <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
            <text x="30" y="65" font-size="10" fill="#333">0 1 2 3 4 5</text>
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
          </svg>
        `;
        
        // Scale Character
        const scaleCard = document.querySelector('.character-scale .character-img');
        scaleCard.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="40" y="70" width="20" height="20" fill="#3FC1C9" rx="3" ry="3" />
            <rect x="20" y="60" width="60" height="10" fill="#0E86D4" rx="5" ry="5" />
            <rect x="10" y="40" width="30" height="20" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <rect x="60" y="50" width="30" height="10" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#0E86D4" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="35" y="40" width="30" height="3" fill="#0E86D4" />
          </svg>
        `;
        
        // Clock Character
        const clockCard = document.querySelector('.character-clock .character-img');
        clockCard.innerHTML = `
          <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="30" fill="#FFF" stroke="#67D5B5" stroke-width="3" />
            <circle cx="50" cy="50" r="3" fill="#20BF55" />
            <line x1="50" y1="50" x2="50" y2="30" stroke="#20BF55" stroke-width="2" />
            <line x1="50" y1="50" x2="65" y2="50" stroke="#20BF55" stroke-width="2" />
            <text x="48" y="20" font-size="10" fill="#20BF55" text-anchor="middle">12</text>
            <text x="80" y="53" font-size="10" fill="#20BF55" text-anchor="middle">3</text>
            <text x="48" y="85" font-size="10" fill="#20BF55" text-anchor="middle">6</text>
            <text x="20" y="53" font-size="10" fill="#20BF55" text-anchor="middle">9</text>
            <circle cx="50" cy="15" r="10" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
            <circle cx="45" cy="12" r="2" fill="#333" />
            <circle cx="55" cy="12" r="2" fill="#333" />
            <path d="M45 18 Q 50 22 55 18" fill="none" stroke="#333" stroke-width="1" />
          </svg>
        `;
        
        // Thermometer Character
        const thermometerCard = document.querySelector('.character-thermometer .character-img');
        thermometerCard.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="45" y="30" width="10" height="50" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="80" r="10" fill="#FF5722" />
            <rect x="47" y="30" width="6" height="30" fill="#FF8C64" rx="3" ry="3" />
            <line x1="40" y1="40" x2="60" y2="40" stroke="#FF8C64" stroke-width="1" />
            <line x1="40" y1="50" x2="60" y2="50" stroke="#FF8C64" stroke-width="1" />
            <line x1="40" y1="60" x2="60" y2="60" stroke="#FF8C64" stroke-width="1" />
            <text x="62" y="40" font-size="8" fill="#FF8C64">100°</text>
            <text x="62" y="60" font-size="8" fill="#FF8C64">0°</text>
            <circle cx="50" cy="20" r="12" fill="#FFF" stroke="#FF8C64" stroke-width="2" />
            <circle cx="45" cy="17" r="2" fill="#333" />
            <circle cx="55" cy="17" r="2" fill="#333" />
            <path d="M45 23 Q 50 27 55 23" fill="none" stroke="#333" stroke-width="1" />
          </svg>
        `;
      }
      
      // ===== Module Icons Rendering =====
      function renderModuleIcons() {
        // Length Module Icon
        const lengthIcon = document.querySelector('[data-module="length"] .module-img');
        lengthIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="10" y="50" width="80" height="10" fill="#4e54c8" rx="2" ry="2" />
            <rect x="10" y="60" width="80" height="20" fill="#FFF" stroke="#4e54c8" stroke-width="2" />
            <text x="15" y="75" font-size="10" fill="#333">0 1 2 3 4 5 6 7 8</text>
            <line x1="15" y1="60" x2="15" y2="65" stroke="#333" stroke-width="1" />
            <line x1="25" y1="60" x2="25" y2="65" stroke="#333" stroke-width="1" />
            <line x1="35" y1="60" x2="35" y2="65" stroke="#333" stroke-width="1" />
            <line x1="45" y1="60" x2="45" y2="65" stroke="#333" stroke-width="1" />
            <line x1="55" y1="60" x2="55" y2="65" stroke="#333" stroke-width="1" />
            <line x1="65" y1="60" x2="65" y2="65" stroke="#333" stroke-width="1" />
            <line x1="75" y1="60" x2="75" y2="65" stroke="#333" stroke-width="1" />
            <line x1="85" y1="60" x2="85" y2="65" stroke="#333" stroke-width="1" />
            <rect x="30" y="20" width="40" height="20" fill="#8f94fb" rx="5" ry="5" />
            <text x="37" y="35" font-size="12" fill="#FFF">Length</text>
          </svg>
        `;
        
        // Weight Module Icon
        const weightIcon = document.querySelector('[data-module="weight"] .module-img');
        weightIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="40" y="70" width="20" height="10" fill="#4e54c8" rx="2" ry="2" />
            <rect x="20" y="60" width="60" height="10" fill="#8f94fb" rx="5" ry="5" />
            <rect x="15" y="40" width="30" height="20" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="3" ry="3" />
            <rect x="55" y="40" width="30" height="20" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="3" ry="3" />
            <circle cx="30" cy="50" r="8" fill="#8f94fb" />
            <circle cx="70" cy="50" r="5" fill="#8f94fb" />
            <rect x="30" y="20" width="40" height="20" fill="#8f94fb" rx="5" ry="5" />
            <text x="34" y="35" font-size="12" fill="#FFF">Weight</text>
          </svg>
        `;
        
        // Time Module Icon
        const timeIcon = document.querySelector('[data-module="time"] .module-img');
        timeIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="30" fill="#FFF" stroke="#4e54c8" stroke-width="3" />
            <circle cx="50" cy="50" r="3" fill="#8f94fb" />
            <line x1="50" y1="50" x2="50" y2="30" stroke="#8f94fb" stroke-width="2" />
            <line x1="50" y1="50" x2="65" y2="50" stroke="#8f94fb" stroke-width="2" />
            <text x="48" y="20" font-size="10" fill="#4e54c8">12</text>
            <text x="80" y="53" font-size="10" fill="#4e54c8">3</text>
            <text x="48" y="85" font-size="10" fill="#4e54c8">6</text>
            <text x="20" y="53" font-size="10" fill="#4e54c8">9</text>
            <rect x="30" y="85" width="40" height="10" fill="#8f94fb" rx="5" ry="5" />
            <text x="44" y="94" font-size="9" fill="#FFF">Time</text>
          </svg>
        `;
        
        // Volume Module Icon
        const volumeIcon = document.querySelector('[data-module="volume"] .module-img');
        volumeIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <path d="M30 75 L30 40 Q30 35 35 35 L65 35 Q70 35 70 40 L70 75 Z" fill="#FFF" stroke="#4e54c8" stroke-width="2" />
            <path d="M25 75 L75 75" fill="none" stroke="#4e54c8" stroke-width="2" />
            <path d="M30 60 L70 60" fill="none" stroke="#8f94fb" stroke-width="2" stroke-dasharray="2,2" />
            <path d="M30 50 L70 50" fill="none" stroke="#8f94fb" stroke-width="2" stroke-dasharray="2,2" />
            <text x="75" y="60" font-size="8" fill="#4e54c8">500ml</text>
            <text x="75" y="50" font-size="8" fill="#4e54c8">1L</text>
            <rect x="30" y="20" width="40" height="10" fill="#8f94fb" rx="5" ry="5" />
            <text x="33" y="28" font-size="9" fill="#FFF">Volume</text>
          </svg>
        `;
        
        // Temperature Module Icon
        const tempIcon = document.querySelector('[data-module="temperature"] .module-img');
        tempIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="45" y="30" width="10" height="50" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="80" r="10" fill="#8f94fb" />
            <rect x="47" y="55" width="6" height="25" fill="#ff9a76" rx="3" ry="3" />
            <line x1="40" y1="40" x2="60" y2="40" stroke="#4e54c8" stroke-width="1" />
            <line x1="40" y1="55" x2="60" y2="55" stroke="#4e54c8" stroke-width="1" />
            <line x1="40" y1="70" x2="60" y2="70" stroke="#4e54c8" stroke-width="1" />
            <text x="62" y="40" font-size="8" fill="#4e54c8">100°C</text>
            <text x="62" y="55" font-size="8" fill="#4e54c8">32°F</text>
            <text x="62" y="70" font-size="8" fill="#4e54c8">0°C</text>
            <rect x="20" y="15" width="60" height="15" fill="#8f94fb" rx="5" ry="5" />
            <text x="23" y="27" font-size="10" fill="#FFF">Temperature</text>
          </svg>
        `;
        
        // Adventure Module Icon
        const adventureIcon = document.querySelector('[data-module="adventure"] .module-img');
        adventureIcon.innerHTML = `
          <svg viewBox="0 0 100 100">
            <rect x="20" y="30" width="60" height="45" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="5" ry="5" />
            <path d="M20 40 L80 40" stroke="#4e54c8" stroke-width="2" />
            <rect x="30" y="50" width="10" height="10" fill="#8f94fb" rx="2" ry="2" />
            <rect x="45" y="50" width="10" height="10" fill="#ff9a76" rx="2" ry="2" />
            <rect x="60" y="50" width="10" height="10" fill="#67D5B5" rx="2" ry="2" />
            <path d="M35 75 L50 65 L65 75" fill="none" stroke="#4e54c8" stroke-width="2" />
            <rect x="15" y="75" width="70" height="10" fill="#8f94fb" rx="5" ry="5" />
            <text x="25" y="84" font-size="9" fill="#FFF">Adventure</text>
            <circle cx="30" cy="35" r="3" fill="#ff9a76" />
            <circle cx="40" cy="35" r="3" fill="#67D5B5" />
            <circle cx="50" cy="35" r="3" fill="#8f94fb" />
          </svg>
        `;
      }
      
      // ===== Welcome Screen Animation =====
      function renderWelcomeScene() {
        const svg = document.getElementById('welcome-svg');
        
        svg.innerHTML = `
          <defs>
            <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#c9d6ff" />
              <stop offset="100%" stop-color="#e2e2e2" />
            </linearGradient>
            <linearGradient id="groundGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#4e54c8" />
              <stop offset="100%" stop-color="#8f94fb" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="300" fill="url(#skyGradient)" />
          <rect x="0" y="300" width="800" height="100" fill="url(#groundGradient)" />
          
          <!-- Sun -->
          <circle cx="700" cy="80" r="50" fill="#ff9a76">
            <animate attributeName="cy" from="80" to="75" dur="4s" repeatCount="indefinite" />
          </circle>
          
          <!-- Clouds -->
          <g class="cloud" opacity="0.9">
            <ellipse cx="150" cy="100" rx="30" ry="20" fill="#fff" />
            <ellipse cx="120" cy="100" rx="25" ry="15" fill="#fff" />
            <ellipse cx="180" cy="100" rx="25" ry="15" fill="#fff" />
            <animate attributeName="transform" type="translate" from="0,0" to="50,0" dur="30s" repeatCount="indefinite" />
          </g>
          
          <g class="cloud" opacity="0.7">
            <ellipse cx="550" cy="150" rx="35" ry="20" fill="#fff" />
            <ellipse cx="520" cy="150" rx="25" ry="15" fill="#fff" />
            <ellipse cx="580" cy="150" rx="25" ry="15" fill="#fff" />
            <animate attributeName="transform" type="translate" from="0,0" to="-70,0" dur="40s" repeatCount="indefinite" />
          </g>
          
          <!-- Buildings -->
          <rect x="100" y="200" width="100" height="100" fill="#6c7ae0" />
          <rect x="110" y="220" width="20" height="30" fill="#fff" />
          <rect x="150" y="220" width="20" height="30" fill="#fff" />
          <rect x="110" y="260" width="20" height="30" fill="#fff" />
          <rect x="150" y="260" width="20" height="30" fill="#fff" />
          
          <rect x="220" y="180" width="80" height="120" fill="#8f94fb" />
          <rect x="230" y="200" width="15" height="20" fill="#fff" />
          <rect x="260" y="200" width="15" height="20" fill="#fff" />
          <rect x="230" y="230" width="15" height="20" fill="#fff" />
          <rect x="260" y="230" width="15" height="20" fill="#fff" />
          <rect x="230" y="260" width="15" height="20" fill="#fff" />
          <rect x="260" y="260" width="15" height="20" fill="#fff" />
          
          <rect x="350" y="220" width="120" height="80" fill="#4e54c8" />
          <rect x="360" y="240" width="25" height="25" fill="#fff" />
          <rect x="400" y="240" width="25" height="25" fill="#fff" />
          <rect x="440" y="240" width="25" height="25" fill="#fff" />
          
          <rect x="500" y="150" width="70" height="150" fill="#6c7ae0" />
          <rect x="510" y="170" width="15" height="15" fill="#fff" />
          <rect x="545" y="170" width="15" height="15" fill="#fff" />
          <rect x="510" y="195" width="15" height="15" fill="#fff" />
          <rect x="545" y="195" width="15" height="15" fill="#fff" />
          <rect x="510" y="220" width="15" height="15" fill="#fff" />
          <rect x="545" y="220" width="15" height="15" fill="#fff" />
          <rect x="510" y="245" width="15" height="15" fill="#fff" />
          <rect x="545" y="245" width="15" height="15" fill="#fff" />
          <rect x="510" y="270" width="15" height="15" fill="#fff" />
          <rect x="545" y="270" width="15" height="15" fill="#fff" />
          
          <rect x="600" y="200" width="90" height="100" fill="#8f94fb" />
          <rect x="610" y="220" width="20" height="25" fill="#fff" />
          <rect x="645" y="220" width="20" height="25" fill="#fff" />
          <rect x="610" y="255" width="20" height="25" fill="#fff" />
          <rect x="645" y="255" width="20" height="25" fill="#fff" />
          
          <!-- Characters -->
          <g class="character" transform="translate(250, 320) scale(0.6)">
            <!-- Measuring Tape Character -->
            <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
            <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="0,-10" dur="2s" repeatCount="indefinite" />
          </g>
          
          <g class="character" transform="translate(400, 330) scale(0.5)">
            <!-- Scale Character -->
            <rect x="40" y="70" width="20" height="20" fill="#3FC1C9" rx="3" ry="3" />
            <rect x="20" y="60" width="60" height="10" fill="#0E86D4" rx="5" ry="5" />
            <rect x="10" y="40" width="30" height="20" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <rect x="60" y="50" width="30" height="10" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#0E86D4" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="35" y="40" width="30" height="3" fill="#0E86D4" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="0,-8" dur="1.8s" repeatCount="indefinite" />
          </g>
          
          <g class="character" transform="translate(550, 325) scale(0.55)">
            <!-- Clock Character -->
            <circle cx="50" cy="50" r="30" fill="#FFF" stroke="#67D5B5" stroke-width="3" />
            <circle cx="50" cy="50" r="3" fill="#20BF55" />
            <line x1="50" y1="50" x2="50" y2="30" stroke="#20BF55" stroke-width="2" />
            <line x1="50" y1="50" x2="65" y2="50" stroke="#20BF55" stroke-width="2" />
            <circle cx="50" cy="15" r="10" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
            <circle cx="45" cy="12" r="2" fill="#333" />
            <circle cx="55" cy="12" r="2" fill="#333" />
            <path d="M45 18 Q 50 22 55 18" fill="none" stroke="#333" stroke-width="1" />
            <animateTransform attributeName="transform" type="rotate" from="0 50 50" to="360 50 50" dur="10s" repeatCount="indefinite" />
          </g>
          
          <!-- Welcome Text -->
          <text x="400" y="150" text-anchor="middle" font-size="24" fill="#4e54c8" font-family="Comic Sans MS">
            Welcome to Unit Conversion Adventure!
            <animate attributeName="font-size" values="24;26;24" dur="2s" repeatCount="indefinite" />
          </text>
          
          <!-- Measurement symbols floating around -->
          <g class="floating-symbols">
            <text x="150" y="80" font-size="20" fill="#4e54c8">cm</text>
            <text x="250" y="120" font-size="20" fill="#8f94fb">kg</text>
            <text x="350" y="80" font-size="20" fill="#ff9a76">°F</text>
            <text x="450" y="130" font-size="20" fill="#67D5B5">sec</text>
            <text x="550" y="90" font-size="20" fill="#FF5E5B">mL</text>
            
            <animateTransform attributeName="transform" type="translate" 
              values="0,0; 0,-10; 0,0" dur="3s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // ===== Update Intro Screen Based on Module Selection =====
      function updateIntroScreen() {
        if (!state.module || !state.character) return;
        
        const titles = {
          length: "Length & Distance",
          weight: "Weight & Mass",
          time: "Time",
          volume: "Volume",
          temperature: "Temperature",
          adventure: "Measurement Adventure"
        };
        
        const characterNames = {
          measuringtape: "Measuring Tape Mia",
          scale: "Balancing Bill",
          clock: "Tick-Tock Tim",
          thermometer: "Thermo Tina"
        };
        
        const introTexts = {
          length: {
            measuringtape: "Hi there! I'm Measuring Tape Mia! Today we're going to learn all about Length and Distance. Did you know we measure things in different units depending on how big they are? Let's explore inches, feet, centimeters, and meters together!",
            scale: "Hello! I'm Balancing Bill, and I'll be your guide for learning about Length and Distance today. Even though I usually work with weights, I know all about measuring how long things are too!",
            clock: "Tick-tock! I'm Tim, and today we'll be exploring Length and Distance together! Just like time has different units, length does too. Let's discover how to convert between them!",
            thermometer: "Hi explorer! I'm Thermo Tina! I usually measure temperature, but today I'll show you all about measuring Length and Distance. Get ready to stretch your knowledge!"
          },
          weight: {
            measuringtape: "Hello! I'm Measuring Tape Mia! Today we're going to explore Weight and Mass together. Even though I usually measure length, I know all about how heavy things are too!",
            scale: "Hello! I'm Balancing Bill, and I'm SO excited to teach you about Weight and Mass today. This is my specialty! Did you know we use ounces, pounds, grams, and kilograms to measure how heavy things are?",
            clock: "Tick-tock! I'm Tim, and today we'll be learning about Weight and Mass! Just like minutes add up to hours, smaller weight units add up to bigger ones. Let's explore together!",
            thermometer: "Hi explorer! I'm Thermo Tina! I usually measure temperature, but today I'll show you all about Weight and Mass. Get ready to weigh in on some fun facts!"
          },
          time: {
            measuringtape: "Hello! I'm Measuring Tape Mia! Today we're going to learn about Time together. Even though I usually measure length, I know all about how we measure time too!",
            scale: "Hello! I'm Balancing Bill, and I'll be your guide for learning about Time today. Even though I usually work with weights, I know how important time measurements are!",
            clock: "Tick-tock! I'm Tim, and today is my favorite day because we'll be learning all about Time! This is my specialty! Did you know that 60 seconds make a minute, and 60 minutes make an hour? Let's learn more time conversions together!",
            thermometer: "Hi explorer! I'm Thermo Tina! I usually measure temperature, but today I'll show you all about measuring Time. Let's have a great time learning together!"
          },
          volume: {
            measuringtape: "Hello! I'm Measuring Tape Mia! Today we're going to explore Volume together. Even though I usually measure length, I know all about measuring liquids and containers too!",
            scale: "Hello! I'm Balancing Bill, and I'll be your guide for learning about Volume today. Volume and weight are related - a liter of water weighs exactly one kilogram!",
            clock: "Tick-tock! I'm Tim, and today we'll be exploring Volume together! Just like we measure time in different units, we measure volume in cups, pints, milliliters, and liters!",
            thermometer: "Hi explorer! I'm Thermo Tina! Today we'll learn all about Volume - measuring how much space liquids and objects take up. Get ready to pour into some fascinating facts!"
          },
          temperature: {
            measuringtape: "Hello! I'm Measuring Tape Mia! Today we're going to learn about Temperature together. Even though I usually measure length, I know all about how we measure hot and cold too!",
            scale: "Hello! I'm Balancing Bill, and I'll be your guide for learning about Temperature today. Even though I usually work with weights, I'm excited to show you how we measure heat!",
            clock: "Tick-tock! I'm Tim, and today we'll be exploring Temperature together! Just like time, temperature has different scales - Fahrenheit and Celsius!",
            thermometer: "Hi explorer! I'm Thermo Tina! This is my specialty - Temperature! Did you know we use different scales like Fahrenheit and Celsius to measure how hot or cold things are? Let's explore together!"
          },
          adventure: {
            measuringtape: "Hello brave explorer! I'm Measuring Tape Mia! Today we're going on a Measurement Adventure where we'll use ALL the different types of measurements to solve puzzles and complete missions!",
            scale: "Greetings adventurer! I'm Balancing Bill, and I'll be your guide on this epic Measurement Adventure! We'll use length, weight, time, volume, and temperature to overcome challenges!",
            clock: "Tick-tock! Adventure time! I'm Tim, and today we're embarking on a Measurement Adventure where you'll need to use everything you've learned to solve exciting puzzles!",
            thermometer: "Hi explorer! I'm Thermo Tina! Are you ready for the ultimate Measurement Adventure? We'll tackle challenges using ALL types of measurements. Let's begin our quest!"
          }
        };
        
        // Update title and intro text
        document.getElementById('intro-title').textContent = titles[state.module];
        document.getElementById('intro-text').textContent = introTexts[state.module][state.character];
        
        // Update character
        document.getElementById('intro-character').innerHTML = document.querySelector(`.character-${state.character} .character-img`).innerHTML;
        
        // Update intro SVG scene based on the module
        renderIntroScene();
      }
      
      // ===== Render Intro Scene =====
      function renderIntroScene() {
        const svg = document.getElementById('intro-svg');
        
        // Different scenes based on module
        switch(state.module) {
          case 'length':
            renderLengthIntroScene(svg);
            break;
          case 'weight':
            renderWeightIntroScene(svg);
            break;
          case 'time':
            renderTimeIntroScene(svg);
            break;
          case 'volume':
            renderVolumeIntroScene(svg);
            break;
          case 'temperature':
            renderTemperatureIntroScene(svg);
            break;
          case 'adventure':
            renderAdventureIntroScene(svg);
            break;
        }
      }
      
      // Length intro scene
      function renderLengthIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="tableGradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stop-color="#d7b98e" />
              <stop offset="100%" stop-color="#c19a6b" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="#f5f7ff" />
          
          <!-- Table surface -->
          <rect x="50" y="300" width="700" height="20" fill="url(#tableGradient)" rx="5" ry="5" />
          <rect x="100" y="320" width="20" height="80" fill="#a67c52" />
<rect x="680" y="320" width="20" height="80" fill="#a67c52" />
          
          <!-- Ruler -->
          <rect x="150" y="250" width="500" height="20" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="2" ry="2" />
          <rect x="150" y="250" width="500" height="5" fill="#8f94fb" />
          
          <!-- Measurement marks -->
          <g class="ruler-marks">
            ${Array.from({length: 51}, (_, i) => {
              const height = i % 10 === 0 ? 15 : (i % 5 === 0 ? 10 : 5);
              return `<line x1="${150 + i*10}" y1="270" x2="${150 + i*10}" y2="${270-height}" stroke="#333" stroke-width="${i % 10 === 0 ? 2 : 1}" />`;
            }).join('')}
          </g>
          
          <!-- Measurement numbers -->
          <g class="ruler-numbers">
            ${Array.from({length: 6}, (_, i) => {
              return `<text x="${150 + i*100}" y="290" text-anchor="middle" font-size="12" fill="#4e54c8">${i * 10}</text>`;
            }).join('')}
          </g>
          
          <!-- Inch/cm labels -->
          <text x="400" y="320" text-anchor="middle" font-size="16" fill="#333">Inches / Centimeters</text>
          
          <!-- Objects to measure -->
          <rect x="200" y="150" width="100" height="5" fill="#ff9a76" rx="2" ry="2">
            <animate attributeName="width" values="100;105;100" dur="3s" repeatCount="indefinite" />
          </rect>
          <text x="250" y="140" text-anchor="middle" font-size="14" fill="#ff9a76">Pencil</text>
          
          <rect x="350" y="160" width="250" height="10" fill="#67D5B5" rx="5" ry="5">
            <animate attributeName="width" values="250;260;250" dur="4s" repeatCount="indefinite" />
          </rect>
          <text x="475" y="150" text-anchor="middle" font-size="14" fill="#67D5B5">Book</text>
          
          <rect x="150" y="200" width="500" height="2" fill="#8f94fb">
            <animate attributeName="width" values="500;510;500" dur="5s" repeatCount="indefinite" />
          </rect>
          <text x="400" y="190" text-anchor="middle" font-size="14" fill="#8f94fb">Ribbon</text>
          
          <!-- Character animations -->
          <g class="character" transform="translate(650, 150) scale(0.6)">
            <!-- Measuring Tape Character -->
            <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
            <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
            <text x="30" y="65" font-size="10" fill="#333">0 1 2 3</text>
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
            <animateTransform attributeName="transform" type="rotate" from="-10 50 80" to="10 50 80" dur="2s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // Weight intro scene
      function renderWeightIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="scaleGradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stop-color="#3FC1C9" />
              <stop offset="100%" stop-color="#0E86D4" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="#f5f7ff" />
          
          <!-- Table surface -->
          <rect x="100" y="300" width="600" height="20" fill="#a67c52" rx="5" ry="5" />
          <rect x="150" y="320" width="20" height="80" fill="#8b6b4f" />
          <rect x="630" y="320" width="20" height="80" fill="#8b6b4f" />
          
          <!-- Scale -->
          <g class="scale">
            <rect x="300" y="270" width="200" height="30" fill="url(#scaleGradient)" rx="5" ry="5" />
            <rect x="380" y="240" width="40" height="30" fill="#0E86D4" rx="2" ry="2" />
            <rect x="350" y="200" width="100" height="40" fill="#fff" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <text x="400" y="225" text-anchor="middle" font-size="16" fill="#0E86D4" font-weight="bold">0</text>
            <path d="M250 270 L350 270" stroke="#3FC1C9" stroke-width="5" />
            <path d="M450 270 L550 270" stroke="#3FC1C9" stroke-width="5" />
            <circle cx="250" cy="270" r="5" fill="#0E86D4" />
            <circle cx="550" cy="270" r="5" fill="#0E86D4" />
            
            <rect x="230" y="250" width="40" height="20" fill="#fff" stroke="#0E86D4" stroke-width="2" rx="2" ry="2" />
            <text x="250" y="265" text-anchor="middle" font-size="12" fill="#333">1kg</text>
            
            <rect x="530" y="250" width="40" height="20" fill="#fff" stroke="#0E86D4" stroke-width="2" rx="2" ry="2" />
            <text x="550" y="265" text-anchor="middle" font-size="12" fill="#333">2lb</text>
          </g>
          
          <!-- Weight objects -->
          <g class="weight-objects">
            <circle cx="180" cy="200" r="30" fill="#ff9a76" stroke="#FF5E5B" stroke-width="2">
              <animate attributeName="cy" values="200;190;200" dur="3s" repeatCount="indefinite" />
            </circle>
            <text x="180" y="205" text-anchor="middle" font-size="16" fill="#FFF">1kg</text>
            
            <rect x="600" y="180" width="50" height="40" fill="#8f94fb" stroke="#4e54c8" stroke-width="2" rx="5" ry="5">
              <animate attributeName="cy" values="180;170;180" dur="2.5s" repeatCount="indefinite" />
            </rect>
            <text x="625" y="205" text-anchor="middle" font-size="16" fill="#FFF">2lb</text>
          </g>
          
          <!-- Conversion information -->
          <g class="conversion-info">
            <rect x="200" y="100" width="400" height="60" fill="#fff" stroke="#4e54c8" stroke-width="2" rx="10" ry="10" />
            <text x="400" y="130" text-anchor="middle" font-size="18" fill="#4e54c8">
              1 kilogram ≈ 2.2 pounds
            </text>
            <text x="400" y="150" text-anchor="middle" font-size="16" fill="#8f94fb">
              1 pound ≈ 0.45 kilograms
            </text>
          </g>
          
          <!-- Character animations -->
          <g class="character" transform="translate(700, 150) scale(0.6)">
            <!-- Scale Character -->
            <rect x="40" y="70" width="20" height="20" fill="#3FC1C9" rx="3" ry="3" />
            <rect x="20" y="60" width="60" height="10" fill="#0E86D4" rx="5" ry="5" />
            <rect x="10" y="40" width="30" height="20" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <rect x="60" y="50" width="30" height="10" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#0E86D4" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="35" y="40" width="30" height="3" fill="#0E86D4" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="0,-10" dur="1.8s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // Time intro scene
      function renderTimeIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="clockGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stop-color="#67D5B5" />
              <stop offset="100%" stop-color="#20BF55" />
            </linearGradient>
            <filter id="clockShadow" x="-20%" y="-20%" width="140%" height="140%">
              <feGaussianBlur in="SourceAlpha" stdDeviation="5" />
              <feOffset dx="2" dy="2" result="offsetblur" />
              <feComponentTransfer>
                <feFuncA type="linear" slope="0.3" />
              </feComponentTransfer>
              <feMerge>
                <feMergeNode />
                <feMergeNode in="SourceGraphic" />
              </feMerge>
            </filter>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="#f5f7ff" />
          
          <!-- Wall -->
          <rect x="0" y="0" width="800" height="300" fill="#f0f0f0" />
          <line x1="0" y1="300" x2="800" y2="300" stroke="#ddd" stroke-width="2" />
          
          <!-- Floor -->
          <rect x="0" y="300" width="800" height="100" fill="#e0e0e0" />
          
          <!-- Main clock -->
          <g class="main-clock" filter="url(#clockShadow)">
            <circle cx="400" cy="150" r="100" fill="#FFF" stroke="#20BF55" stroke-width="5" />
            <circle cx="400" cy="150" r="5" fill="#333" />
            
            <!-- Clock hands -->
            <line x1="400" y1="150" x2="400" y2="80" stroke="#333" stroke-width="4" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 400 150" to="360 400 150" dur="60s" repeatCount="indefinite" />
            </line>
            <line x1="400" y1="150" x2="450" y2="150" stroke="#333" stroke-width="3" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 400 150" to="360 400 150" dur="3600s" repeatCount="indefinite" />
            </line>
            
            <!-- Clock numbers -->
            <text x="400" y="70" text-anchor="middle" font-size="16" fill="#20BF55" font-weight="bold">12</text>
            <text x="480" y="155" text-anchor="middle" font-size="16" fill="#20BF55" font-weight="bold">3</text>
            <text x="400" y="235" text-anchor="middle" font-size="16" fill="#20BF55" font-weight="bold">6</text>
            <text x="320" y="155" text-anchor="middle" font-size="16" fill="#20BF55" font-weight="bold">9</text>
            
            <!-- Clock tick marks -->
            ${Array.from({length: 12}, (_, i) => {
              const angle = i * 30;
              const x1 = 400 + 90 * Math.sin(angle * Math.PI / 180);
              const y1 = 150 - 90 * Math.cos(angle * Math.PI / 180);
              const x2 = 400 + 100 * Math.sin(angle * Math.PI / 180);
              const y2 = 150 - 100 * Math.cos(angle * Math.PI / 180);
              return `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" stroke="#20BF55" stroke-width="3" />`;
            }).join('')}
          </g>
          
          <!-- Smaller clocks -->
          <g class="small-clock" transform="translate(150, 150) scale(0.5)">
            <circle cx="100" cy="100" r="80" fill="#FFF" stroke="#67D5B5" stroke-width="4" />
            <circle cx="100" cy="100" r="4" fill="#333" />
            <line x1="100" y1="100" x2="100" y2="40" stroke="#333" stroke-width="3" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 100 100" to="360 100 100" dur="30s" repeatCount="indefinite" />
            </line>
            <line x1="100" y1="100" x2="140" y2="100" stroke="#333" stroke-width="2" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 100 100" to="360 100 100" dur="1800s" repeatCount="indefinite" />
            </line>
            <text x="100" y="140" text-anchor="middle" font-size="12" fill="#333">30 sec</text>
          </g>
          
          <g class="small-clock" transform="translate(550, 150) scale(0.5)">
            <circle cx="100" cy="100" r="80" fill="#FFF" stroke="#67D5B5" stroke-width="4" />
            <circle cx="100" cy="100" r="4" fill="#333" />
            <line x1="100" y1="100" x2="100" y2="40" stroke="#333" stroke-width="3" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 100 100" to="360 100 100" dur="120s" repeatCount="indefinite" />
            </line>
            <line x1="100" y1="100" x2="140" y2="100" stroke="#333" stroke-width="2" stroke-linecap="round">
              <animateTransform attributeName="transform" type="rotate" from="0 100 100" to="360 100 100" dur="7200s" repeatCount="indefinite" />
            </line>
            <text x="100" y="140" text-anchor="middle" font-size="12" fill="#333">2 min</text>
          </g>
          
          <!-- Time conversion information -->
          <g class="time-info">
            <rect x="250" y="280" width="300" height="100" fill="#FFF" stroke="#67D5B5" stroke-width="2" rx="10" ry="10" />
            <text x="400" y="310" text-anchor="middle" font-size="16" fill="#20BF55" font-weight="bold">Time Conversions</text>
            <text x="400" y="340" text-anchor="middle" font-size="14" fill="#333">60 seconds = 1 minute</text>
            <text x="400" y="360" text-anchor="middle" font-size="14" fill="#333">60 minutes = 1 hour</text>
          </g>
          
          <!-- Character -->
          <g class="character" transform="translate(650, 100) scale(0.7)">
            <!-- Clock Character -->
            <circle cx="50" cy="50" r="30" fill="#FFF" stroke="#67D5B5" stroke-width="3" />
            <circle cx="50" cy="50" r="3" fill="#20BF55" />
            <line x1="50" y1="50" x2="50" y2="30" stroke="#20BF55" stroke-width="2" />
            <line x1="50" y1="50" x2="65" y2="50" stroke="#20BF55" stroke-width="2" />
            <text x="48" y="20" font-size="10" fill="#20BF55" text-anchor="middle">12</text>
            <text x="80" y="53" font-size="10" fill="#20BF55" text-anchor="middle">3</text>
            <text x="48" y="85" font-size="10" fill="#20BF55" text-anchor="middle">6</text>
            <text x="20" y="53" font-size="10" fill="#20BF55" text-anchor="middle">9</text>
            <circle cx="50" cy="15" r="10" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
            <circle cx="45" cy="12" r="2" fill="#333" />
            <circle cx="55" cy="12" r="2" fill="#333" />
            <path d="M45 18 Q 50 22 55 18" fill="none" stroke="#333" stroke-width="1" />
            <animateTransform attributeName="transform" type="rotate" from="-5 50 50" to="5 50 50" dur="1s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // Volume intro scene
      function renderVolumeIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="waterGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#8f94fb" stop-opacity="0.7" />
              <stop offset="100%" stop-color="#4e54c8" stop-opacity="0.7" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="#f5f7ff" />
          
          <!-- Table -->
          <rect x="100" y="300" width="600" height="20" fill="#a67c52" rx="5" ry="5" />
          <rect x="150" y="320" width="20" height="80" fill="#8b6b4f" />
          <rect x="630" y="320" width="20" height="80" fill="#8b6b4f" />
          
          <!-- Measuring cup -->
          <g class="measuring-cup">
            <path d="M250 150 L200 250 L200 280 L300 280 L300 250 Z" fill="#FFF" fill-opacity="0.5" stroke="#4e54c8" stroke-width="2" />
            <path d="M200 250 L200 280 L300 280 L300 250 Z" fill="url(#waterGradient)" stroke="none" />
            <text x="250" y="270" text-anchor="middle" font-size="14" fill="#FFF">1 Cup</text>
            
            <!-- Measurement lines -->
            <line x1="200" y1="250" x2="300" y2="250" stroke="#4e54c8" stroke-width="1" />
            <text x="190" y="255" text-anchor="end" font-size="12" fill="#4e54c8">1 cup</text>
            
            <line x1="200" y1="265" x2="300" y2="265" stroke="#4e54c8" stroke-width="1" stroke-dasharray="2,2" />
            <text x="190" y="270" text-anchor="end" font-size="12" fill="#4e54c8">½ cup</text>
          </g>
          
          <!-- Measuring cylinder -->
          <g class="measuring-cylinder">
            <path d="M400 150 L380 280 L420 280 L400 150 Z" fill="#FFF" fill-opacity="0.5" stroke="#4e54c8" stroke-width="2" />
            <path d="M384 240 L416 240 L400 150 Z" fill="url(#waterGradient)" stroke="none" />
            <rect x="380" y="280" width="40" height="10" fill="#4e54c8" rx="2" ry="2" />
            <text x="400" y="230" text-anchor="middle" font-size="10" fill="#FFF">250ml</text>
            
            <!-- Measurement lines -->
            <line x1="380" y1="240" x2="420" y2="240" stroke="#4e54c8" stroke-width="1" />
            <text x="375" y="245" text-anchor="end" font-size="10" fill="#4e54c8">250ml</text>
            
            <line x1="382" y1="220" x2="418" y2="220" stroke="#4e54c8" stroke-width="1" />
            <text x="375" y="225" text-anchor="end" font-size="10" fill="#4e54c8">500ml</text>
            
            <line x1="386" y1="200" x2="414" y2="200" stroke="#4e54c8" stroke-width="1" />
            <text x="375" y="205" text-anchor="end" font-size="10" fill="#4e54c8">750ml</text>
            
            <line x1="390" y1="180" x2="410" y2="180" stroke="#4e54c8" stroke-width="1" />
            <text x="375" y="185" text-anchor="end" font-size="10" fill="#4e54c8">1L</text>
          </g>
          
          <!-- Water bottle -->
          <g class="water-bottle">
            <path d="M550 150 C540 170, 540 260, 550 280 L590 280 C600 260, 600 170, 590 150 Z" fill="#FFF" fill-opacity="0.5" stroke="#4e54c8" stroke-width="2" />
            <path d="M550 220 C540 240, 540 260, 550 280 L590 280 C600 260, 600 240, 590 220 Z" fill="url(#waterGradient)" stroke="none" />
            <text x="570" y="260" text-anchor="middle" font-size="12" fill="#FFF">2 Cups</text>
            <text x="570" y="240" text-anchor="middle" font-size="12" fill="#FFF">500ml</text>
            
            <!-- Cap -->
            <rect x="560" y="140" width="20" height="10" fill="#4e54c8" rx="2" ry="2" />
          </g>
          
          <!-- Conversion information -->
          <g class="conversion-info">
            <rect x="200" y="80" width="400" height="60" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="10" ry="10" />
            <text x="400" y="110" text-anchor="middle" font-size="16" fill="#4e54c8" font-weight="bold">
              Volume Conversions
            </text>
            <text x="400" y="130" text-anchor="middle" font-size="14" fill="#8f94fb">
              1 cup ≈ 250 milliliters
            </text>
          </g>
          
          <!-- Character -->
          <g class="character" transform="translate(120, 200) scale(0.6)">
            <!-- Measuring Tape Character (adaptable to volume) -->
            <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
            <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="0,-5" dur="1.5s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // Temperature intro scene
      function renderTemperatureIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="hotGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#ff5e5b" />
              <stop offset="100%" stop-color="#ff8c64" />
            </linearGradient>
            <linearGradient id="coldGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#4e54c8" />
              <stop offset="100%" stop-color="#8f94fb" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="#f5f7ff" />
          
          <!-- Window frame -->
          <rect x="50" y="50" width="300" height="250" fill="#FFF" stroke="#ddd" stroke-width="3" rx="5" ry="5" />
          <line x1="50" y1="175" x2="350" y2="175" stroke="#ddd" stroke-width="3" />
          <line x1="200" y1="50" x2="200" y2="300" stroke="#ddd" stroke-width="3" />
          
          <!-- Window scene - cold -->
          <g class="cold-scene">
            <rect x="50" y="50" width="150" height="125" fill="#e0f7fa" />
            <circle cx="80" cy="80" r="20" fill="#fff" />
            <rect x="50" y="175" width="150" height="125" fill="#e0f7fa" />
            <rect x="50" y="250" width="150" height="50" fill="#fff" /> <!-- Snow -->
            
            <!-- Snowflakes -->
            ${Array.from({length: 10}, (_, i) => {
              const x = 50 + Math.random() * 150;
              const y = 100 + Math.random() * 150;
              const size = 5 + Math.random() * 5;
              return `
                <g transform="translate(${x}, ${y})">
                  <line x1="-${size}" y1="0" x2="${size}" y2="0" stroke="#fff" stroke-width="2" />
                  <line x1="0" y1="-${size}" x2="0" y2="${size}" stroke="#fff" stroke-width="2" />
                  <line x1="-${size*0.7}" y1="-${size*0.7}" x2="${size*0.7}" y2="${size*0.7}" stroke="#fff" stroke-width="2" />
                  <line x1="${size*0.7}" y1="-${size*0.7}" x2="-${size*0.7}" y2="${size*0.7}" stroke="#fff" stroke-width="2" />
                  <animate attributeName="opacity" values="0;1;0" dur="${3 + Math.random() * 2}s" repeatCount="indefinite" />
                </g>
              `;
            }).join('')}
          </g>
          
          <!-- Window scene - hot -->
          <g class="hot-scene">
            <rect x="200" y="50" width="150" height="125" fill="#ffebee" />
            <circle cx="300" cy="80" r="20" fill="#ff8c64" />
            <rect x="200" y="175" width="150" height="125" fill="#ffebee" />
            <rect x="200" y="250" width="150" height="50" fill="#ffe0b2" /> <!-- Sand -->
            
            <!-- Heat waves -->
            ${Array.from({length: 5}, (_, i) => {
              const x = 240 + i * 20;
              return `
                <path d="M${x} 100 Q${x+10} 90, ${x+20} 100 Q${x+30} 110, ${x+40} 100" fill="none" stroke="#ff8c64" stroke-width="2" opacity="0.5">
                  <animate attributeName="d" 
                    values="M${x} 100 Q${x+10} 90, ${x+20} 100 Q${x+30} 110, ${x+40} 100;
                            M${x} 100 Q${x+10} 110, ${x+20} 100 Q${x+30} 90, ${x+40} 100;
                            M${x} 100 Q${x+10} 90, ${x+20} 100 Q${x+30} 110, ${x+40} 100" 
                    dur="3s" repeatCount="indefinite" />
                </path>
              `;
            }).join('')}
          </g>
          
          <!-- Thermometers -->
          <g class="thermometer-f">
            <rect x="450" y="100" width="50" height="200" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="25" ry="25" />
            <circle cx="475" cy="300" r="25" fill="#FF5722" stroke="#FF8C64" stroke-width="2" />
            <rect x="465" y="150" width="20" height="150" fill="#FF5722" rx="10" ry="10" />
            
            <!-- Temperature markings -->
            <line x1="440" y1="150" x2="450" y2="150" stroke="#FF8C64" stroke-width="1" />
            <text x="435" y="155" text-anchor="end" font-size="12" fill="#FF8C64">100°F</text>
            
            <line x1="440" y1="200" x2="450" y2="200" stroke="#FF8C64" stroke-width="1" />
            <text x="435" y="205" text-anchor="end" font-size="12" fill="#FF8C64">70°F</text>
            
            <line x1="440" y1="250" x2="450" y2="250" stroke="#FF8C64" stroke-width="1" />
            <text x="435" y="255" text-anchor="end" font-size="12" fill="#FF8C64">40°F</text>
            
            <text x="475" y="330" text-anchor="middle" font-size="16" fill="#FF8C64" font-weight="bold">°F</text>
          </g>
          
          <g class="thermometer-c">
            <rect x="550" y="100" width="50" height="200" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="25" ry="25" />
            <circle cx="575" cy="300" r="25" fill="#8f94fb" stroke="#4e54c8" stroke-width="2" />
            <rect x="565" y="200" width="20" height="100" fill="#8f94fb" rx="10" ry="10" />
            
            <!-- Temperature markings -->
            <line x1="600" y1="150" x2="610" y2="150" stroke="#4e54c8" stroke-width="1" />
            <text x="615" y="155" text-anchor="start" font-size="12" fill="#4e54c8">40°C</text>
            
            <line x1="600" y1="200" x2="610" y2="200" stroke="#4e54c8" stroke-width="1" />
            <text x="615" y="205" text-anchor="start" font-size="12" fill="#4e54c8">20°C</text>
            
            <line x1="600" y1="250" x2="610" y2="250" stroke="#4e54c8" stroke-width="1" />
            <text x="615" y="255" text-anchor="start" font-size="12" fill="#4e54c8">0°C</text>
            
            <text x="575" y="330" text-anchor="middle" font-size="16" fill="#4e54c8" font-weight="bold">°C</text>
          </g>
          
          <!-- Conversion information -->
          <g class="conversion-info">
            <rect x="400" y="50" width="250" height="40" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="10" ry="10" />
            <text x="525" y="75" text-anchor="middle" font-size="14" fill="#FF8C64">
              32°F = 0°C   |   212°F = 100°C
            </text>
            
            <rect x="400" y="350" width="250" height="40" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="10" ry="10" />
            <text x="525" y="375" text-anchor="middle" font-size="14" fill="#4e54c8">
              F° = (C° × 9/5) + 32
            </text>
          </g>
          
          <!-- Character -->
          <g class="character" transform="translate(700, 200) scale(0.7)">
            <!-- Thermometer Character -->
            <rect x="45" y="30" width="10" height="50" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="80" r="10" fill="#FF5722" />
            <rect x="47" y="55" width="6" height="25" fill="#FF8C64" rx="3" ry="3" />
            <line x1="40" y1="40" x2="60" y2="40" stroke="#FF8C64" stroke-width="1" />
            <line x1="40" y1="55" x2="60" y2="55" stroke="#FF8C64" stroke-width="1" />
            <line x1="40" y1="70" x2="60" y2="70" stroke="#FF8C64" stroke-width="1" />
            <circle cx="50" cy="20" r="12" fill="#FFF" stroke="#FF8C64" stroke-width="2" />
            <circle cx="45" cy="17" r="2" fill="#333" />
            <circle cx="55" cy="17" r="2" fill="#333" />
            <path d="M45 23 Q 50 27 55 23" fill="none" stroke="#333" stroke-width="1" />
            <animateTransform attributeName="transform" type="rotate" from="-5 50 80" to="5 50 80" dur="1s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // Adventure intro scene
      function renderAdventureIntroScene(svg) {
        svg.innerHTML = `
          <defs>
            <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#4e54c8" />
              <stop offset="40%" stop-color="#8f94fb" />
              <stop offset="100%" stop-color="#f5f7ff" />
            </linearGradient>
            <linearGradient id="groundGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#67D5B5" />
              <stop offset="100%" stop-color="#20BF55" />
            </linearGradient>
            <linearGradient id="mountainGradient" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stop-color="#a67c52" />
              <stop offset="100%" stop-color="#8b6b4f" />
            </linearGradient>
          </defs>
          
          <!-- Background -->
          <rect x="0" y="0" width="800" height="400" fill="url(#skyGradient)" />
          
          <!-- Sun -->
          <circle cx="700" cy="80" r="40" fill="#ff9a76">
            <animate attributeName="opacity" values="0.8;1;0.8" dur="3s" repeatCount="indefinite" />
          </circle>
          
          <!-- Clouds -->
          <g class="cloud" opacity="0.9">
            <ellipse cx="150" cy="120" rx="35" ry="20" fill="#fff" />
            <ellipse cx="120" cy="120" rx="25" ry="15" fill="#fff" />
            <ellipse cx="180" cy="120" rx="25" ry="15" fill="#fff" />
            <animate attributeName="transform" type="translate" from="0,0" to="30,0" dur="20s" repeatCount="indefinite" />
          </g>
          
          <g class="cloud" opacity="0.7">
            <ellipse cx="550" cy="100" rx="40" ry="25" fill="#fff" />
            <ellipse cx="520" cy="100" rx="30" ry="20" fill="#fff" />
            <ellipse cx="580" cy="100" rx="30" ry="20" fill="#fff" />
            <animate attributeName="transform" type="translate" from="0,0" to="-40,0" dur="25s" repeatCount="indefinite" />
          </g>
          
          <!-- Mountains -->
          <path d="M0 250 L200 150 L400 250 L600 180 L800 250 L800 400 L0 400 Z" fill="url(#mountainGradient)" />
          <path d="M0 300 L200 250 L400 280 L600 250 L800 300 L800 400 L0 400 Z" fill="url(#groundGradient)" />
          
          <!-- Lake -->
          <ellipse cx="400" cy="320" rx="200" ry="40" fill="#8f94fb" opacity="0.7" />
          
          <!-- Castle -->
          <g class="castle">
            <rect x="350" y="200" width="100" height="80" fill="#f0f0f0" stroke="#ddd" stroke-width="2" />
            <rect x="340" y="180" width="120" height="20" fill="#f0f0f0" stroke="#ddd" stroke-width="2" />
            
            <!-- Towers -->
            <rect x="340" y="150" width="20" height="30" fill="#f0f0f0" stroke="#ddd" stroke-width="2" />
            <rect x="440" y="150" width="20" height="30" fill="#f0f0f0" stroke="#ddd" stroke-width="2" />
            <path d="M340 150 L350 135 L360 150 Z" fill="#ff9a76" />
            <path d="M440 150 L450 135 L460 150 Z" fill="#ff9a76" />
            
            <!-- Castle door -->
            <rect x="390" y="240" width="20" height="40" fill="#8b6b4f" rx="10" ry="10" />
            
            <!-- Windows -->
            <rect x="370" y="220" width="10" height="15" fill="#8f94fb" rx="2" ry="2" />
            <rect x="420" y="220" width="10" height="15" fill="#8f94fb" rx="2" ry="2" />
            <rect x="345" y="160" width="10" height="10" fill="#8f94fb" rx="5" ry="5" />
            <rect x="445" y="160" width="10" height="10" fill="#8f94fb" rx="5" ry="5" />
          </g>
          
          <!-- Treasure chest -->
          <g class="treasure">
            <rect x="600" y="270" width="40" height="30" fill="#8b6b4f" stroke="#a67c52" stroke-width="2" rx="5" ry="5" />
            <rect x="600" y="270" width="40" height="15" fill="#a67c52" stroke="#8b6b4f" stroke-width="2" rx="5" ry="5" />
            <rect x="615" y="270" width="10" height="15" fill="#ff9a76" stroke="#a67c52" stroke-width="1" />
            <ellipse cx="620" cy="270" rx="15" ry="5" fill="#a67c52" />
            <circle cx="610" cy="285" r="3" fill="#ff9a76" />
            <circle cx="630" cy="285" r="3" fill="#ff9a76" />
          </g>
          
          <!-- Map -->
          <g class="map">
            <rect x="150" y="250" width="60" height="40" fill="#f0e6d2" stroke="#8b6b4f" stroke-width="1" />
            <path d="M160 260 L180 270 L200 260 L180 280 Z" fill="none" stroke="#8b6b4f" stroke-width="1" />
            <path d="M170 270 Q180 265, 190 270" fill="none" stroke="#8f94fb" stroke-width="1" />
            <circle cx="190" cy="275" r="3" fill="#ff9a76" />
            <text x="180" y="285" text-anchor="middle" font-size="8" fill="#8b6b4f">X</text>
          </g>
          
          <!-- Ruler path -->
          <g class="ruler-path">
            <path d="M200 300 L350 300 L400 320 L600 280" fill="none" stroke="#ddd" stroke-width="2" stroke-dasharray="5,5" />
            <text x="300" y="290" text-anchor="middle" font-size="12" fill="#4e54c8">100m</text>
            <text x="500" y="270" text-anchor="middle" font-size="12" fill="#4e54c8">150m</text>
          </g>
          
          <!-- Characters -->
          <g class="character-group" transform="translate(200, 280) scale(0.4)">
            <!-- Measuring Tape Character -->
            <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
            <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="50,0" dur="10s" repeatCount="indefinite" />
          </g>
          
          <g class="character-group" transform="translate(250, 290) scale(0.35)">
            <!-- Scale Character -->
            <rect x="40" y="70" width="20" height="20" fill="#3FC1C9" rx="3" ry="3" />
            <rect x="20" y="60" width="60" height="10" fill="#0E86D4" rx="5" ry="5" />
            <rect x="10" y="40" width="30" height="20" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <rect x="60" y="50" width="30" height="10" fill="#FFF" stroke="#0E86D4" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#0E86D4" stroke-width="2" />
            <circle cx="45" cy="20" r="3" fill="#333" />
            <circle cx="55" cy="20" r="3" fill="#333" />
            <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
            <rect x="35" y="40" width="30" height="3" fill="#0E86D4" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="50,0" dur="10s" repeatCount="indefinite" />
          </g>
          
          <g class="character-group" transform="translate(230, 295) scale(0.3)">
            <!-- Clock Character -->
            <circle cx="50" cy="50" r="30" fill="#FFF" stroke="#67D5B5" stroke-width="3" />
            <circle cx="50" cy="50" r="3" fill="#20BF55" />
            <line x1="50" y1="50" x2="50" y2="30" stroke="#20BF55" stroke-width="2" />
            <line x1="50" y1="50" x2="65" y2="50" stroke="#20BF55" stroke-width="2" />
            <circle cx="50" cy="15" r="10" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
            <circle cx="45" cy="12" r="2" fill="#333" />
            <circle cx="55" cy="12" r="2" fill="#333" />
            <path d="M45 18 Q 50 22 55 18" fill="none" stroke="#333" stroke-width="1" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="50,0" dur="10s" repeatCount="indefinite" />
          </g>
          
          <g class="character-group" transform="translate(270, 285) scale(0.35)">
            <!-- Thermometer Character -->
            <rect x="45" y="30" width="10" height="50" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="5" ry="5" />
            <circle cx="50" cy="80" r="10" fill="#FF5722" />
            <rect x="47" y="55" width="6" height="25" fill="#FF8C64" rx="3" ry="3" />
            <circle cx="50" cy="20" r="12" fill="#FFF" stroke="#FF8C64" stroke-width="2" />
            <circle cx="45" cy="17" r="2" fill="#333" />
            <circle cx="55" cy="17" r="2" fill="#333" />
            <path d="M45 23 Q 50 27 55 23" fill="none" stroke="#333" stroke-width="1" />
            <animateTransform attributeName="transform" type="translate" from="0,0" to="50,0" dur="10s" repeatCount="indefinite" />
          </g>
          
          <!-- Adventure Title -->
          <text x="400" y="50" text-anchor="middle" font-size="24" font-weight="bold" fill="#FFF">
            Measurement Adventure
            <animate attributeName="font-size" values="24;26;24" dur="3s" repeatCount="indefinite" />
          </text>
          
          <!-- Unit symbols around the scene -->
          <g class="unit-symbols">
            <text x="100" y="100" font-size="16" fill="#FFF">m</text>
            <text x="150" y="150" font-size="16" fill="#FFF">kg</text>
            <text x="200" y="120" font-size="16" fill="#FFF">°C</text>
            <text x="300" y="100" font-size="16" fill="#FFF">sec</text>
            <text x="650" y="150" font-size="16" fill="#FFF">mL</text>
            <text x="700" y="120" font-size="16" fill="#FFF">in</text>
            <text x="750" y="180" font-size="16" fill="#FFF">ft</text>
            <animateTransform attributeName="transform" type="translate" values="0,0; 0,-5; 0,0" dur="4s" repeatCount="indefinite" />
          </g>
        `;
      }
      
      // ===== Game Functionality =====
      
      // Initialize game content based on selected module
      function initGameContent() {
        // Update character display
        document.getElementById('game-character').innerHTML = document.querySelector(`.character-${state.character} .character-img`).innerHTML;
        
        // Update title
        document.getElementById('game-title').textContent = document.getElementById('intro-title').textContent;
        
        // Reset progress
        document.getElementById('progress-bar').style.width = '0%';
        
        // Update content based on module
        generateGameContent();
      }
      
      // Generate appropriate game content based on module and step
      function generateGameContent() {
        const gameArea = document.getElementById('game-area');
        const gameText = document.getElementById('game-text');
        
        // Clear game area
        gameArea.innerHTML = '';
        
        // Calculate progress percentage
        const moduleProgress = state.progress[state.module];
        const progressPercentage = (state.currentStep / moduleProgress.total) * 100;
        document.getElementById('progress-bar').style.width = `${progressPercentage}%`;
        
        // Generate content based on module
        switch(state.module) {
          case 'length':
            generateLengthContent(gameArea, gameText);
            break;
          case 'weight':
            generateWeightContent(gameArea, gameText);
            break;
          case 'time':
            generateTimeContent(gameArea, gameText);
            break;
          case 'volume':
            generateVolumeContent(gameArea, gameText);
            break;
          case 'temperature':
            generateTemperatureContent(gameArea, gameText);
            break;
          case 'adventure':
            generateAdventureContent(gameArea, gameText);
            break;
        }
      }
      
      // Generate length conversion learning content
      function generateLengthContent(gameArea, gameText) {
        const steps = [
          {
            text: "Let's start with something simple! Did you know that 12 inches make 1 foot? And 100 centimeters make 1 meter? Let's try some conversions!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Basic Conversions</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">12</div>
                      <div class="conversion-unit">inches</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">foot</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">100</div>
                      <div class="conversion-unit">centimeters</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">meter</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "Let's see some everyday objects and how we measure them. Some things we measure in inches or feet, while others we measure in centimeters or meters!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Everyday Measurements</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Pencil -->
                    <rect x="50" y="50" width="100" height="5" fill="#ff9a76" rx="2" ry="2" />
                    <text x="100" y="40" text-anchor="middle" font-size="12" fill="#333">Pencil</text>
                    <text x="100" y="70" text-anchor="middle" font-size="12" fill="#4e54c8">7 inches / 18 cm</text>
                    
                    <!-- Book -->
                    <rect x="200" y="40" width="80" height="120" fill="#8f94fb" rx="2" ry="2" />
                    <rect x="205" y="45" width="70" height="110" fill="#fff" rx="2" ry="2" />
                    <text x="240" y="100" text-anchor="middle" font-size="12" fill="#4e54c8">9 inches / 23 cm</text>
                    <text x="240" y="170" text-anchor="middle" font-size="12" fill="#333">Book</text>
                    
                    <!-- Door -->
                    <rect x="350" y="10" width="60" height="180" fill="#a67c52" rx="2" ry="2" />
                    <circle cx="400" cy="100" r="5" fill="#fff" />
                    <text x="380" y="100" text-anchor="middle" font-size="12" fill="#fff">Door</text>
                    <text x="380" y="195" text-anchor="middle" font-size="12" fill="#4e54c8">6.5 feet / 2 meters</text>
                    
                    <!-- Child -->
                    <rect x="480" y="50" width="40" height="140" fill="#ff9a76" rx="10" ry="10" />
                    <circle cx="500" cy="30" r="20" fill="#ff9a76" />
                    <text x="500" y="35" text-anchor="middle" font-size="12" fill="#fff">You</text>
                    <text x="500" y="195" text-anchor="middle" font-size="12" fill="#4e54c8">3.5 feet / 107 cm</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Now, let's try converting between inches and centimeters! 1 inch is about 2.54 centimeters. If you have 5 inches, how many centimeters is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Inches to Centimeters</h3>
                  <p>1 inch = 2.54 centimeters</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">inch</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">2.54</div>
                      <div class="conversion-unit">centimeters</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 5 inches, how many centimeters is that?</p>
                  <p>Hint: Multiply 5 by 2.54</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Great job! 5 inches is about 12.7 centimeters. Now let's try converting feet to meters. 1 meter is about 3.28 feet.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>The Answer</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">5</div>
                      <div class="conversion-unit">inches</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">12.7</div>
                      <div class="conversion-unit">centimeters</div>
                    </div>
                  </div>
                  <p>5 × 2.54 = 12.7</p>
                  
                  <h3>Converting Feet to Meters</h3>
                  <p>1 meter ≈ 3.28 feet</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">meter</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">3.28</div>
                      <div class="conversion-unit">feet</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "You're doing great! Now, let's put everything together. Different things are measured in different units depending on their size and where you live!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Length Measurement Summary</h3>
                  <div style="text-align: left; margin: 1rem 0;">
                    <p><strong>Imperial System:</strong> Used in the United States</p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>12 inches = 1 foot</li>
                      <li>3 feet = 1 yard</li>
                      <li>5,280 feet = 1 mile</li>
                    </ul>
                    
                    <p><strong>Metric System:</strong> Used in most countries</p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>10 millimeters = 1 centimeter</li>
                      <li>100 centimeters = 1 meter</li>
                      <li>1,000 meters = 1 kilometer</li>
                    </ul>
                    
                    <p><strong>Conversions:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>1 inch ≈ 2.54 centimeters</li>
                      <li>1 foot ≈ 0.3048 meters</li>
                      <li>1 meter ≈ 3.28 feet</li>
                      <li>1 mile ≈ 1.6 kilometers</li>
                    </ul>
                  </div>
                  <p>You're ready for a quiz! Click Continue to test your knowledge.</p>
                </div>
              `;
            }
          }
        ];
        
        // Update text and game area
        if (state.currentStep < steps.length) {
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
        } else {
          // Start quiz when all steps are completed
          navigateTo('quiz-container');
        }
      }
      
      // Generate weight conversion learning content
      function generateWeightContent(gameArea, gameText) {
        const steps = [
          {
            text: "Let's learn about weight! Did you know that 16 ounces make 1 pound? And 1000 grams make 1 kilogram? Let's explore together!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Basic Weight Conversions</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">16</div>
                      <div class="conversion-unit">ounces</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">pound</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1000</div>
                      <div class="conversion-unit">grams</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">kilogram</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "Let's see how much some everyday things weigh. We use different units depending on how heavy things are!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Everyday Weights</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Apple -->
                    <circle cx="80" cy="100" r="30" fill="#ff5e5b" />
                    <rect x="75" y="70" width="10" height="15" fill="#67D5B5" />
                    <text x="80" y="105" text-anchor="middle" font-size="12" fill="#fff">Apple</text>
                    <text x="80" y="140" text-anchor="middle" font-size="12" fill="#4e54c8">6 oz / 170 g</text>
                    
                    <!-- Book -->
                    <rect x="180" y="70" width="60" height="80" fill="#8f94fb" rx="2" ry="2" />
                    <rect x="185" y="75" width="50" height="70" fill="#fff" rx="2" ry="2" />
                    <text x="210" y="110" text-anchor="middle" font-size="12" fill="#4e54c8">Book</text>
                    <text x="210" y="160" text-anchor="middle" font-size="12" fill="#4e54c8">2 lb / 0.9 kg</text>
                    
                    <!-- Backpack -->
                    <path d="M350 70 Q320 90, 320 150 L380 150 Q380 90, 350 70 Z" fill="#67D5B5" />
                    <rect x="335" y="80" width="30" height="20" fill="#4e54c8" rx="5" ry="5" />
                    <text x="350" y="140" text-anchor="middle" font-size="12" fill="#fff">Backpack</text>
                    <text x="350" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">5 lb / 2.3 kg</text>
                    
                    <!-- Child -->
                    <rect x="450" y="80" width="30" height="90" fill="#ff9a76" rx="10" ry="10" />
                    <circle cx="465" cy="60" r="20" fill="#ff9a76" />
                    <text x="465" y="65" text-anchor="middle" font-size="12" fill="#fff">You</text>
                    <text x="465" y="180" text-anchor="middle" font-size="12" fill="#4e54c8">45 lb / 20 kg</text>
                    
                    <!-- Car -->
                    <rect x="520" y="120" width="60" height="30" fill="#4e54c8" rx="10" ry="10" />
                    <rect x="530" y="100" width="40" height="20" fill="#4e54c8" rx="5" ry="5" />
                    <circle cx="535" cy="150" r="10" fill="#333" />
                    <circle cx="565" cy="150" r="10" fill="#333" />
                    <text x="550" y="125" text-anchor="middle" font-size="10" fill="#fff">Car</text>
                    <text x="550" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">3000 lb / 1360 kg</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Now, let's try converting between ounces and grams. 1 ounce is about 28.35 grams. If you have 8 ounces, how many grams is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Ounces to Grams</h3>
                  <p>1 ounce ≈ 28.35 grams</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">ounce</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">28.35</div>
                      <div class="conversion-unit">grams</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 8 ounces, how many grams is that?</p>
                  <p>Hint: Multiply 8 by 28.35</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Excellent! 8 ounces is about 227 grams. Now let's try converting pounds to kilograms. 1 kilogram is about 2.2 pounds.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>The Answer</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">8</div>
                      <div class="conversion-unit">ounces</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">227</div>
                      <div class="conversion-unit">grams</div>
                    </div>
                  </div>
                  <p>8 × 28.35 = 226.8 ≈ 227</p>
                  
                  <h3>Converting Pounds to Kilograms</h3>
                  <p>1 kilogram ≈ 2.2 pounds</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">kilogram</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">2.2</div>
                      <div class="conversion-unit">pounds</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "You're doing great! Now, let's put everything together. Weight is a measure of how heavy something is, and we use different units depending on the object.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Weight Measurement Summary</h3>
                  <div style="text-align: left; margin: 1rem 0;">
                    <p><strong>Imperial System:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>16 ounces = 1 pound</li>
                      <li>2000 pounds = 1 ton</li>
                    </ul>
                    
                    <p><strong>Metric System:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>1000 milligrams = 1 gram</li>
                      <li>1000 grams = 1 kilogram</li>
                      <li>1000 kilograms = 1 metric ton</li>
                    </ul>
                    
                    <p><strong>Conversions:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>1 ounce ≈ 28.35 grams</li>
                      <li>1 pound ≈ 0.454 kilograms</li>
                      <li>1 kilogram ≈ 2.2 pounds</li>
                      <li>1 ton ≈ 0.907 metric tons</li>
                    </ul>
                  </div>
                  <p>You're ready for a quiz! Click Continue to test your knowledge.</p>
                </div>
              `;
            }
          }
        ];
        
        // Update text and game area
        if (state.currentStep < steps.length) {
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
        } else {
          // Start quiz when all steps are completed
          navigateTo('quiz-container');
        }
      }
      
      // Generate time conversion learning content
      function generateTimeContent(gameArea, gameText) {
        const steps = [
          {
            text: "Time is how we measure when things happen. Let's learn about seconds, minutes, hours, and days! Did you know that 60 seconds make 1 minute, and 60 minutes make 1 hour?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Basic Time Conversions</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">60</div>
                      <div class="conversion-unit">seconds</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">minute</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">60</div>
                      <div class="conversion-unit">minutes</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">hour</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">24</div>
                      <div class="conversion-unit">hours</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">day</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "Let's look at some activities and how long they take. Different activities take different amounts of time!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>How Long Things Take</h3>
                  <svg width="100%" height="250" viewBox="0 0 600 250">
                    <!-- Blinking -->
                    <circle cx="80" cy="60" r="20" fill="#ff9a76">
                      <animate attributeName="opacity" values="1;0;1" dur="2s" repeatCount="indefinite" />
                    </circle>
                    <text x="80" cy="60" text-anchor="middle" font-size="12" fill="#333">Blinking</text>
                    <text x="80" y="90" text-anchor="middle" font-size="12" fill="#4e54c8">0.3 seconds</text>
                    
                    <!-- Brushing teeth -->
                    <rect x="180" y="40" width="10" height="40" fill="#8f94fb" />
                    <path d="M190 40 Q200 45, 190 50 Q200 55, 190 60 Q200 65, 190 70 Q200 75, 190 80" fill="none" stroke="#8f94fb" stroke-width="3" />
                    <text x="185" y="100" text-anchor="middle" font-size="12" fill="#333">Brushing teeth</text>
                    <text x="185" y="120" text-anchor="middle" font-size="12" fill="#4e54c8">2 minutes</text>
                    
                    <!-- School day -->
                    <rect x="300" y="40" width="60" height="40" fill="#67D5B5" rx="5" ry="5" />
                    <rect x="310" y="55" width="10" height="10" fill="#fff" rx="2" ry="2" />
                    <rect x="340" y="55" width="10" height="10" fill="#fff" rx="2" ry="2" />
                    <rect x="320" y="80" width="20" height="5" fill="#fff" rx="2" ry="2" />
                    <text x="330" y="100" text-anchor="middle" font-size="12" fill="#333">School day</text>
                    <text x="330" y="120" text-anchor="middle" font-size="12" fill="#4e54c8">6-7 hours</text>
                    
                    <!-- Week -->
                    <rect x="450" y="30" width="70" height="50" fill="#4e54c8" rx="5" ry="5" />
                    <text x="485" y="50" text-anchor="middle" font-size="10" fill="#fff">S M T W T F S</text>
                    <text x="485" y="70" text-anchor="middle" font-size="8" fill="#fff">1 2 3 4 5 6 7</text>
                    <text x="485" y="100" text-anchor="middle" font-size="12" fill="#333">One week</text>
                    <text x="485" y="120" text-anchor="middle" font-size="12" fill="#4e54c8">7 days / 168 hours</text>
                    
                    <!-- Year -->
                    <rect x="150" y="150" width="300" height="60" fill="#ff5e5b" rx="5" ry="5" />
                    <text x="300" y="180" text-anchor="middle" font-size="14" fill="#fff">One Year</text>
                    <text x="300" y="200" text-anchor="middle" font-size="12" fill="#fff">365 days / 8760 hours</text>
                    <text x="300" y="220" text-anchor="middle" font-size="12" fill="#fff">525,600 minutes / 31,536,000 seconds</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Now, let's try converting between minutes and seconds. If you have 3 minutes, how many seconds is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Minutes to Seconds</h3>
                  <p>1 minute = 60 seconds</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">minute</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">60</div>
                      <div class="conversion-unit">seconds</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 3 minutes, how many seconds is that?</p>
                  <p>Hint: Multiply 3 by 60</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Great job! 3 minutes equals 180 seconds. Now let's try converting between hours and minutes. If you have 2.5 hours, how many minutes is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>The Answer</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">3</div>
                      <div class="conversion-unit">minutes</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">180</div>
                      <div class="conversion-unit">seconds</div>
                    </div>
                  </div>
                  <p>3 × 60 = 180</p>
                  
                  <h3>Converting Hours to Minutes</h3>
                  <p>1 hour = 60 minutes</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">hour</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">60</div>
                      <div class="conversion-unit">minutes</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 2.5 hours, how many minutes is that?</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Excellent! 2.5 hours equals 150 minutes. Now, let's put everything together and see how we use time units in our daily life.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Time Measurement Summary</h3>
                  <div style="text-align: left; margin: 1rem 0;">
                    <p><strong>Basic Time Units:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>60 seconds = 1 minute</li>
                      <li>60 minutes = 1 hour</li>
                      <li>24 hours = 1 day</li>
                      <li>7 days = 1 week</li>
                      <li>~30 days = 1 month</li>
                      <li>365 days = 1 year</li>
                    </ul>
                    
                    <p><strong>Fun Time Facts:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>Your heart beats about 60-100 times per minute</li>
                      <li>Light travels 186,000 miles in just 1 second!</li>
                      <li>One school year is about 9 months or 180 days</li>
                      <li>Dinosaurs lived about 65 million years ago</li>
                    </ul>
                  </div>
                  <p>You're ready for a quiz! Click Continue to test your knowledge.</p>
                </div>
              `;
            }
          }
        ];
        
        // Update text and game area
        if (state.currentStep < steps.length) {
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
        } else {
          // Start quiz when all steps are completed
          navigateTo('quiz-container');
        }
      }
      
      // Generate volume conversion learning content
      function generateVolumeContent(gameArea, gameText) {
        const steps = [
          {
            text: "Volume is how much space something takes up. Let's learn about cups, pints, milliliters, and liters! Did you know that 2 cups make 1 pint? And 1000 milliliters make 1 liter?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Basic Volume Conversions</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">2</div>
                      <div class="conversion-unit">cups</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">pint</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">2</div>
                      <div class="conversion-unit">pints</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">quart</div>
                    </div>
                  </div>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1000</div>
                      <div class="conversion-unit">milliliters</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">liter</div>
                    </div>
                  </div>
                </div>
              `;
            }
          },
          {
            text: "Let's look at some containers and how much they can hold. We use different volume units depending on the size!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Common Volume Containers</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Spoon -->
                    <ellipse cx="80" cy="100" rx="30" ry="10" fill="none" stroke="#4e54c8" stroke-width="2" />
                    <rect x="110" y="95" width="20" height="10" fill="none" stroke="#4e54c8" stroke-width="2" />
                    <text x="80" y="130" text-anchor="middle" font-size="12" fill="#333">Teaspoon</text>
                    <text x="80" y="150" text-anchor="middle" font-size="12" fill="#4e54c8">5 ml / 1 tsp</text>
                    
                    <!-- Cup -->
                    <path d="M200 70 C180 70, 180 120, 200 120 L240 120 C260 120, 260 70, 240 70 Z" fill="none" stroke="#8f94fb" stroke-width="2" />
                    <text x="220" y="140" text-anchor="middle" font-size="12" fill="#333">Cup</text>
                    <text x="220" y="160" text-anchor="middle" font-size="12" fill="#4e54c8">250 ml / 1 cup</text>
                    
                    <!-- Bottle -->
                    <path d="M350 50 L340 70 L340 120 L360 120 L360 70 Z" fill="none" stroke="#67D5B5" stroke-width="2" />
                    <circle cx="350" cy="50" r="5" fill="none" stroke="#67D5B5" stroke-width="2" />
                    <text x="350" y="140" text-anchor="middle" font-size="12" fill="#333">Water Bottle</text>
                    <text x="350" y="160" text-anchor="middle" font-size="12" fill="#4e54c8">500 ml / 2 cups</text>
                    
                    <!-- Milk carton -->
                    <rect x="450" y="60" width="40" height="70" fill="none" stroke="#ff9a76" stroke-width="2" />
                    <path d="M450 60 L470 40 L490 60" fill="none" stroke="#ff9a76" stroke-width="2" />
                    <text x="470" y="140" text-anchor="middle" font-size="12" fill="#333">Milk Carton</text>
                    <text x="470" y="160" text-anchor="middle" font-size="12" fill="#4e54c8">1 liter / 4 cups</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Now, let's try converting between cups and milliliters. 1 cup is about 240 milliliters. If you have 3 cups, how many milliliters is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Cups to Milliliters</h3>
                  <p>1 cup ≈ 240 milliliters</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">cup</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">240</div>
                      <div class="conversion-unit">milliliters</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 3 cups, how many milliliters is that?</p>
                  <p>Hint: Multiply 3 by 240</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Great job! 3 cups equals about 720 milliliters. Now let's try converting liters to cups. 1 liter is about 4.2 cups.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>The Answer</h3>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">3</div>
                      <div class="conversion-unit">cups</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">720</div>
                      <div class="conversion-unit">milliliters</div>
                    </div>
                  </div>
                  <p>3 × 240 = 720</p>
                  
                  <h3>Converting Liters to Cups</h3>
                  <p>1 liter ≈ 4.2 cups</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">1</div>
                      <div class="conversion-unit">liter</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
<div class="conversion-value">4.2</div>
                      <div class="conversion-unit">cups</div>
                    </div>
                  </div>
                  <h3>Your Turn!</h3>
                  <p>If you have 2 liters, how many cups is that?</p>
                  <div class="feedback">Click Continue when you're ready to see the answer!</div>
                </div>
              `;
            }
          },
          {
            text: "Excellent! 2 liters equals about 8.4 cups. Now, let's put everything together and see all our volume conversions in one place.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Volume Measurement Summary</h3>
                  <div style="text-align: left; margin: 1rem 0;">
                    <p><strong>Imperial System:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>3 teaspoons = 1 tablespoon</li>
                      <li>16 tablespoons = 1 cup</li>
                      <li>2 cups = 1 pint</li>
                      <li>2 pints = 1 quart</li>
                      <li>4 quarts = 1 gallon</li>
                    </ul>
                    
                    <p><strong>Metric System:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>1000 milliliters = 1 liter</li>
                    </ul>
                    
                    <p><strong>Conversions:</strong></p>
                    <ul style="list-style: disc; margin-left: 2rem;">
                      <li>1 teaspoon ≈ 5 milliliters</li>
                      <li>1 tablespoon ≈ 15 milliliters</li>
                      <li>1 cup ≈ 240 milliliters</li>
                      <li>1 liter ≈ 4.2 cups</li>
                      <li>1 gallon ≈ 3.8 liters</li>
                    </ul>
                  </div>
                  <p>You're ready for a quiz! Click Continue to test your knowledge.</p>
                </div>
              `;
            }
          }
        ];
        
        // Update text and game area
        if (state.currentStep < steps.length) {
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
        } else {
          // Start quiz when all steps are completed
          navigateTo('quiz-container');
        }
      }
      
      // Generate temperature conversion learning content
      function generateTemperatureContent(gameArea, gameText) {
        const steps = [
          {
            text: "Temperature tells us how hot or cold something is. In the United States, we use Fahrenheit (°F). In most other countries, people use Celsius (°C). Let's learn how to convert between them!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Temperature Scales</h3>
                  <svg width="100%" height="300" viewBox="0 0 600 300">
                    <!-- Fahrenheit thermometer -->
                    <rect x="150" y="50" width="40" height="200" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="20" ry="20" />
                    <circle cx="170" cy="250" r="20" fill="#FF5722" stroke="#FF8C64" stroke-width="2" />
                    <rect x="160" y="120" width="20" height="130" fill="#FF5722" rx="10" ry="10" />
                    
                    <!-- Celsius thermometer -->
                    <rect x="400" y="50" width="40" height="200" fill="#FFF" stroke="#4e54c8" stroke-width="2" rx="20" ry="20" />
                    <circle cx="420" cy="250" r="20" fill="#8f94fb" stroke="#4e54c8" stroke-width="2" />
                    <rect x="410" y="170" width="20" height="80" fill="#8f94fb" rx="10" ry="10" />
                    
                    <!-- Temperature markings Fahrenheit -->
                    <line x1="140" y1="50" x2="150" y2="50" stroke="#FF8C64" stroke-width="1" />
                    <text x="135" y="55" text-anchor="end" font-size="12" fill="#FF8C64">212°F</text>
                    <text x="120" y="55" text-anchor="end" font-size="10" fill="#FF8C64">(Boiling)</text>
                    
                    <line x1="140" y1="170" x2="150" y2="170" stroke="#FF8C64" stroke-width="1" />
                    <text x="135" y="175" text-anchor="end" font-size="12" fill="#FF8C64">70°F</text>
                    <text x="120" y="175" text-anchor="end" font-size="10" fill="#FF8C64">(Room Temp)</text>
                    
                    <line x1="140" y1="250" x2="150" y2="250" stroke="#FF8C64" stroke-width="1" />
                    <text x="135" y="255" text-anchor="end" font-size="12" fill="#FF8C64">32°F</text>
                    <text x="120" y="255" text-anchor="end" font-size="10" fill="#FF8C64">(Freezing)</text>
                    
                    <text x="170" y="280" text-anchor="middle" font-size="16" fill="#FF8C64" font-weight="bold">°F</text>
                    
                    <!-- Temperature markings Celsius -->
                    <line x1="440" y1="50" x2="450" y2="50" stroke="#4e54c8" stroke-width="1" />
                    <text x="455" y="55" text-anchor="start" font-size="12" fill="#4e54c8">100°C</text>
                    <text x="470" y="55" text-anchor="start" font-size="10" fill="#4e54c8">(Boiling)</text>
                    
                    <line x1="440" y1="170" x2="450" y2="170" stroke="#4e54c8" stroke-width="1" />
                    <text x="455" y="175" text-anchor="start" font-size="12" fill="#4e54c8">21°C</text>
                    <text x="470" y="175" text-anchor="start" font-size="10" fill="#4e54c8">(Room Temp)</text>
                    
                    <line x1="440" y1="250" x2="450" y2="250" stroke="#4e54c8" stroke-width="1" />
                    <text x="455" y="255" text-anchor="start" font-size="12" fill="#4e54c8">0°C</text>
                    <text x="470" y="255" text-anchor="start" font-size="10" fill="#4e54c8">(Freezing)</text>
                    
                    <text x="420" y="280" text-anchor="middle" font-size="16" fill="#4e54c8" font-weight="bold">°C</text>
                    
                    <!-- Temperature conversion arrows -->
                    <path d="M200 50 L350 50" fill="none" stroke="#333" stroke-width="1" stroke-dasharray="5,5" />
                    <text x="275" y="40" text-anchor="middle" font-size="12" fill="#333">212°F = 100°C</text>
                    
                    <path d="M200 170 L350 170" fill="none" stroke="#333" stroke-width="1" stroke-dasharray="5,5" />
                    <text x="275" y="160" text-anchor="middle" font-size="12" fill="#333">70°F = 21°C</text>
                    
                    <path d="M200 250 L350 250" fill="none" stroke="#333" stroke-width="1" stroke-dasharray="5,5" />
                    <text x="275" y="240" text-anchor="middle" font-size="12" fill="#333">32°F = 0°C</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Let's look at different temperatures you might encounter in your daily life. We feel different temperatures throughout the year and in different places!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Everyday Temperatures</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Cold winter -->
                    <circle cx="100" cy="100" r="40" fill="#8f94fb" />
                    <path d="M80 80 L120 120 M80 120 L120 80" stroke="#fff" stroke-width="3" />
                    <text x="100" y="150" text-anchor="middle" font-size="12" fill="#333">Cold Winter Day</text>
                    <text x="100" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">32°F / 0°C</text>
                    
                    <!-- Cool day -->
                    <circle cx="225" cy="100" r="40" fill="#67D5B5" />
                    <path d="M205 110 L245 110" stroke="#fff" stroke-width="3" />
                    <text x="225" y="150" text-anchor="middle" font-size="12" fill="#333">Cool Spring Day</text>
                    <text x="225" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">50°F / 10°C</text>
                    
                    <!-- Room temperature -->
                    <rect x="300" y="60" width="80" height="80" fill="#8f94fb" rx="5" ry="5" />
                    <rect x="310" y="70" width="20" height="30" fill="#fff" rx="2" ry="2" />
                    <rect x="350" y="70" width="20" height="30" fill="#fff" rx="2" ry="2" />
                    <rect x="330" y="120" width="20" height="5" fill="#fff" rx="2" ry="2" />
                    <text x="340" y="150" text-anchor="middle" font-size="12" fill="#333">Room Temperature</text>
                    <text x="340" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">70°F / 21°C</text>
                    
                    <!-- Hot day -->
                    <circle cx="470" cy="100" r="40" fill="#ff5e5b" />
                    <path d="M450 85 L470 70 L490 85 L490 115 L470 130 L450 115 Z" fill="#ff9a76" />
                    <text x="470" y="150" text-anchor="middle" font-size="12" fill="#333">Hot Summer Day</text>
                    <text x="470" y="170" text-anchor="middle" font-size="12" fill="#4e54c8">90°F / 32°C</text>
                  </svg>
                </div>
              `;
            }
          },
          {
            text: "Now, let's learn how to convert from Fahrenheit to Celsius. The formula is: °C = (°F - 32) × 5/9. Let's try a simple example!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Fahrenheit to Celsius</h3>
                  <p>Formula: °C = (°F - 32) × 5/9</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">°F</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">°C</div>
                    </div>
                  </div>
                  <h3>Example:</h3>
                  <p>Convert 68°F to Celsius</p>
                  <p>°C = (68 - 32) × 5/9</p>
                  <p>°C = 36 × 5/9</p>
                  <p>°C = 20</p>
                  <p>So 68°F = 20°C</p>
                  <div class="feedback">Let's try another example in the next step!</div>
                </div>
              `;
            }
          },
          {
            text: "Let's also learn to convert from Celsius to Fahrenheit. The formula is: °F = (°C × 9/5) + 32. Let's try converting a temperature you might see on a nice day!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Converting Celsius to Fahrenheit</h3>
                  <p>Formula: °F = (°C × 9/5) + 32</p>
                  <div class="conversion-group">
                    <div class="conversion-item">
                      <div class="conversion-value">°C</div>
                    </div>
                    <div class="conversion-arrow">→</div>
                    <div class="conversion-item">
                      <div class="conversion-value">°F</div>
                    </div>
                  </div>
                  <h3>Example:</h3>
                  <p>Convert 25°C to Fahrenheit</p>
                  <p>°F = (25 × 9/5) + 32</p>
                  <p>°F = 45 + 32</p>
                  <p>°F = 77</p>
                  <p>So 25°C = 77°F</p>
                  <div class="feedback">You're getting good at this!</div>
                </div>
              `;
            }
          },
          {
            text: "You're doing great! Now, let's look at a complete temperature conversion chart and some important temperatures to remember.",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Temperature Conversion Chart</h3>
                  <table style="width: 80%; margin: 0 auto; border-collapse: collapse; border: 1px solid #ddd;">
                    <tr style="background-color: #4e54c8; color: white;">
                      <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Fahrenheit (°F)</th>
                      <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Celsius (°C)</th>
                      <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Description</th>
                    </tr>
                    <tr>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">212°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">100°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Water boils</td>
                    </tr>
                    <tr style="background-color: #f5f5f5;">
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">98.6°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">37°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Normal body temperature</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">86°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">30°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Very hot day</td>
                    </tr>
                    <tr style="background-color: #f5f5f5;">
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">70°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">21°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Room temperature</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">50°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">10°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Cool day</td>
                    </tr>
                    <tr style="background-color: #f5f5f5;">
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">32°F</td>
                      <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">0°C</td>
                      <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">Water freezes</td>
                    </tr>
                  </table>
                  <p style="margin-top: 1.5rem;">You're ready for a quiz! Click Continue to test your knowledge.</p>
                </div>
              `;
            }
          }
        ];
        
        // Update text and game area
        if (state.currentStep < steps.length) {
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
        } else {
          // Start quiz when all steps are completed
          navigateTo('quiz-container');
        }
      }
      
      // Generate adventure content
      function generateAdventureContent(gameArea, gameText) {
        const steps = [
          {
            text: "Welcome to Measurement Mountain! Today we'll use ALL of our measurement skills to reach the summit. Are you ready for an adventure?",
            content: () => {
              return `
                <svg width="100%" height="300" viewBox="0 0 600 300">
                  <!-- Sky -->
                  <rect x="0" y="0" width="600" height="300" fill="#e0f7fa" />
                  
                  <!-- Sun -->
                  <circle cx="550" cy="50" r="30" fill="#ff9a76">
                    <animate attributeName="opacity" values="0.8;1;0.8" dur="3s" repeatCount="indefinite" />
                  </circle>
                  
                  <!-- Mountains -->
                  <path d="M0 300 L150 120 L300 250 L450 80 L600 300 Z" fill="#67D5B5" />
                  <path d="M0 300 L200 200 L400 220 L600 300 Z" fill="#20BF55" />
                  
                  <!-- Snow caps -->
                  <path d="M450 80 L430 100 L470 95 Z" fill="#fff" />
                  
                  <!-- Path -->
                  <path d="M100 300 Q150 250, 200 270 Q250 280, 300 250 Q350 220, 400 240 Q450 260, 500 180" fill="none" stroke="#a67c52" stroke-width="5" stroke-linecap="round" stroke-dasharray="5,10" />
                  
                  <!-- Checkpoints -->
                  <circle cx="100" cy="300" r="10" fill="#4e54c8" />
                  <text x="100" y="280" text-anchor="middle" font-size="12" fill="#333">Start</text>
                  
                  <circle cx="200" cy="270" r="8" fill="#8f94fb" />
                  <text x="200" y="255" text-anchor="middle" font-size="10" fill="#333">Lake</text>
                  
                  <circle cx="300" cy="250" r="8" fill="#8f94fb" />
                  <text x="300" y="235" text-anchor="middle" font-size="10" fill="#333">Forest</text>
                  
                  <circle cx="400" cy="240" r="8" fill="#8f94fb" />
                  <text x="400" y="225" text-anchor="middle" font-size="10" fill="#333">Camp</text>
                  
                  <circle cx="500" cy="180" r="10" fill="#ff5e5b" />
                  <text x="500" y="165" text-anchor="middle" font-size="12" fill="#333">Summit</text>
                  
                  <!-- Characters -->
                  <g transform="translate(85, 280) scale(0.4)">
                    <!-- Measuring Tape Character -->
                    <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
                    <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
                    <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
                    <circle cx="45" cy="20" r="3" fill="#333" />
                    <circle cx="55" cy="20" r="3" fill="#333" />
                    <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
                  </g>
                </svg>
                <div style="text-align: left; margin-top: 1rem;">
                  <h3>Our Adventure Map</h3>
                  <p>We need to climb from the Starting Point all the way to the Summit of Measurement Mountain!</p>
                  <p>Along the way, we'll need to:</p>
                  <ul style="list-style: disc; margin-left: 2rem;">
                    <li>Measure the distance between checkpoints</li>
                    <li>Calculate how much water and food to carry</li>
                    <li>Check the temperature as we climb higher</li>
                    <li>Keep track of how much time our journey takes</li>
                  </ul>
                  <p>Are you ready to begin? Let's go!</p>
                </div>
              `;
            }
          },
          {
            text: "First challenge: We need to hike from the Start to the Lake. The path is 2 kilometers long. How many meters is that?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Challenge 1: Distance to the Lake</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Start and Lake markers -->
                    <circle cx="100" cy="150" r="15" fill="#4e54c8" />
                    <text x="100" y="155" text-anchor="middle" font-size="14" fill="#fff">Start</text>
                    
                    <circle cx="500" cy="150" r="15" fill="#8f94fb" />
                    <text x="500" y="155" text-anchor="middle" font-size="14" fill="#fff">Lake</text>
                    
                    <!-- Path -->
                    <path d="M115 150 L485 150" fill="none" stroke="#a67c52" stroke-width="5" stroke-dasharray="5,5" />
                    
                    <!-- Distance label -->
                    <text x="300" y="130" text-anchor="middle" font-size="16" fill="#333">2 kilometers</text>
                    <text x="300" y="180" text-anchor="middle" font-size="14" fill="#4e54c8">? meters</text>
                  </svg>
                  
                  <div style="margin-top: 2rem;">
                    <p>We need to convert 2 kilometers to meters.</p>
                    <p>Remember: 1 kilometer = 1000 meters</p>
                    <p>So 2 kilometers = ? meters</p>
                    <div class="button-container">
                      <button class="quiz-option" data-answer="2000">2000 meters</button>
                      <button class="quiz-option" data-answer="200">200 meters</button>
                      <button class="quiz-option" data-answer="20">20 meters</button>
                    </div>
                    <div id="adventure-feedback" class="feedback"></div>
                  </div>
                </div>
              `;
            },
            answer: "2000"
          },
          {
            text: "Great job! 2 kilometers equals 2000 meters. Now we're at the Lake and need to drink some water. If each person needs 2 cups of water, and we have 5 people, how many pints of water do we need in total?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Challenge 2: Water for the Group</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Lake -->
                    <ellipse cx="300" cy="150" rx="200" ry="40" fill="#8f94fb" opacity="0.7" />
                    
                    <!-- Water bottles -->
                    <g transform="translate(150, 100)">
                      <path d="M0 0 L-10 30 L-10 60 L10 60 L10 30 Z" fill="#FFF" fill-opacity="0.7" stroke="#4e54c8" stroke-width="1" />
                      <path d="M-10 50 L10 50" stroke="#4e54c8" stroke-width="1" stroke-dasharray="2,2" />
                      <text x="0" y="80" text-anchor="middle" font-size="10" fill="#333">2 cups</text>
                    </g>
                    
                    <!-- Characters -->
                    ${Array.from({length: 5}, (_, i) => {
                      const x = 250 + i * 60;
                      return `
                        <g transform="translate(${x}, 120) scale(0.3)">
                          <circle cx="50" cy="50" r="40" fill="#ff9a76" />
                          <circle cx="40" cy="40" r="5" fill="#333" />
                          <circle cx="60" cy="40" r="5" fill="#333" />
                          <path d="M35 65 Q 50 80 65 65" fill="none" stroke="#333" stroke-width="3" />
                        </g>
                      `;
                    }).join('')}
                  </svg>
                  
                  <div style="margin-top: 2rem;">
                    <p>Each person needs 2 cups of water.</p>
                    <p>We have 5 people in our group.</p>
                    <p>Total cups needed = 5 × 2 = 10 cups</p>
                    <p>Remember: 2 cups = 1 pint</p>
                    <p>So 10 cups = ? pints</p>
                    <div class="button-container">
                      <button class="quiz-option" data-answer="5">5 pints</button>
                      <button class="quiz-option" data-answer="20">20 pints</button>
                      <button class="quiz-option" data-answer="2.5">2.5 pints</button>
                    </div>
                    <div id="adventure-feedback" class="feedback"></div>
                  </div>
                </div>
              `;
            },
            answer: "5"
          },
          {
            text: "Perfect! 10 cups equals 5 pints. Now we're hiking to the Forest. It's getting cooler as we climb higher. At the Lake it was 77°F, but at the Forest it's 59°F. What is the Forest temperature in Celsius?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Challenge 3: Forest Temperature</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Lake and Forest markers -->
                    <circle cx="150" cy="150" r="15" fill="#8f94fb" />
                    <text x="150" y="155" text-anchor="middle" font-size="14" fill="#fff">Lake</text>
                    
                    <g transform="translate(450, 130)">
                      <rect x="-20" y="-20" width="40" height="40" fill="#67D5B5" />
                      <rect x="-12" y="-12" width="24" height="24" fill="#20BF55" />
                      <rect x="-6" y="-6" width="12" height="12" fill="#67D5B5" />
                    </g>
                    <text x="450" y="155" text-anchor="middle" font-size="14" fill="#fff">Forest</text>
                    
                    <!-- Path -->
                    <path d="M165 150 Q300 120, 435 130" fill="none" stroke="#a67c52" stroke-width="5" stroke-dasharray="5,5" />
                    
                    <!-- Temperature labels -->
                    <text x="150" y="180" text-anchor="middle" font-size="14" fill="#ff5e5b">77°F</text>
                    <text x="450" y="180" text-anchor="middle" font-size="14" fill="#4e54c8">59°F = ?°C</text>
                    
                    <!-- Thermometer icon -->
                    <g transform="translate(300, 70) scale(0.8)">
                      <rect x="45" y="30" width="10" height="50" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="5" ry="5" />
                      <circle cx="50" cy="80" r="10" fill="#FF5722" />
                      <rect x="47" y="60" width="6" height="20" fill="#FF8C64" rx="3" ry="3" />
                      <text x="70" y="60" font-size="12" fill="#FF8C64">°F to °C:</text>
                      <text x="70" y="80" font-size="12" fill="#FF8C64">°C = (°F - 32) × 5/9</text>
                    </g>
                  </svg>
                  
                  <div style="margin-top: 2rem;">
                    <p>We need to convert 59°F to Celsius.</p>
                    <p>Formula: °C = (°F - 32) × 5/9</p>
                    <p>°C = (59 - 32) × 5/9</p>
                    <p>°C = 27 × 5/9</p>
                    <p>°C = 15</p>
                    <div class="button-container">
                      <button class="quiz-option" data-answer="15">15°C</button>
                      <button class="quiz-option" data-answer="27">27°C</button>
                      <button class="quiz-option" data-answer="10">10°C</button>
                    </div>
                    <div id="adventure-feedback" class="feedback"></div>
                  </div>
                </div>
              `;
            },
            answer: "15"
          },
          {
            text: "Amazing! 59°F equals 15°C. Now we're at the Forest and need to set up camp for the night. If it takes 30 minutes to set up each tent, and we have 2 tents, how many seconds will it take to set up all the tents?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Challenge 4: Setting Up Camp</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Forest background -->
                    <rect x="0" y="0" width="600" height="200" fill="#e0f7fa" />
                    <rect x="0" y="150" width="600" height="50" fill="#20BF55" />
                    
                    <!-- Trees -->
                    ${Array.from({length: 8}, (_, i) => {
                      const x = 50 + i * 70;
                      const height = 80 + Math.random() * 40;
                      return `
                        <g transform="translate(${x}, ${150-height+20})">
                          <rect x="-5" y="${height-20}" width="10" height="20" fill="#a67c52" />
                          <path d="M-20 ${height-20} L0 ${height-50} L20 ${height-20} Z" fill="#67D5B5" />
                          <path d="M-15 ${height-35} L0 ${height-65} L15 ${height-35} Z" fill="#67D5B5" />
                          <path d="M-10 ${height-50} L0 ${height-75} L10 ${height-50} Z" fill="#67D5B5" />
                        </g>
                      `;
                    }).join('')}
                    
                    <!-- Tents -->
                    <g transform="translate(200, 140)">
                      <path d="M-30 0 L0 -40 L30 0 Z" fill="#8f94fb" stroke="#4e54c8" stroke-width="2" />
                      <path d="M-30 0 L30 0" stroke="#4e54c8" stroke-width="2" />
                      <text x="0" y="15" text-anchor="middle" font-size="12" fill="#333">Tent 1</text>
                      <text x="0" y="30" text-anchor="middle" font-size="12" fill="#4e54c8">30 minutes</text>
                    </g>
                    
                    <g transform="translate(400, 140)">
                      <path d="M-30 0 L0 -40 L30 0 Z" fill="#ff9a76" stroke="#ff5e5b" stroke-width="2" />
                      <path d="M-30 0 L30 0" stroke="#ff5e5b" stroke-width="2" />
                      <text x="0" y="15" text-anchor="middle" font-size="12" fill="#333">Tent 2</text>
                      <text x="0" y="30" text-anchor="middle" font-size="12" fill="#4e54c8">30 minutes</text>
                    </g>
                    
                    <!-- Clock icon -->
                    <g transform="translate(300, 50)">
                      <circle cx="0" cy="0" r="25" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
                      <line x1="0" y1="0" x2="0" y2="-15" stroke="#333" stroke-width="2" />
                      <line x1="0" y1="0" x2="10" y2="0" stroke="#333" stroke-width="2" />
                      <text x="0" y="40" text-anchor="middle" font-size="14" fill="#333">Total Time = ?</text>
                    </g>
                  </svg>
                  
                  <div style="margin-top: 2rem;">
                    <p>Each tent takes 30 minutes to set up.</p>
                    <p>We have 2 tents to set up.</p>
                    <p>Total minutes needed = 2 × 30 = 60 minutes</p>
                    <p>Remember: 1 minute = 60 seconds</p>
                    <p>So 60 minutes = ? seconds</p>
                    <div class="button-container">
                      <button class="quiz-option" data-answer="3600">3600 seconds</button>
                      <button class="quiz-option" data-answer="360">360 seconds</button>
                      <button class="quiz-option" data-answer="600">600 seconds</button>
                    </div>
                    <div id="adventure-feedback" class="feedback"></div>
                  </div>
                </div>
              `;
            },
            answer: "3600"
          },
          {
            text: "Excellent! 60 minutes equals 3600 seconds. For our final challenge, we need to hike to the Summit. Our backpacks weigh 8 pounds each. How many kilograms is that in total for all 5 people?",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Challenge 5: Summit Backpacks</h3>
                  <svg width="100%" height="200" viewBox="0 0 600 200">
                    <!-- Mountain background -->
                    <path d="M0 200 L100 120 L200 150 L300 80 L400 150 L500 50 L600 150 L600 200 Z" fill="#67D5B5" />
                    <path d="M500 50 L480 70 L520 65 Z" fill="#fff" /> <!-- Snow cap -->
                    
                    <!-- Summit marker -->
                    <circle cx="500" cy="50" r="10" fill="#ff5e5b" />
                    <text x="500" y="35" text-anchor="middle" font-size="14" fill="#333">Summit</text>
                    
                    <!-- Backpack row -->
                    <g transform="translate(100, 170)">
                      ${Array.from({length: 5}, (_, i) => {
                        const x = i * 100;
                        return `
                          <g transform="translate(${x}, 0)">
                            <path d="M-15 -30 Q-25 0, -15 15 L15 15 Q25 0, 15 -30 Z" fill="#ff9a76" stroke="#ff5e5b" stroke-width="1" />
                            <rect x="-5" y="-40" width="10" height="10" fill="#ff5e5b" />
                            <text x="0" y="5" text-anchor="middle" font-size="10" fill="#fff">8 lbs</text>
                          </g>
                        `;
                      }).join('')}
                    </g>
                    
                    <!-- Scale icon -->
                    <g transform="translate(300, 80)">
                      <rect x="-30" y="-10" width="60" height="5" fill="#3FC1C9" rx="2" ry="2" />
                      <rect x="-40" y="-5" width="80" height="5" fill="#0E86D4" rx="2" ry="2" />
                      <line x1="-20" y1="-20" x2="-20" y2="-10" stroke="#3FC1C9" stroke-width="2" />
                      <line x1="20" y1="-20" x2="20" y2="-10" stroke="#3FC1C9" stroke-width="2" />
                      <text x="0" y="-25" text-anchor="middle" font-size="12" fill="#333">5 backpacks × 8 pounds = ?</text>
                    </g>
                  </svg>
                  
                  <div style="margin-top: 2rem;">
                    <p>Each backpack weighs 8 pounds.</p>
                    <p>We have 5 backpacks (one for each person).</p>
                    <p>Total weight in pounds = 5 × 8 = 40 pounds</p>
                    <p>Remember: 1 kilogram ≈ 2.2 pounds</p>
                    <p>So 40 pounds = ? kilograms</p>
                    <div class="button-container">
                      <button class="quiz-option" data-answer="18.2">18.2 kilograms</button>
                      <button class="quiz-option" data-answer="88">88 kilograms</button>
                      <button class="quiz-option" data-answer="8.8">8.8 kilograms</button>
                    </div>
                    <div id="adventure-feedback" class="feedback"></div>
                  </div>
                </div>
              `;
            },
            answer: "18.2"
          },
          {
            text: "Outstanding! 40 pounds equals 18.2 kilograms. We made it to the Summit of Measurement Mountain! You've successfully used all your conversion skills to complete our adventure!",
            content: () => {
              return `
                <div class="conversion-container">
                  <h3>Congratulations!</h3>
                  <svg width="100%" height="300" viewBox="0 0 600 300">
                    <!-- Sky background with gradient -->
                    <defs>
                      <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                        <stop offset="0%" stop-color="#4e54c8" />
                        <stop offset="100%" stop-color="#8f94fb" />
                      </linearGradient>
                    </defs>
                    <rect x="0" y="0" width="600" height="300" fill="url(#skyGradient)" />
                    
                    <!-- Sun -->
                    <circle cx="500" cy="50" r="40" fill="#ff9a76">
                      <animate attributeName="opacity" values="0.8;1;0.8" dur="3s" repeatCount="indefinite" />
                    </circle>
                    
                    <!-- Mountain -->
                    <path d="M0 300 L200 150 L300 180 L450 80 L600 220 L600 300 Z" fill="#67D5B5" />
                    <path d="M450 80 L430 100 L470 90 Z" fill="#fff" /> <!-- Snow cap -->
                    
                    <!-- Success flag -->
                    <rect x="445" y="40" width="10" height="40" fill="#ff5e5b" />
                    <path d="M455 40 L485 50 L455 60" fill="#ff9a76" />
                    
                    <!-- Characters -->
                    <g transform="translate(450, 80) scale(0.4)">
                      <!-- Measuring Tape Character -->
                      <rect x="20" y="30" width="60" height="15" fill="#FF9A76" rx="5" ry="5" />
                      <rect x="20" y="45" width="60" height="30" fill="#FFF" rx="2" ry="2" stroke="#FF5E5B" stroke-width="2" />
                      <circle cx="50" cy="25" r="15" fill="#FFF" stroke="#FF5E5B" stroke-width="2" />
                      <circle cx="45" cy="20" r="3" fill="#333" />
                      <circle cx="55" cy="20" r="3" fill="#333" />
                      <path d="M45 30 Q 50 35 55 30" fill="none" stroke="#333" stroke-width="2" />
                      <rect x="45" y="80" width="10" height="15" fill="#FF9A76" rx="2" ry="2" />
                    </g>
                    
                    <!-- Stars -->
                    ${Array.from({length: 20}, (_, i) => {
                      const x = 50 + Math.random() * 500;
                      const y = 30 + Math.random() * 100;
                      const size = 2 + Math.random() * 4;
                      return `
                        <g transform="translate(${x}, ${y})">
                          <path d="M0 -${size} L${size/3} ${size/3} L${size} 0 L${size/3} -${size/3} L0 -${size} L-${size/3} -${size/3} L-${size} 0 L-${size/3} ${size/3} Z" fill="#FFF" />
                          <animate attributeName="opacity" values="0.5;1;0.5" dur="${2 + Math.random() * 3}s" repeatCount="indefinite" />
                        </g>
                      `;
                    }).join('')}
                    
                    <!-- Victory text -->
                    <text x="300" y="200" text-anchor="middle" font-size="24" fill="#FFF" font-weight="bold">Victory!</text>
                    <text x="300" y="230" text-anchor="middle" font-size="16" fill="#FFF">You've conquered Measurement Mountain!</text>
                  </svg>
                  
                  <div style="margin-top: 1rem;">
                    <h3>Adventure Complete!</h3>
                    <p>You used all your measurement conversion skills:</p>
                    <ul style="text-align: left; list-style: disc; margin-left: 2rem;">
                      <li>Distance: Kilometers to Meters</li>
                      <li>Volume: Cups to Pints</li>
                      <li>Temperature: Fahrenheit to Celsius</li>
                      <li>Time: Minutes to Seconds</li>
                      <li>Weight: Pounds to Kilograms</li>
                    </ul>
                    <p>You're a true Measurement Master!</p>
                    <div class="button-container">
                      <button id="get-certificate" class="btn">Get Your Certificate!</button>
                    </div>
                  </div>
                </div>
              `;
            }
          }
        ];
        
        // Check if we have already completed some steps
        if (state.currentStep < steps.length) {
          // Update text and game area
          gameText.textContent = steps[state.currentStep].text;
          gameArea.innerHTML = steps[state.currentStep].content();
          
          // Add event listeners for adventure-specific buttons if needed
          if (steps[state.currentStep].answer) {
            const options = gameArea.querySelectorAll('.quiz-option');
            options.forEach(option => {
              option.addEventListener('click', (e) => {
                const selectedAnswer = e.target.dataset.answer;
                const correctAnswer = steps[state.currentStep].answer;
                const feedbackEl = document.getElementById('adventure-feedback');
                
                options.forEach(opt => opt.disabled = true); // Disable all options
                
                if (selectedAnswer === correctAnswer) {
                  e.target.style.backgroundColor = '#66BB6A';
                  e.target.style.color = 'white';
                  feedbackEl.textContent = 'Correct! You got it right!';
                  feedbackEl.className = 'feedback success';
                  playSound('success');
                } else {
                  e.target.style.backgroundColor = '#f44336';
                  e.target.style.color = 'white';
                  
                  // Highlight correct answer
                  options.forEach(opt => {
                    if (opt.dataset.answer === correctAnswer) {
                      opt.style.backgroundColor = '#66BB6A';
                      opt.style.color = 'white';
                    }
                  });
                  
                  feedbackEl.textContent = `Oops! The correct answer is ${correctAnswer}.`;
                  feedbackEl.className = 'feedback error';
                  playSound('error');
                }
              });
            });
          }
          
          // Add certificate event listener for last step
          if (state.currentStep === steps.length - 1) {
            const certificateBtn = gameArea.querySelector('#get-certificate');
            if (certificateBtn) {
              certificateBtn.addEventListener('click', () => {
                navigateTo('certificate-screen');
                document.getElementById('certificate-module').textContent = 'Measurement Adventure';
                
                // Set today's date
                const today = new Date();
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                document.getElementById('certificate-date').textContent = today.toLocaleDateString('en-US', options);
                
                playSound('complete');
              });
            }
          }
        }
      }
      
      // Advance to next step in game
      function advanceGame() {
        state.currentStep++;
        playSound('click');
        
        const moduleProgress = state.progress[state.module];
        
        // If we've completed all steps, start quiz
        if (state.currentStep >= moduleProgress.total) {
          // Reset step for next time
          state.currentStep = 0;
          // Go to quiz
          navigateTo('quiz-container');
        } else {
          // Generate next content
          generateGameContent();
        }
      }
      
      // Show hint
      function showHint() {
        playSound('click');
        
        alert("Hint: Remember that the prefix 'kilo' means 1000, 'centi' means 1/100, and 'milli' means 1/1000. These prefixes help us remember how units are related!");
      }
      
      // ===== Quiz Functionality =====
      
      // Initialize quiz
      function initQuiz() {
        // Set up quiz data based on selected module
        state.quizData.currentQuestion = 0;
        state.quizData.score = 0;
        state.quizData.selectedAnswer = null;
        
        // Generate questions based on module
        switch(state.module) {
          case 'length':
            state.quizData.questions = generateLengthQuestions();
            break;
          case 'weight':
            state.quizData.questions = generateWeightQuestions();
            break;
          case 'time':
            state.quizData.questions = generateTimeQuestions();
            break;
          case 'volume':
            state.quizData.questions = generateVolumeQuestions();
            break;
          case 'temperature':
            state.quizData.questions = generateTemperatureQuestions();
            break;
          default:
            state.quizData.questions = generateMixedQuestions();
            break;
        }
        
        // Update quiz title
        document.getElementById('quiz-title').textContent = `${document.getElementById('game-title').textContent} Quiz`;
        
        // Load first question
        loadQuizQuestion();
      }
      
      // Load current quiz question
      function loadQuizQuestion() {
        const question = state.quizData.questions[state.quizData.currentQuestion];
        
        // Update quiz progress
        document.getElementById('quiz-progress-bar').style.width = `${(state.quizData.currentQuestion / state.quizData.questions.length) * 100}%`;
        document.getElementById('quiz-count').textContent = `Question: ${state.quizData.currentQuestion + 1}/${state.quizData.questions.length}`;
        document.getElementById('quiz-score').textContent = `Score: ${state.quizData.score}`;
        
        // Update question
        document.getElementById('quiz-question').textContent = question.question;
        
        // Update options
        const optionsContainer = document.getElementById('quiz-options');
        optionsContainer.innerHTML = '';
        
        question.options.forEach((option, index) => {
          const optionEl = document.createElement('div');
          optionEl.className = 'quiz-option';
          optionEl.textContent = option;
          optionEl.dataset.answer = option;
          optionsContainer.appendChild(optionEl);
        });
        
        // Reset UI
        document.getElementById('quiz-feedback').className = 'feedback';
        document.getElementById('quiz-feedback').textContent = '';
        document.getElementById('quiz-check').disabled = true;
        document.getElementById('quiz-check').style.display = 'inline-block';
        document.getElementById('quiz-next').style.display = 'none';
        
        // Reset state
        state.quizData.selectedAnswer = null;
      }
      
      // Check quiz answer
      function checkQuizAnswer() {
        if (!state.quizData.selectedAnswer) return;
        
        const question = state.quizData.questions[state.quizData.currentQuestion];
        const isCorrect = state.quizData.selectedAnswer === question.answer;
        
        // Update feedback
        const feedbackEl = document.getElementById('quiz-feedback');
        
        if (isCorrect) {
          feedbackEl.textContent = `Correct! ${question.explanation || ''}`;
          feedbackEl.className = 'feedback success';
          state.quizData.score += 1;
          document.getElementById('quiz-score').textContent = `Score: ${state.quizData.score}`;
          playSound('success');
        } else {
          feedbackEl.textContent = `Oops! The correct answer is ${question.answer}. ${question.explanation || ''}`;
          feedbackEl.className = 'feedback error';
          playSound('error');
        }
        
        // Highlight correct and incorrect answers
        const options = document.querySelectorAll('.quiz-option');
        options.forEach(option => {
          if (option.dataset.answer === question.answer) {
            option.classList.add('correct');
          } else if (option.classList.contains('selected')) {
            option.classList.add('incorrect');
          }
        });
        
        // Update UI
        document.getElementById('quiz-check').style.display = 'none';
        document.getElementById('quiz-next').style.display = 'inline-block';
      }
      
      // Advance to next quiz question
      function nextQuizQuestion() {
        state.quizData.currentQuestion++;
        
        // If we've completed all questions, show results
        if (state.quizData.currentQuestion >= state.quizData.questions.length) {
          showQuizResults();
        } else {
          // Load next question
          loadQuizQuestion();
        }
        
        playSound('click');
      }
      
      // Show quiz results and certificate
      function showQuizResults() {
        // Calculate score percentage
        const scorePercentage = (state.quizData.score / state.quizData.questions.length) * 100;
        
        // Update module progress
        state.progress[state.module].completed = Math.max(state.progress[state.module].completed, state.quizData.currentQuestion);
        state.progress[state.module].score = Math.max(state.progress[state.module].score, scorePercentage);
        
        // Update quiz UI
        document.getElementById('quiz-progress-bar').style.width = '100%';
        document.getElementById('quiz-question').textContent = 'Quiz Complete!';
        document.getElementById('quiz-options').innerHTML = '';
        
        // Show results
        const feedbackEl = document.getElementById('quiz-feedback');
        feedbackEl.textContent = `You scored ${state.quizData.score} out of ${state.quizData.questions.length} (${Math.round(scorePercentage)}%)`;
        feedbackEl.className = 'feedback success';
        
        // Show certificate if score is good
        if (scorePercentage >= 60) {
          document.getElementById('quiz-next').textContent = 'Get Certificate';
          document.getElementById('quiz-next').addEventListener('click', showCertificate);
        } else {
          document.getElementById('quiz-next').textContent = 'Try Again';
          document.getElementById('quiz-next').addEventListener('click', () => {
            state.currentStep = 0;
            navigateTo('game-container');
          });
        }
        
        // Save progress
        saveState();
        
        // Play completion sound
        playSound('complete');
      }
      
      // Show certificate
      function showCertificate() {
        navigateTo('certificate-screen');
        document.getElementById('certificate-module').textContent = document.getElementById('game-title').textContent;
        
        // Set today's date
        const today = new Date();
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        document.getElementById('certificate-date').textContent = today.toLocaleDateString('en-US', options);
        
        // Set stars based on score
        const scorePercentage = (state.quizData.score / state.quizData.questions.length) * 100;
        const stars = document.querySelectorAll('.star');
        stars.forEach((star, index) => {
          if (index < Math.ceil(scorePercentage / 20)) {
            star.classList.add('active');
          } else {
            star.classList.remove('active');
          }
        });
      }
      
      // Print certificate
      function printCertificate() {
        window.print();
      }
      
      // ===== Quiz Questions =====
      
      // Generate length conversion questions
      function generateLengthQuestions() {
        return [
          {
            question: "How many inches are in 2 feet?",
            options: ["12 inches", "24 inches", "36 inches", "48 inches"],
            answer: "24 inches",
            explanation: "There are 12 inches in 1 foot, so 2 feet = 2 × 12 = 24 inches."
          },
          {
            question: "How many centimeters are in 1 meter?",
            options: ["10 centimeters", "100 centimeters", "1000 centimeters", "10000 centimeters"],
            answer: "100 centimeters",
            explanation: "There are 100 centimeters in 1 meter."
          },
          {
            question: "If a pencil is 7 inches long, approximately how many centimeters is that?",
            options: ["7 centimeters", "14 centimeters", "18 centimeters", "25 centimeters"],
            answer: "18 centimeters",
            explanation: "1 inch is about 2.54 centimeters. So 7 inches = 7 × 2.54 ≈ 18 centimeters."
          },
          {
            question: "How many meters are in 5 kilometers?",
            options: ["50 meters", "500 meters", "5000 meters", "50000 meters"],
            answer: "5000 meters",
            explanation: "There are 1000 meters in 1 kilometer. So 5 kilometers = 5 × 1000 = 5000 meters."
          },
          {
            question: "A door is 2 meters tall. About how many feet is that?",
            options: ["3.3 feet", "6.6 feet", "9.8 feet", "12 feet"],
            answer: "6.6 feet",
            explanation: "1 meter is about 3.28 feet. So 2 meters = 2 × 3.28 ≈ 6.6 feet."
          }
        ];
      }
      
      // Generate weight conversion questions
      function generateWeightQuestions() {
        return [
          {
            question: "How many ounces are in 2 pounds?",
            options: ["16 ounces", "24 ounces", "32 ounces", "40 ounces"],
            answer: "32 ounces",
            explanation: "There are 16 ounces in 1 pound. So 2 pounds = 2 × 16 = 32 ounces."
          },
          {
            question: "How many grams are in 1 kilogram?",
            options: ["10 grams", "100 grams", "1000 grams", "10000 grams"],
            answer: "1000 grams",
            explanation: "There are 1000 grams in 1 kilogram."
          },
          {
            question: "An apple weighs about 6 ounces. Approximately how many grams is that?",
            options: ["6 grams", "60 grams", "170 grams", "600 grams"],
            answer: "170 grams",
            explanation: "1 ounce is about 28.35 grams. So 6 ounces = 6 × 28.35 ≈ 170 grams."
          },
          {
            question: "How many kilograms are in 5000 grams?",
            options: ["0.5 kilograms", "5 kilograms", "50 kilograms", "500 kilograms"],
            answer: "5 kilograms",
            explanation: "There are 1000 grams in 1 kilogram. So 5000 grams = 5000 ÷ 1000 = 5 kilograms."
          },
          {
            question: "A child weighs 45 pounds. About how many kilograms is that?",
            options: ["4.5 kilograms", "20 kilograms", "45 kilograms", "99 kilograms"],
            answer: "20 kilograms",
            explanation: "1 pound is about 0.454 kilograms. So 45 pounds = 45 × 0.454 ≈ 20 kilograms."
          }
        ];
      }
      
      // Generate time conversion questions
      function generateTimeQuestions() {
        return [
          {
            question: "How many seconds are in 3 minutes?",
            options: ["30 seconds", "60 seconds", "180 seconds", "300 seconds"],
            answer: "180 seconds",
            explanation: "There are 60 seconds in 1 minute. So 3 minutes = 3 × 60 = 180 seconds."
          },
          {
            question: "How many minutes are in 2 hours?",
            options: ["60 minutes", "90 minutes", "120 minutes", "180 minutes"],
            answer: "120 minutes",
            explanation: "There are 60 minutes in 1 hour. So 2 hours = 2 × 60 = 120 minutes."
          },
          {
            question: "How many hours are in 2 days?",
            options: ["12 hours", "24 hours", "36 hours", "48 hours"],
            answer: "48 hours",
            explanation: "There are 24 hours in 1 day. So 2 days = 2 × 24 = 48 hours."
          },
          {
            question: "If a movie is 1.5 hours long, how many minutes is that?",
            options: ["45 minutes", "60 minutes", "90 minutes", "150 minutes"],
            answer: "90 minutes",
            explanation: "1 hour = 60 minutes. So 1.5 hours = 1.5 × 60 = 90 minutes."
          },
          {
            question: "How many seconds are in 2.5 minutes?",
            options: ["25 seconds", "150 seconds", "250 seconds", "2500 seconds"],
            answer: "150 seconds",
            explanation: "1 minute = 60 seconds. So 2.5 minutes = 2.5 × 60 = 150 seconds."
          }
        ];
      }
      
      // Generate volume conversion questions
      function generateVolumeQuestions() {
        return [
          {
            question: "How many cups are in 2 pints?",
            options: ["1 cup", "2 cups", "4 cups", "8 cups"],
            answer: "4 cups",
            explanation: "There are 2 cups in 1 pint. So 2 pints = 2 × 2 = 4 cups."
          },
          {
            question: "How many milliliters are in 1 liter?",
            options: ["10 milliliters", "100 milliliters", "1000 milliliters", "10000 milliliters"],
            answer: "1000 milliliters",
            explanation: "There are 1000 milliliters in 1 liter."
          },
          {
            question: "If a recipe calls for 3 cups of flour, how many pints is that?",
            options: ["0.5 pints", "1.5 pints", "3 pints", "6 pints"],
            answer: "1.5 pints",
            explanation: "There are 2 cups in 1 pint. So 3 cups = 3 ÷ 2 = 1.5 pints."
          },
          {
            question: "A water bottle holds 500 milliliters. How many liters is that?",
            options: ["0.05 liters", "0.5 liters", "5 liters", "50 liters"],
            answer: "0.5 liters",
            explanation: "There are 1000 milliliters in 1 liter. So 500 milliliters = 500 ÷ 1000 = 0.5 liters."
          },
          {
            question: "How many cups are approximately in 1.5 liters?",
            options: ["3 cups", "6 cups", "9 cups", "12 cups"],
            answer: "6 cups",
            explanation: "1 liter is about 4 cups. So 1.5 liters = 1.5 × 4 = 6 cups."
          }
        ];
      }
      
      // Generate temperature conversion questions
      function generateTemperatureQuestions() {
        return [
          {
            question: "What is the freezing point of water in Celsius?",
            options: ["-32°C", "0°C", "32°C", "100°C"],
            answer: "0°C",
            explanation: "Water freezes at 0°C or 32°F."
          },
          {
            question: "What is the boiling point of water in Fahrenheit?",
            options: ["32°F", "100°F", "212°F", "273°F"],
            answer: "212°F",
            explanation: "Water boils at 100°C or 212°F at standard pressure."
          },
          {
            question: "Convert 50°F to Celsius.",
            options: ["0°C", "10°C", "22°C", "50°C"],
            answer: "10°C",
            explanation: "°C = (°F - 32) × 5/9. So °C = (50 - 32) × 5/9 = 18 × 5/9 = 10°C."
          },
          {
            question: "Convert 30°C to Fahrenheit.",
            options: ["30°F", "62°F", "86°F", "98.6°F"],
            answer: "86°F",
            explanation: "°F = (°C × 9/5) + 32. So °F = (30 × 9/5) + 32 = 54 + 32 = 86°F."
          },
          {
            question: "A typical summer day might be 77°F. What is that in Celsius?",
            options: ["15°C", "25°C", "32°C", "45°C"],
            answer: "25°C",
            explanation: "°C = (°F - 32) × 5/9. So °C = (77 - 32) × 5/9 = 45 × 5/9 = 25°C."
          }
        ];
      }
      
      // Generate mixed conversion questions for adventure mode
      function generateMixedQuestions() {
        return [
          {
            question: "If you walk 3 kilometers, how many meters is that?",
            options: ["30 meters", "300 meters", "3000 meters", "30000 meters"],
            answer: "3000 meters",
            explanation: "There are 1000 meters in 1 kilometer. So 3 kilometers = 3 × 1000 = 3000 meters."
          },
          {
            question: "A chocolate bar weighs 8 ounces. About how many grams is that?",
            options: ["8 grams", "80 grams", "227 grams", "800 grams"],
            answer: "227 grams",
            explanation: "1 ounce is about 28.35 grams. So 8 ounces = 8 × 28.35 ≈ 227 grams."
          },
          {
            question: "If it takes 45 minutes to bake cookies, how many seconds is that?",
            options: ["450 seconds", "1800 seconds", "2700 seconds", "4500 seconds"],
            answer: "2700 seconds",
            explanation: "1 minute = 60 seconds. So 45 minutes = 45 × 60 = 2700 seconds."
          },
          {
            question: "A recipe needs 5 cups of milk. How many pints is that?",
            options: ["1.25 pints", "2.5 pints", "5 pints", "10 pints"],
            answer: "2.5 pints",
            explanation: "There are 2 cups in 1 pint. So 5 cups = 5 ÷ 2 = 2.5 pints."
          },
          {
            question: "If the temperature is 86°F outside, what is that in Celsius?",
            options: ["15°C", "20°C", "30°C", "40°C"],
            answer: "30°C",
            explanation: "°C = (°F - 32) × 5/9. So °C = (86 - 32) × 5/9 = 54 × 5/9 = 30°C."
          }
        ];
      }
      
      // ===== Exploration Mode =====
      
      // Initialize exploration mode
      function initExploreMode() {
        // Update character display
        document.getElementById('explore-character').innerHTML = document.querySelector(`.character-${state.character} .character-img`).innerHTML;
        
        // Set up scene based on module
        setupExploreScene();
      }
      
      // Set up exploration scene
      function setupExploreScene() {
        const visualScene = document.getElementById('visual-scene');
        const paramControls = document.getElementById('parameter-controls');
        const visualObjects = document.getElementById('visual-objects');
        
        // Clear containers
        visualScene.innerHTML = '';
        paramControls.innerHTML = '';
        visualObjects.innerHTML = '';
        
        // Initialize parameters based on module
        switch(state.module) {
          case 'length':
            setupLengthExploration(visualScene, paramControls, visualObjects);
            break;
          case 'weight':
            setupWeightExploration(visualScene, paramControls, visualObjects);
            break;
          case 'time':
            setupTimeExploration(visualScene, paramControls, visualObjects);
            break;
          case 'volume':
            setupVolumeExploration(visualScene, paramControls, visualObjects);
            break;
          case 'temperature':
            setupTemperatureExploration(visualScene, paramControls, visualObjects);
            break;
          default:
            setupMixedExploration(visualScene, paramControls, visualObjects);
            break;
        }
      }
      
      // Setup length exploration
      function setupLengthExploration(visualScene, paramControls, visualObjects) {
        // Default parameters
        state.parameters = {
          inchesValue: 12,
          showMetric: true,
          showImperial: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Length (inches)</label>
            <input type="range" class="parameter-input" id="inches-slider" min="1" max="36" value="${state.parameters.inchesValue}">
            <div class="slider-value" id="inches-value">${state.parameters.inchesValue} in</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Metric</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-metric" ${state.parameters.showMetric ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Imperial</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-imperial" ${state.parameters.showImperial ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('inches-slider').addEventListener('input', (e) => {
          state.parameters.inchesValue = parseInt(e.target.value);
          document.getElementById('inches-value').textContent = `${state.parameters.inchesValue} in`;
          updateLengthScene();
        });
        
        document.getElementById('show-metric').addEventListener('change', (e) => {
          state.parameters.showMetric = e.target.checked;
          updateLengthScene();
        });
        
        document.getElementById('show-imperial').addEventListener('change', (e) => {
          state.parameters.showImperial = e.target.checked;
          updateLengthScene();
        });
        
        // Create object buttons
        visualObjects.innerHTML = `
          <div class="visual-object" data-object="ruler">
            <svg viewBox="0 0 100 100">
              <rect x="10" y="40" width="80" height="20" fill="#4e54c8" rx="2" ry="2" />
              <line x1="15" y1="40" x2="15" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="25" y1="40" x2="25" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="35" y1="40" x2="35" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="45" y1="40" x2="45" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="55" y1="40" x2="55" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="65" y1="40" x2="65" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="75" y1="40" x2="75" y2="45" stroke="#fff" stroke-width="1" />
              <line x1="85" y1="40" x2="85" y2="45" stroke="#fff" stroke-width="1" />
            </svg>
            <div>Ruler</div>
          </div>
          <div class="visual-object" data-object="pencil">
            <svg viewBox="0 0 100 100">
              <rect x="20" y="45" width="60" height="10" fill="#ff9a76" rx="2" ry="2" />
              <polygon points="80,45 80,55 90,50" fill="#333" />
            </svg>
            <div>Pencil</div>
          </div>
          <div class="visual-object" data-object="book">
            <svg viewBox="0 0 100 100">
              <rect x="30" y="35" width="40" height="30" fill="#8f94fb" rx="2" ry="2" />
              <rect x="33" y="38" width="34" height="24" fill="#fff" rx="1" ry="1" />
            </svg>
            <div>Book</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateLengthScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'ruler';
        
        // Initial scene update
        updateLengthScene();
      }
      
      // Update length exploration scene
      function updateLengthScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert to other units
        const inches = state.parameters.inchesValue;
        const feet = inches / 12;
        const centimeters = inches * 2.54;
        const meters = centimeters / 100;
        
        // Create SVG content
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
            
            <!-- Table surface -->
            <rect x="50" y="220" width="700" height="10" fill="#a67c52" rx="2" ry="2" />
        `;
        
        // Draw object based on selection and scale
        const objectWidth = inches * 10; // Scale: 10px = 1 inch
        
        if (state.parameters.selectedObject === 'ruler') {
          svgContent += `
            <!-- Ruler -->
            <rect x="100" y="170" width="${objectWidth}" height="20" fill="#4e54c8" rx="2" ry="2" />
            
            <!-- Inch markings -->
            ${Array.from({length: inches + 1}, (_, i) => {
              return `<line x1="${100 + i*10}" y1="170" x2="${100 + i*10}" y2="180" stroke="#fff" stroke-width="1" />`;
            }).join('')}
          `;
        } else if (state.parameters.selectedObject === 'pencil') {
          svgContent += `
            <!-- Pencil -->
            <rect x="100" y="175" width="${objectWidth}" height="10" fill="#ff9a76" rx="2" ry="2" />
            <polygon points="${100 + objectWidth},175 ${100 + objectWidth},185 ${100 + objectWidth + 10},180" fill="#333" />
          `;
        } else if (state.parameters.selectedObject === 'book') {
          const bookHeight = Math.min(objectWidth * 0.7, 150);
          svgContent += `
            <!-- Book -->
            <rect x="100" y="${175 - bookHeight/2}" width="${objectWidth}" height="${bookHeight}" fill="#8f94fb" rx="2" ry="2" />
            <rect x="${100 + 5}" y="${175 - bookHeight/2 + 5}" width="${objectWidth - 10}" height="${bookHeight - 10}" fill="#fff" rx="1" ry="1" />
          `;
        }
        
        // Add measurement labels
        if (state.parameters.showImperial) {
          svgContent += `
            <!-- Imperial measurements -->
            <text x="${100 + objectWidth/2}" y="230" text-anchor="middle" font-size="16" fill="#ff5e5b">${inches} inches</text>
            <text x="${100 + objectWidth/2}" y="250" text-anchor="middle" font-size="16" fill="#ff5e5b">${feet.toFixed(2)} feet</text>
          `;
        }
        
        if (state.parameters.showMetric) {
          svgContent += `
            <!-- Metric measurements -->
            <text x="${100 + objectWidth/2}" y="270" text-anchor="middle" font-size="16" fill="#4e54c8">${centimeters.toFixed(1)} centimeters</text>
            <text x="${100 + objectWidth/2}" y="290" text-anchor="middle" font-size="16" fill="#4e54c8">${meters.toFixed(3)} meters</text>
          `;
        }
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Setup weight exploration
      function setupWeightExploration(visualScene, paramControls, visualObjects) {
        // Default parameters
        state.parameters = {
          ounces: 16,
          showMetric: true,
          showImperial: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Weight (ounces)</label>
            <input type="range" class="parameter-input" id="ounces-slider" min="1" max="64" value="${state.parameters.ounces}">
            <div class="slider-value" id="ounces-value">${state.parameters.ounces} oz</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Metric</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-metric" ${state.parameters.showMetric ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Imperial</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-imperial" ${state.parameters.showImperial ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('ounces-slider').addEventListener('input', (e) => {
          state.parameters.ounces = parseInt(e.target.value);
          document.getElementById('ounces-value').textContent = `${state.parameters.ounces} oz`;
          updateWeightScene();
        });
        
        document.getElementById('show-metric').addEventListener('change', (e) => {
          state.parameters.showMetric = e.target.checked;
          updateWeightScene();
        });
        
        document.getElementById('show-imperial').addEventListener('change', (e) => {
          state.parameters.showImperial = e.target.checked;
          updateWeightScene();
        });
        
        // Create object buttons
        visualObjects.innerHTML = `
          <div class="visual-object" data-object="apple">
            <svg viewBox="0 0 100 100">
              <circle cx="50" cy="50" r="30" fill="#ff5e5b" />
              <rect x="47" y="20" width="6" height="10" fill="#67D5B5" />
            </svg>
            <div>Apple</div>
          </div>
          <div class="visual-object" data-object="book">
            <svg viewBox="0 0 100 100">
              <rect x="30" y="35" width="40" height="30" fill="#8f94fb" rx="2" ry="2" />
              <rect x="33" y="38" width="34" height="24" fill="#fff" rx="1" ry="1" />
            </svg>
            <div>Book</div>
          </div>
          <div class="visual-object" data-object="backpack">
            <svg viewBox="0 0 100 100">
              <path d="M30 40 Q25 60, 30 80 L70 80 Q75 60, 70 40 Z" fill="#67D5B5" stroke="#4e54c8" stroke-width="2" />
              <rect x="45" y="50" width="10" height="5" fill="#4e54c8" />
            </svg>
            <div>Backpack</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateWeightScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'apple';
        
        // Initial scene update
        updateWeightScene();
      }
      
      // Update weight exploration scene
      function updateWeightScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert to other units
        const ounces = state.parameters.ounces;
        const pounds = ounces / 16;
        const grams = ounces * 28.35;
        const kilograms = grams / 1000;
        
        // Create SVG content
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
            
            <!-- Scale -->
            <rect x="300" y="220" width="200" height="10" fill="#3FC1C9" rx="5" ry="5" />
            <rect x="380" y="230" width="40" height="30" fill="#0E86D4" rx="5" ry="5" />
        `;
        
        // Object size based on weight (scale factor)
        const sizeFactor = Math.max(0.5, Math.min(2.5, Math.sqrt(ounces / 16)));
        
        // Draw object based on selection and weight
        if (state.parameters.selectedObject === 'apple') {
          const appleSize = 50 * sizeFactor;
          svgContent += `
            <!-- Apple -->
            <circle cx="400" cy="${200 - appleSize}" r="${appleSize}" fill="#ff5e5b" />
            <rect x="${400 - appleSize*0.06}" y="${200 - appleSize*2}" width="${appleSize*0.12}" height="${appleSize*0.3}" fill="#67D5B5" />
          `;
        } else if (state.parameters.selectedObject === 'book') {
          const bookWidth = 100 * sizeFactor;
          const bookHeight = 60 * sizeFactor;
          svgContent += `
            <!-- Book -->
            <rect x="${400 - bookWidth/2}" y="${200 - bookHeight}" width="${bookWidth}" height="${bookHeight}" fill="#8f94fb" rx="5" ry="5" />
            <rect x="${400 - bookWidth/2 + 5}" y="${200 - bookHeight + 5}" width="${bookWidth - 10}" height="${bookHeight - 10}" fill="#fff" rx="3" ry="3" />
          `;
        } else if (state.parameters.selectedObject === 'backpack') {
          const packSize = 80 * sizeFactor;
          svgContent += `
            <!-- Backpack -->
            <path d="M${400 - packSize/2} ${200 - packSize} 
                    Q${400 - packSize/2 - 10} ${200 - packSize/2}, ${400 - packSize/2} ${200} 
                    L${400 + packSize/2} ${200} 
                    Q${400 + packSize/2 + 10} ${200 - packSize/2}, ${400 + packSize/2} ${200 - packSize} Z" 
                  fill="#67D5B5" stroke="#4e54c8" stroke-width="2" />
            <rect x="${400 - packSize*0.1}" y="${200 - packSize*0.6}" width="${packSize*0.2}" height="${packSize*0.1}" fill="#4e54c8" rx="2" ry="2" />
          `;
        }
        
        // Add measurement labels
        if (state.parameters.showImperial) {
          svgContent += `
            <!-- Imperial measurements -->
            <text x="400" y="260" text-anchor="middle" font-size="16" fill="#ff5e5b">${ounces} ounces</text>
            <text x="400" y="280" text-anchor="middle" font-size="16" fill="#ff5e5b">${pounds.toFixed(2)} pounds</text>
          `;
        }
        
        if (state.parameters.showMetric) {
          svgContent += `
            <!-- Metric measurements -->
            <text x="200" y="260" text-anchor="middle" font-size="16" fill="#4e54c8">${grams.toFixed(1)} grams</text>
            <text x="200" y="280" text-anchor="middle" font-size="16" fill="#4e54c8">${kilograms.toFixed(3)} kilograms</text>
          `;
        }
        
        svgContent += `
          <!-- Scale needle indicator -->
          <line x1="400" y1="220" x2="400" y2="190" stroke="#333" stroke-width="2" />
          <circle cx="400" cy="190" r="5" fill="#333" />
        `;
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Setup time exploration
      function setupTimeExploration(visualScene, paramControls, visualObjects) {
        // Default parameters
        state.parameters = {
          minutes: 60,
          showHoursMinutes: true,
          showSeconds: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Time (minutes)</label>
            <input type="range" class="parameter-input" id="minutes-slider" min="1" max="240" value="${state.parameters.minutes}">
            <div class="slider-value" id="minutes-value">${state.parameters.minutes} min</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Hours</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-hours" ${state.parameters.showHoursMinutes ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Seconds</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-seconds" ${state.parameters.showSeconds ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('minutes-slider').addEventListener('input', (e) => {
          state.parameters.minutes = parseInt(e.target.value);
          document.getElementById('minutes-value').textContent = `${state.parameters.minutes} min`;
          updateTimeScene();
        });
        
        document.getElementById('show-hours').addEventListener('change', (e) => {
          state.parameters.showHoursMinutes = e.target.checked;
          updateTimeScene();
        });
        
        document.getElementById('show-seconds').addEventListener('change', (e) => {
          state.parameters.showSeconds = e.target.checked;
          updateTimeScene();
        });
        
// Create object buttons
visualObjects.innerHTML = `
          <div class="visual-object" data-object="clock">
            <svg viewBox="0 0 100 100">
              <circle cx="50" cy="50" r="40" fill="#FFF" stroke="#67D5B5" stroke-width="3" />
              <line x1="50" y1="50" x2="50" y2="20" stroke="#333" stroke-width="2" />
              <line x1="50" y1="50" x2="70" y2="50" stroke="#333" stroke-width="2" />
            </svg>
            <div>Clock</div>
          </div>
          <div class="visual-object" data-object="hourglass">
            <svg viewBox="0 0 100 100">
              <path d="M30 20 L70 20 L60 50 L70 80 L30 80 L40 50 Z" fill="#8f94fb" stroke="#4e54c8" stroke-width="2" />
              <rect x="25" y="15" width="50" height="5" fill="#4e54c8" />
              <rect x="25" y="80" width="50" height="5" fill="#4e54c8" />
            </svg>
            <div>Hourglass</div>
          </div>
          <div class="visual-object" data-object="timer">
            <svg viewBox="0 0 100 100">
              <circle cx="50" cy="50" r="35" fill="#FFF" stroke="#ff5e5b" stroke-width="3" />
              <rect x="45" y="20" width="10" height="10" fill="#ff5e5b" />
              <line x1="50" y1="50" x2="50" y2="25" stroke="#333" stroke-width="2" />
              <line x1="50" y1="50" x2="65" y2="65" stroke="#333" stroke-width="2" />
            </svg>
            <div>Timer</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateTimeScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'clock';
        
        // Initial scene update
        updateTimeScene();
      }
      
      // Update time exploration scene
      function updateTimeScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert to other units
        const minutes = state.parameters.minutes;
        const seconds = minutes * 60;
        const hours = minutes / 60;
        const days = hours / 24;
        
        // Create SVG content
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
        `;
        
        // Draw object based on selection
        if (state.parameters.selectedObject === 'clock') {
          // Calculate hand positions based on time
          const minuteAngle = (minutes % 60) * 6; // 6 degrees per minute
          const hourAngle = ((hours % 12) * 30) + (minutes % 60) * 0.5; // 30 degrees per hour + 0.5 degrees per minute
          
          svgContent += `
            <!-- Clock -->
            <circle cx="400" cy="150" r="100" fill="#FFF" stroke="#67D5B5" stroke-width="5" />
            <circle cx="400" cy="150" r="5" fill="#333" />
            
            <!-- Hour marks -->
            ${Array.from({length: 12}, (_, i) => {
              const angle = i * 30;
              const x1 = 400 + 90 * Math.sin(angle * Math.PI / 180);
              const y1 = 150 - 90 * Math.cos(angle * Math.PI / 180);
              const x2 = 400 + 100 * Math.sin(angle * Math.PI / 180);
              const y2 = 150 - 100 * Math.cos(angle * Math.PI / 180);
              return `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" stroke="#67D5B5" stroke-width="3" />`;
            }).join('')}
            
            <!-- Hour hand -->
            <line x1="400" y1="150" 
                  x2="${400 + 60 * Math.sin(hourAngle * Math.PI / 180)}" 
                  y2="${150 - 60 * Math.cos(hourAngle * Math.PI / 180)}" 
                  stroke="#333" stroke-width="4" stroke-linecap="round" />
            
            <!-- Minute hand -->
            <line x1="400" y1="150" 
                  x2="${400 + 80 * Math.sin(minuteAngle * Math.PI / 180)}" 
                  y2="${150 - 80 * Math.cos(minuteAngle * Math.PI / 180)}" 
                  stroke="#333" stroke-width="2" stroke-linecap="round" />
          `;
        } else if (state.parameters.selectedObject === 'hourglass') {
          // Calculate sand level (0-100%) based on minutes
          const totalMinutes = 60; // Assuming hourglass is for 1 hour
          const percentFull = Math.max(0, Math.min(100, (totalMinutes - (minutes % totalMinutes)) / totalMinutes * 100));
          
          svgContent += `
            <!-- Hourglass -->
            <path d="M350 50 L450 50 L420 150 L450 250 L350 250 L380 150 Z" fill="#f0f0f0" stroke="#4e54c8" stroke-width="3" />
            <rect x="340" y="40" width="120" height="10" fill="#4e54c8" />
            <rect x="340" y="250" width="120" height="10" fill="#4e54c8" />
            
            <!-- Sand in top half -->
            <path d="M350 50 L450 50 L420 150 L380 150 Z" 
                  fill="#8f94fb" 
                  opacity="${percentFull/100}" />
            
            <!-- Sand in bottom half -->
            <path d="M380 150 L420 150 L450 250 L350 250 Z" 
                  fill="#8f94fb" 
                  opacity="${1 - percentFull/100}" />
          `;
        } else if (state.parameters.selectedObject === 'timer') {
          // Calculate remaining time arc
          const totalMinutes = 60; // Assuming timer is for 1 hour
          const percentRemaining = Math.max(0, Math.min(100, (minutes % totalMinutes) / totalMinutes * 100));
          const remainingAngle = 3.6 * percentRemaining; // 3.6 degrees per percentage point (360/100)
          
          svgContent += `
            <!-- Timer -->
            <circle cx="400" cy="150" r="100" fill="#FFF" stroke="#ff5e5b" stroke-width="5" />
            
            <!-- Timer progress indicator -->
            <path d="M 400 150 L 400 50 A 100 100 0 ${percentRemaining > 50 ? 1 : 0} 1 
                    ${400 + 100 * Math.sin(remainingAngle * Math.PI / 180)} 
                    ${150 - 100 * Math.cos(remainingAngle * Math.PI / 180)} Z" 
                  fill="#ff9a76" fill-opacity="0.6" />
            
            <!-- Timer center and hand -->
            <circle cx="400" cy="150" r="5" fill="#333" />
            <line x1="400" y1="150" 
                  x2="${400 + 80 * Math.sin(remainingAngle * Math.PI / 180)}" 
                  y2="${150 - 80 * Math.cos(remainingAngle * Math.PI / 180)}" 
                  stroke="#333" stroke-width="3" stroke-linecap="round" />
          `;
        }
        
        // Add time conversion labels
        let labelY = 260;
        
        // Always show minutes
        svgContent += `
          <text x="400" y="${labelY}" text-anchor="middle" font-size="18" fill="#333" font-weight="bold">
            ${minutes} minutes
          </text>
        `;
        labelY += 20;
        
        if (state.parameters.showSeconds) {
          svgContent += `
            <text x="250" y="${labelY}" text-anchor="middle" font-size="16" fill="#4e54c8">
              ${seconds.toLocaleString()} seconds
            </text>
          `;
        }
        
        if (state.parameters.showHoursMinutes) {
          svgContent += `
            <text x="550" y="${labelY}" text-anchor="middle" font-size="16" fill="#ff5e5b">
              ${Math.floor(hours)}h ${minutes % 60}m (${hours.toFixed(2)} hours)
            </text>
          `;
          
          if (hours >= 1) {
            labelY += 20;
            svgContent += `
              <text x="400" y="${labelY}" text-anchor="middle" font-size="14" fill="#67D5B5">
                ${days.toFixed(3)} days
              </text>
            `;
          }
        }
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Setup temperature exploration
      function setupTemperatureExploration(visualScene, paramControls, visualObjects) {
        // Default parameters
        state.parameters = {
          fahrenheit: 70,
          showFahrenheit: true,
          showCelsius: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Temperature (°F)</label>
            <input type="range" class="parameter-input" id="fahrenheit-slider" min="-20" max="220" value="${state.parameters.fahrenheit}">
            <div class="slider-value" id="fahrenheit-value">${state.parameters.fahrenheit}°F</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Fahrenheit</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-fahrenheit" ${state.parameters.showFahrenheit ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Celsius</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-celsius" ${state.parameters.showCelsius ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('fahrenheit-slider').addEventListener('input', (e) => {
          state.parameters.fahrenheit = parseInt(e.target.value);
          document.getElementById('fahrenheit-value').textContent = `${state.parameters.fahrenheit}°F`;
          updateTemperatureScene();
        });
        
        document.getElementById('show-fahrenheit').addEventListener('change', (e) => {
          state.parameters.showFahrenheit = e.target.checked;
          updateTemperatureScene();
        });
        
        document.getElementById('show-celsius').addEventListener('change', (e) => {
          state.parameters.showCelsius = e.target.checked;
          updateTemperatureScene();
        });
        
        // Create object buttons
        visualObjects.innerHTML = `
          <div class="visual-object" data-object="thermometer">
            <svg viewBox="0 0 100 100">
              <rect x="45" y="20" width="10" height="60" fill="#FFF" stroke="#FF8C64" stroke-width="2" rx="5" ry="5" />
              <circle cx="50" cy="80" r="10" fill="#FF5722" />
              <rect x="47" y="60" width="6" height="20" fill="#FF8C64" rx="3" ry="3" />
            </svg>
            <div>Thermometer</div>
          </div>
          <div class="visual-object" data-object="weather">
            <svg viewBox="0 0 100 100">
              <circle cx="50" cy="50" r="30" fill="#ff9a76" />
              <text x="50" y="55" text-anchor="middle" font-size="20" fill="#fff">🌤️</text>
            </svg>
            <div>Weather</div>
          </div>
          <div class="visual-object" data-object="water">
            <svg viewBox="0 0 100 100">
              <rect x="25" y="30" width="50" height="50" fill="#8f94fb" rx="5" ry="5" />
              <path d="M25 55 Q50 40, 75 55 Q50 70, 25 55" fill="#4e54c8" />
            </svg>
            <div>Water</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateTemperatureScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'thermometer';
        
        // Initial scene update
        updateTemperatureScene();
      }
      
      // Update temperature exploration scene
      function updateTemperatureScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert to other units
        const fahrenheit = state.parameters.fahrenheit;
        const celsius = (fahrenheit - 32) * 5/9;
        
        // Create SVG content
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
        `;
        
        if (state.parameters.selectedObject === 'thermometer') {
          // Calculate mercury height based on temperature
          // Map temperature range -20°F to 220°F to height range 0 to 200
          const minTemp = -20;
          const maxTemp = 220;
          const mercuryHeight = ((fahrenheit - minTemp) / (maxTemp - minTemp)) * 200;
          
          svgContent += `
            <!-- Thermometer -->
            <rect x="380" y="50" width="40" height="200" fill="#FFF" stroke="#FF8C64" stroke-width="3" rx="20" ry="20" />
            <circle cx="400" cy="250" r="20" fill="#FF5722" stroke="#FF8C64" stroke-width="3" />
            <rect x="390" y="${250 - mercuryHeight}" width="20" height="${mercuryHeight}" fill="#FF5722" rx="10" ry="10" />
            
            <!-- Temperature markings -->
            <!-- Freezing point (32°F, 0°C) -->
            <line x1="370" y1="206" x2="380" y2="206" stroke="#4e54c8" stroke-width="2" />
            <text x="365" y="210" text-anchor="end" font-size="12" fill="#4e54c8">32°F / 0°C</text>
            
            <!-- Room temperature (70°F, 21°C) -->
            <line x1="370" y1="147" x2="380" y2="147" stroke="#67D5B5" stroke-width="2" />
            <text x="365" y="151" text-anchor="end" font-size="12" fill="#67D5B5">70°F / 21°C</text>
            
            <!-- Boiling point (212°F, 100°C) -->
            <line x1="370" y1="55" x2="380" y2="55" stroke="#ff5e5b" stroke-width="2" />
            <text x="365" y="59" text-anchor="end" font-size="12" fill="#ff5e5b">212°F / 100°C</text>
          `;
        } else if (state.parameters.selectedObject === 'weather') {
          // Determine weather icon based on temperature
          let weatherIcon, skyColor, description;
          
          if (fahrenheit < 32) {
            weatherIcon = '❄️';
            skyColor = '#e3f2fd';
            description = 'Freezing';
          } else if (fahrenheit < 50) {
            weatherIcon = '☁️';
            skyColor = '#bbdefb';
            description = 'Cold';
          } else if (fahrenheit < 70) {
            weatherIcon = '🌤️';
            skyColor = '#90caf9';
            description = 'Cool';
          } else if (fahrenheit < 85) {
            weatherIcon = '☀️';
            skyColor = '#64b5f6';
            description = 'Pleasant';
          } else if (fahrenheit < 95) {
            weatherIcon = '🌞';
            skyColor = '#42a5f5';
            description = 'Hot';
          } else {
            weatherIcon = '🔥';
            skyColor = '#f44336';
            description = 'Very Hot';
          }
          
          svgContent += `
            <!-- Weather scene -->
            <rect x="200" y="50" width="400" height="200" fill="${skyColor}" rx="10" ry="10" />
            
            <!-- Weather icon -->
            <text x="400" y="150" text-anchor="middle" font-size="100">${weatherIcon}</text>
            
            <!-- Weather description -->
            <rect x="300" y="200" width="200" height="40" fill="rgba(255,255,255,0.7)" rx="5" ry="5" />
            <text x="400" y="225" text-anchor="middle" font-size="20" fill="#333">${description}</text>
          `;
        } else if (state.parameters.selectedObject === 'water') {
          // Determine water state based on temperature
          let waterColor, waterShape, description;
          
          if (fahrenheit < 32) {
            // Ice
            waterColor = '#e3f2fd';
            waterShape = 'M300 100 L500 100 L500 200 L300 200 Z';
            description = 'Frozen (Ice)';
          } else if (fahrenheit < 212) {
            // Liquid water
            waterColor = '#64b5f6';
            waterShape = 'M300 100 Q350 80, 400 100 Q450 120, 500 100 L500 200 L300 200 Z';
            description = 'Liquid Water';
          } else {
            // Steam
            waterColor = '#e1f5fe';
            // Multiple cloud-like shapes for steam
            waterShape = '';
            description = 'Boiling (Steam)';
          }
          
          svgContent += `
            <!-- Container -->
            <rect x="300" y="100" width="200" height="100" fill="#f5f5f5" stroke="#4e54c8" stroke-width="2" rx="5" ry="5" />
            
            <!-- Water/ice shape -->
            <path d="${waterShape}" fill="${waterColor}" />
          `;
          
          if (fahrenheit >= 212) {
            // Draw steam clouds
            svgContent += `
              <g opacity="0.7">
                <ellipse cx="350" cy="90" rx="30" ry="20" fill="#e1f5fe" />
                <ellipse cx="400" cy="70" rx="35" ry="25" fill="#e1f5fe" />
                <ellipse cx="450" cy="90" rx="30" ry="20" fill="#e1f5fe" />
              </g>
            `;
          }
          
          svgContent += `
            <!-- State description -->
            <rect x="350" y="210" width="100" height="30" fill="#fff" rx="5" ry="5" />
            <text x="400" y="230" text-anchor="middle" font-size="14" fill="#333">${description}</text>
          `;
        }
        
        // Add temperature conversion info
        let infoY = 270;
        
        if (state.parameters.showFahrenheit) {
          svgContent += `
            <text x="400" y="${infoY}" text-anchor="middle" font-size="18" fill="#FF8C64" font-weight="bold">
              ${fahrenheit}°F
            </text>
          `;
          infoY += 20;
        }
        
        if (state.parameters.showCelsius) {
          svgContent += `
            <text x="400" y="${infoY}" text-anchor="middle" font-size="18" fill="#4e54c8" font-weight="bold">
              ${celsius.toFixed(1)}°C
            </text>
          `;
        }
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Setup volume exploration
      function setupVolumeExploration(visualScene, paramControls, visualObjects) {
        // Default parameters
        state.parameters = {
          cups: 2,
          showMetric: true,
          showImperial: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Volume (cups)</label>
            <input type="range" class="parameter-input" id="cups-slider" min="0.5" max="16" step="0.5" value="${state.parameters.cups}">
            <div class="slider-value" id="cups-value">${state.parameters.cups} cups</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Metric</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-metric" ${state.parameters.showMetric ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Imperial</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-imperial" ${state.parameters.showImperial ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('cups-slider').addEventListener('input', (e) => {
          state.parameters.cups = parseFloat(e.target.value);
          document.getElementById('cups-value').textContent = `${state.parameters.cups} cups`;
          updateVolumeScene();
        });
        
        document.getElementById('show-metric').addEventListener('change', (e) => {
          state.parameters.showMetric = e.target.checked;
          updateVolumeScene();
        });
        
        document.getElementById('show-imperial').addEventListener('change', (e) => {
          state.parameters.showImperial = e.target.checked;
          updateVolumeScene();
        });
        
        // Create object buttons
        visualObjects.innerHTML = `
          <div class="visual-object" data-object="cup">
            <svg viewBox="0 0 100 100">
              <path d="M30 30 C25 40, 25 70, 30 80 L70 80 C75 70, 75 40, 70 30 Z" fill="#FFF" stroke="#4e54c8" stroke-width="2" />
            </svg>
            <div>Cup</div>
          </div>
          <div class="visual-object" data-object="bottle">
            <svg viewBox="0 0 100 100">
              <path d="M45 20 L55 20 L55 30 L60 40 L60 80 L40 80 L40 40 L45 30 Z" fill="#FFF" stroke="#67D5B5" stroke-width="2" />
            </svg>
            <div>Bottle</div>
          </div>
          <div class="visual-object" data-object="container">
            <svg viewBox="0 0 100 100">
              <rect x="20" y="30" width="60" height="50" fill="#FFF" stroke="#ff9a76" stroke-width="2" />
              <line x1="20" y1="40" x2="80" y2="40" stroke="#ff9a76" stroke-width="1" stroke-dasharray="2,2" />
              <line x1="20" y1="50" x2="80" y2="50" stroke="#ff9a76" stroke-width="1" stroke-dasharray="2,2" />
              <line x1="20" y1="60" x2="80" y2="60" stroke="#ff9a76" stroke-width="1" stroke-dasharray="2,2" />
              <line x1="20" y1="70" x2="80" y2="70" stroke="#ff9a76" stroke-width="1" stroke-dasharray="2,2" />
            </svg>
            <div>Container</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateVolumeScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'cup';
        
        // Initial scene update
        updateVolumeScene();
      }
      
      // Update volume exploration scene
      function updateVolumeScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert to other units
        const cups = state.parameters.cups;
        const pints = cups / 2;
        const quarts = pints / 2;
        const gallons = quarts / 4;
        const milliliters = cups * 236.588;
        const liters = milliliters / 1000;
        
        // Create SVG content
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
        `;
        
        // Calculate fill level (0-100%)
        let fillPercent;
        
        if (state.parameters.selectedObject === 'cup') {
          // Cup max capacity is 1 cup
          fillPercent = Math.min(100, cups / 1 * 100);
          
          // Draw cup with liquid
          svgContent += `
            <!-- Cup -->
            <path d="M300 100 C280 120, 280 200, 300 220 L500 220 C520 200, 520 120, 500 100 Z" 
                  fill="#FFF" stroke="#4e54c8" stroke-width="3" />
            
            <!-- Liquid in cup -->
            <path d="M300 ${220 - fillPercent} C280 ${220 - fillPercent + 20}, 280 200, 300 220 L500 220 C520 200, 520 ${220 - fillPercent + 20}, 500 ${220 - fillPercent} Z" 
                  fill="#8f94fb" fill-opacity="0.7" />
            
            <!-- Cup measurement lines -->
            <line x1="290" y1="160" x2="310" y2="160" stroke="#4e54c8" stroke-width="1" />
            <text x="285" y="165" text-anchor="end" font-size="12" fill="#4e54c8">½ cup</text>
            
            <line x1="290" y1="100" x2="310" y2="100" stroke="#4e54c8" stroke-width="1" />
            <text x="285" y="105" text-anchor="end" font-size="12" fill="#4e54c8">1 cup</text>
          `;
          
          // If over capacity, show overflow
          if (fillPercent >= 100) {
            svgContent += `
              <!-- Overflow -->
              <path d="M300 100 Q400 80, 500 100 Q530 105, 550 90 Q560 80, 580 85" 
                    fill="none" stroke="#8f94fb" stroke-width="3" stroke-opacity="0.7" />
              <path d="M580 85 Q600 90, 610 75" 
                    fill="none" stroke="#8f94fb" stroke-width="2" stroke-opacity="0.6" />
              <circle cx="615" cy="70" r="5" fill="#8f94fb" fill-opacity="0.5" />
            `;
          }
        } else if (state.parameters.selectedObject === 'bottle') {
          // Bottle max capacity is 2 cups
          fillPercent = Math.min(100, cups / 2 * 100);
          
          // Draw bottle with liquid
          svgContent += `
            <!-- Bottle -->
            <path d="M350 80 L450 80 L450 100 L470 120 L470 220 L330 220 L330 120 L350 100 Z" 
                  fill="#FFF" stroke="#67D5B5" stroke-width="3" />
            
            <!-- Bottle cap -->
            <rect x="380" y="60" width="40" height="20" fill="#67D5B5" rx="5" ry="5" />
            
            <!-- Liquid in bottle -->
            <path d="M330 ${220 - fillPercent*1.2} L470 ${220 - fillPercent*1.2} L470 220 L330 220 Z" 
                  fill="#8f94fb" fill-opacity="0.7" />
            
            <!-- Bottle measurement lines -->
            <line x1="330" y1="170" x2="350" y2="170" stroke="#67D5B5" stroke-width="1" />
            <text x="325" y="175" text-anchor="end" font-size="12" fill="#67D5B5">1 cup</text>
            
            <line x1="330" y1="120" x2="350" y2="120" stroke="#67D5B5" stroke-width="1" />
            <text x="325" y="125" text-anchor="end" font-size="12" fill="#67D5B5">2 cups</text>
          `;
        } else if (state.parameters.selectedObject === 'container') {
          // Container max capacity is 4 cups
          fillPercent = Math.min(100, cups / 4 * 100);
          
          // Draw container with liquid
          svgContent += `
            <!-- Container -->
            <rect x="300" y="100" width="200" height="120" fill="#FFF" stroke="#ff9a76" stroke-width="3" rx="5" ry="5" />
            
            <!-- Liquid in container -->
            <rect x="300" y="${220 - fillPercent*1.2}" width="200" height="${fillPercent*1.2}" 
                  fill="#8f94fb" fill-opacity="0.7" rx="5" ry="5" />
            
            <!-- Container measurement lines -->
            <line x1="300" y1="190" x2="320" y2="190" stroke="#ff9a76" stroke-width="1" />
            <text x="295" y="195" text-anchor="end" font-size="12" fill="#ff9a76">1 cup</text>
            
            <line x1="300" y1="160" x2="320" y2="160" stroke="#ff9a76" stroke-width="1" />
            <text x="295" y="165" text-anchor="end" font-size="12" fill="#ff9a76">2 cups</text>
            
            <line x1="300" y1="130" x2="320" y2="130" stroke="#ff9a76" stroke-width="1" />
            <text x="295" y="135" text-anchor="end" font-size="12" fill="#ff9a76">3 cups</text>
            
            <line x1="300" y1="100" x2="320" y2="100" stroke="#ff9a76" stroke-width="1" />
            <text x="295" y="105" text-anchor="end" font-size="12" fill="#ff9a76">4 cups</text>
          `;
        }
        
        // Add volume conversion information
        let infoY = 260;
        
        // Current volume
        svgContent += `
          <text x="400" y="${infoY}" text-anchor="middle" font-size="18" fill="#333" font-weight="bold">
            ${cups} cups
          </text>
        `;
        infoY += 20;
        
        if (state.parameters.showImperial) {
          svgContent += `
            <text x="250" y="${infoY}" text-anchor="middle" font-size="14" fill="#ff9a76">
              ${pints.toFixed(2)} pints
            </text>
            <text x="400" y="${infoY}" text-anchor="middle" font-size="14" fill="#ff9a76">
              ${quarts.toFixed(2)} quarts
            </text>
            <text x="550" y="${infoY}" text-anchor="middle" font-size="14" fill="#ff9a76">
              ${gallons.toFixed(3)} gallons
            </text>
          `;
          infoY += 20;
        }
        
        if (state.parameters.showMetric) {
          svgContent += `
            <text x="300" y="${infoY}" text-anchor="middle" font-size="14" fill="#4e54c8">
              ${milliliters.toFixed(1)} milliliters
            </text>
            <text x="500" y="${infoY}" text-anchor="middle" font-size="14" fill="#4e54c8">
              ${liters.toFixed(3)} liters
            </text>
          `;
        }
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Setup mixed exploration (for adventure mode)
      function setupMixedExploration(visualScene, paramControls, visualObjects) {
        // For adventure mode, we'll create a scene that combines multiple unit types
        
        // Default parameters
        state.parameters = {
          distance: 2, // kilometers
          weight: 5,   // pounds
          temperature: 70, // Fahrenheit
          showImperial: true,
          showMetric: true
        };
        
        // Create controls
        paramControls.innerHTML = `
          <div class="parameter-control">
            <label class="parameter-label">Distance (km)</label>
            <input type="range" class="parameter-input" id="distance-slider" min="0.5" max="10" step="0.5" value="${state.parameters.distance}">
            <div class="slider-value" id="distance-value">${state.parameters.distance} km</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Weight (lb)</label>
            <input type="range" class="parameter-input" id="weight-slider" min="1" max="20" value="${state.parameters.weight}">
            <div class="slider-value" id="weight-value">${state.parameters.weight} lb</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Temperature (°F)</label>
            <input type="range" class="parameter-input" id="temp-slider" min="30" max="100" value="${state.parameters.temperature}">
            <div class="slider-value" id="temp-value">${state.parameters.temperature}°F</div>
          </div>
          <div class="parameter-control">
            <label class="parameter-label">Show Both Systems</label>
            <div class="toggle-container">
              <label class="toggle">
                <input type="checkbox" id="show-both" ${state.parameters.showMetric && state.parameters.showImperial ? 'checked' : ''}>
                <span class="toggle-slider"></span>
              </label>
            </div>
          </div>
        `;
        
        // Add event listeners
        document.getElementById('distance-slider').addEventListener('input', (e) => {
          state.parameters.distance = parseFloat(e.target.value);
          document.getElementById('distance-value').textContent = `${state.parameters.distance} km`;
          updateMixedScene();
        });
        
        document.getElementById('weight-slider').addEventListener('input', (e) => {
          state.parameters.weight = parseInt(e.target.value);
          document.getElementById('weight-value').textContent = `${state.parameters.weight} lb`;
          updateMixedScene();
        });
        
        document.getElementById('temp-slider').addEventListener('input', (e) => {
          state.parameters.temperature = parseInt(e.target.value);
          document.getElementById('temp-value').textContent = `${state.parameters.temperature}°F`;
          updateMixedScene();
        });
        
        document.getElementById('show-both').addEventListener('change', (e) => {
          state.parameters.showMetric = e.target.checked;
          state.parameters.showImperial = e.target.checked;
          updateMixedScene();
        });
        
        // Create scenario buttons
        visualObjects.innerHTML = `
          <div class="visual-object" data-object="hike">
            <svg viewBox="0 0 100 100">
              <path d="M0 70 L30 50 L60 60 L100 40" fill="none" stroke="#67D5B5" stroke-width="3" />
              <circle cx="80" cy="40" r="10" fill="#ff9a76" />
            </svg>
            <div>Hiking Trip</div>
          </div>
          <div class="visual-object" data-object="cooking">
            <svg viewBox="0 0 100 100">
              <rect x="30" y="40" width="40" height="30" fill="#8f94fb" rx="5" ry="5" />
              <rect x="45" y="30" width="10" height="10" fill="#4e54c8" />
            </svg>
            <div>Cooking</div>
          </div>
          <div class="visual-object" data-object="travel">
            <svg viewBox="0 0 100 100">
              <rect x="20" y="50" width="60" height="30" fill="#ff5e5b" rx="10" ry="10" />
              <circle cx="30" cy="80" r="10" fill="#333" />
              <circle cx="70" cy="80" r="10" fill="#333" />
            </svg>
            <div>Travel</div>
          </div>
        `;
        
        // Add object selection listeners
        const objectButtons = visualObjects.querySelectorAll('.visual-object');
        objectButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            objectButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            state.parameters.selectedObject = button.dataset.object;
            updateMixedScene();
          });
        });
        
        // Set default selected object
        objectButtons[0].classList.add('active');
        state.parameters.selectedObject = 'hike';
        
        // Initial scene update
        updateMixedScene();
      }
      
      // Update mixed exploration scene
      function updateMixedScene() {
        const visualScene = document.getElementById('visual-scene');
        
        // Convert units
        const distanceKm = state.parameters.distance;
        const distanceMiles = distanceKm * 0.621371;
        
        const weightLbs = state.parameters.weight;
        const weightKg = weightLbs * 0.453592;
        
        const tempF = state.parameters.temperature;
        const tempC = (tempF - 32) * 5/9;
        
        // Create SVG content based on selected scenario
        let svgContent = `
          <svg width="100%" height="100%" viewBox="0 0 800 300">
            <!-- Background -->
            <rect x="0" y="0" width="800" height="300" fill="#f5f5f5" />
        `;
        
        if (state.parameters.selectedObject === 'hike') {
          // Create hiking scene
          svgContent += `
            <!-- Sky -->
            <rect x="0" y="0" width="800" height="150" fill="#64b5f6" />
            
            <!-- Sun -->
            <circle cx="700" cy="50" r="30" fill="#ff9a76" />
            
            <!-- Mountains -->
            <path d="M0 150 L100 80 L200 130 L300 60 L400 140 L500 90 L600 120 L700 70 L800 150 Z" fill="#67D5B5" />
            <path d="M0 150 L100 120 L200 140 L300 110 L400 150 L500 130 L600 150 L700 120 L800 150 Z" fill="#20BF55" />
            
            <!-- Ground -->
            <rect x="0" y="150" width="800" height="150" fill="#a67c52" />
            
            <!-- Path -->
            <path d="M100 280 Q200 250, 300 270 Q400 290, 500 250 Q600 220, 700 240" fill="none" stroke="#d7ccc8" stroke-width="10" stroke-linecap="round" />
            
            <!-- Hiker -->
            <circle cx="150" cy="250" r="15" fill="#ff9a76" />
            <rect x="145" y="265" width="10" height="20" fill="#ff9a76" />
            <line x1="145" y1="275" x2="135" y2="290" stroke="#ff9a76" stroke-width="5" stroke-linecap="round" />
            <line x1="155" y1="275" x2="165" y2="290" stroke="#ff9a76" stroke-width="5" stroke-linecap="round" />
            <line x1="145" y1="265" x2="135" y2="275" stroke="#ff9a76" stroke-width="5" stroke-linecap="round" />
            <line x1="155" y1="265" x2="165" y2="275" stroke="#ff9a76" stroke-width="5" stroke-linecap="round" />
            <rect x="140" y="235" width="20" height="15" fill="#8f94fb" />
            
            <!-- Backpack -->
            <rect x="130" y="250" width="15" height="20" fill="#4e54c8" rx="3" ry="3" />
            
            <!-- Trail markers -->
            <text x="100" y="220" text-anchor="middle" font-size="14" fill="#fff" font-weight="bold">START</text>
            <text x="700" y="220" text-anchor="middle" font-size="14" fill="#fff" font-weight="bold">END</text>
            
            <!-- Information boxes -->
            <rect x="250" y="180" width="300" height="30" fill="#fff" rx="5" ry="5" opacity="0.8" />
            <text x="400" y="200" text-anchor="middle" font-size="16" fill="#333">
              Distance: ${distanceKm} km ${state.parameters.showImperial ? `(${distanceMiles.toFixed(2)} miles)` : ''}
            </text>
            
            <rect x="250" y="220" width="300" height="30" fill="#fff" rx="5" ry="5" opacity="0.8" />
            <text x="400" y="240" text-anchor="middle" font-size="16" fill="#333">
              Backpack: ${weightLbs} lb ${state.parameters.showMetric ? `(${weightKg.toFixed(2)} kg)` : ''}
            </text>
            
            <rect x="250" y="260" width="300" height="30" fill="#fff" rx="5" ry="5" opacity="0.8" />
            <text x="400" y="280" text-anchor="middle" font-size="16" fill="#333">
              Temperature: ${tempF}°F ${state.parameters.showMetric ? `(${tempC.toFixed(1)}°C)` : ''}
            </text>
          `;
        } else if (state.parameters.selectedObject === 'cooking') {
          // Create cooking scene
          svgContent += `
            <!-- Kitchen counter -->
            <rect x="100" y="200" width="600" height="20" fill="#e0e0e0" />
            <rect x="150" y="220" width="500" height="80" fill="#bdbdbd" />
            
            <!-- Pot -->
            <rect x="350" y="140" width="100" height="60" fill="#9e9e9e" rx="5" ry="5" />
            <rect x="340" y="130" width="120" height="20" fill="#757575" rx="10" ry="10" />
            
            <!-- Steam -->
            <g opacity="0.7">
              <ellipse cx="380" cy="120" rx="15" ry="10" fill="#e0e0e0" />
              <ellipse cx="400" cy="110" rx="20" ry="15" fill="#e0e0e0" />
              <ellipse cx="420" cy="120" rx="15" ry="10" fill="#e0e0e0" />
            </g>
            
            <!-- Ingredients -->
            <rect x="200" y="180" width="80" height="20" fill="#4e54c8" />
            <text x="240" y="195" text-anchor="middle" font-size="14" fill="#fff">Water</text>
            
            <circle cx="550" cy="190" r="10" fill="#ff9a76" />
            <circle cx="570" cy="190" r="10" fill="#ff9a76" />
            <circle cx="560" cy="175" r="10" fill="#ff9a76" />
            <text x="560" y="210" text-anchor="middle" font-size="14" fill="#333">Tomatoes</text>
            
            <!-- Recipe information -->
            <rect x="50" y="50" width="250" height="120" fill="#fff" stroke="#67D5B5" stroke-width="2" rx="10" ry="10" />
            <text x="175" y="80" text-anchor="middle" font-size="18" fill="#67D5B5" font-weight="bold">Recipe</text>
            <text x="175" y="110" text-anchor="middle" font-size="14" fill="#333">
              Walk ${distanceKm} km to store
            </text>
            <text x="175" y="130" text-anchor="middle" font-size="14" fill="#333">
              Buy ${weightLbs} lb of ingredients
            </text>
            <text x="175" y="150" text-anchor="middle" font-size="14" fill="#333">
              Cook at ${tempF}°F
            </text>
            
            <!-- Unit conversions -->
            <rect x="500" y="50" width="250" height="120" fill="#fff" stroke="#4e54c8" stroke-width="2" rx="10" ry="10" />
            <text x="625" y="80" text-anchor="middle" font-size="18" fill="#4e54c8" font-weight="bold">Conversions</text>
            <text x="625" y="110" text-anchor="middle" font-size="14" fill="#333">
              ${distanceKm} km = ${distanceMiles.toFixed(2)} miles
            </text>
            <text x="625" y="130" text-anchor="middle" font-size="14" fill="#333">
              ${weightLbs} lb = ${weightKg.toFixed(2)} kg
            </text>
            <text x="625" y="150" text-anchor="middle" font-size="14" fill="#333">
              ${tempF}°F = ${tempC.toFixed(1)}°C
            </text>
          `;
        } else if (state.parameters.selectedObject === 'travel') {
          // Create travel scene
          svgContent += `
            <!-- Sky -->
            <rect x="0" y="0" width="800" height="150" fill="#bbdefb" />
            
            <!-- Sun -->
            <circle cx="600" cy="80" r="30" fill="#ff9a76" />
            
            <!-- Ground -->
            <rect x="0" y="150" width="800" height="150" fill="#a5d6a7" />
            
            <!-- Road -->
            <rect x="0" y="200" width="800" height="60" fill="#757575" />
            <line x1="50" y1="230" x2="150" y2="230" stroke="#fff" stroke-width="5" stroke-dasharray="30,30" />
            <line x1="200" y1="230" x2="300" y2="230" stroke="#fff" stroke-width="5" stroke-dasharray="30,30" />
            <line x1="350" y1="230" x2="450" y2="230" stroke="#fff" stroke-width="5" stroke-dasharray="30,30" />
            <line x1="500" y1="230" x2="600" y2="230" stroke="#fff" stroke-width="5" stroke-dasharray="30,30" />
            <line x1="650" y1="230" x2="750" y2="230" stroke="#fff" stroke-width="5" stroke-dasharray="30,30" />
            
            <!-- Car -->
            <rect x="200" y="190" width="100" height="30" fill="#ff5e5b" rx="10" ry="10" />
            <rect x="220" y="170" width="60" height="20" fill="#ff5e5b" rx="5" ry="5" />
            <circle cx="220" cy="220" r="10" fill="#333" />
            <circle cx="280" cy="220" r="10" fill="#333" />
            
            <!-- Suitcase -->
            <rect x="320" y="200" width="30" height="20" fill="#4e54c8" />
            <rect x="330" y="195" width="10" height="5" fill="#4e54c8" />
            
            <!-- Buildings -->
            <rect x="50" y="100" width="100" height="100" fill="#e0e0e0" />
            <rect x="60" y="120" width="20" height="30" fill="#bbdefb" />
            <rect x="120" y="120" width="20" height="30" fill="#bbdefb" />
            <rect x="90" y="170" width="20" height="30" fill="#bbdefb" />
            <text x="100" y="90" text-anchor="middle" font-size="16" fill="#333">START</text>
            
            <rect x="650" y="100" width="100" height="100" fill="#e0e0e0" />
            <rect x="660" y="120" width="20" height="30" fill="#bbdefb" />
            <rect x="720" y="120" width="20" height="30" fill="#bbdefb" />
            <rect x="690" y="170" width="20" height="30" fill="#bbdefb" />
            <text x="700" y="90" text-anchor="middle" font-size="16" fill="#333">END</text>
            
            <!-- Travel information panel -->
            <rect x="250" y="50" width="300" height="120" fill="#fff" stroke="#ff5e5b" stroke-width="2" rx="10" ry="10" />
            <text x="400" y="80" text-anchor="middle" font-size="18" fill="#ff5e5b" font-weight="bold">Travel Information</text>
            
            <text x="400" y="110" text-anchor="middle" font-size="14" fill="#333">
              Distance: ${distanceKm} km ${state.parameters.showImperial ? `(${distanceMiles.toFixed(2)} miles)` : ''}
            </text>
            <text x="400" y="130" text-anchor="middle" font-size="14" fill="#333">
              Luggage: ${weightLbs} lb ${state.parameters.showMetric ? `(${weightKg.toFixed(2)} kg)` : ''}
            </text>
            <text x="400" y="150" text-anchor="middle" font-size="14" fill="#333">
              Outside temp: ${tempF}°F ${state.parameters.showMetric ? `(${tempC.toFixed(1)}°C)` : ''}
            </text>
          `;
        }
        
        svgContent += `</svg>`;
        visualScene.innerHTML = svgContent;
      }
      
      // Reset parameters for exploration
      function resetParameters() {
        switch(state.module) {
          case 'length':
            document.getElementById('inches-slider').value = 12;
            document.getElementById('inches-value').textContent = '12 in';
            state.parameters.inchesValue = 12;
            document.getElementById('show-metric').checked = true;
            state.parameters.showMetric = true;
            document.getElementById('show-imperial').checked = true;
            state.parameters.showImperial = true;
            break;
          case 'weight':
            document.getElementById('ounces-slider').value = 16;
            document.getElementById('ounces-value').textContent = '16 oz';
            state.parameters.ounces = 16;
            document.getElementById('show-metric').checked = true;
            state.parameters.showMetric = true;
            document.getElementById('show-imperial').checked = true;
            state.parameters.showImperial = true;
            break;
          case 'time':
            document.getElementById('minutes-slider').value = 60;
            document.getElementById('minutes-value').textContent = '60 min';
            state.parameters.minutes = 60;
            document.getElementById('show-hours').checked = true;
            state.parameters.showHoursMinutes = true;
            document.getElementById('show-seconds').checked = true;
            state.parameters.showSeconds = true;
            break;
          case 'volume':
            document.getElementById('cups-slider').value = 2;
            document.getElementById('cups-value').textContent = '2 cups';
            state.parameters.cups = 2;
            document.getElementById('show-metric').checked = true;
            state.parameters.showMetric = true;
            document.getElementById('show-imperial').checked = true;
            state.parameters.showImperial = true;
            break;
          case 'temperature':
            document.getElementById('fahrenheit-slider').value = 70;
            document.getElementById('fahrenheit-value').textContent = '70°F';
            state.parameters.fahrenheit = 70;
            document.getElementById('show-fahrenheit').checked = true;
            state.parameters.showFahrenheit = true;
            document.getElementById('show-celsius').checked = true;
            state.parameters.showCelsius = true;
            break;
          default:
            document.getElementById('distance-slider').value = 2;
            document.getElementById('distance-value').textContent = '2 km';
            state.parameters.distance = 2;
            document.getElementById('weight-slider').value = 5;
            document.getElementById('weight-value').textContent = '5 lb';
            state.parameters.weight = 5;
            document.getElementById('temp-slider').value = 70;
            document.getElementById('temp-value').textContent = '70°F';
            state.parameters.temperature = 70;
            document.getElementById('show-both').checked = true;
            state.parameters.showMetric = true;
            state.parameters.showImperial = true;
            break;
        }
        
        // Update scene
        if (state.module === 'length') updateLengthScene();
        else if (state.module === 'weight') updateWeightScene();
        else if (state.module === 'time') updateTimeScene();
        else if (state.module === 'volume') updateVolumeScene();
        else if (state.module === 'temperature') updateTemperatureScene();
        else updateMixedScene();
        
        playSound('click');
      }
      
      // Advance adventure
      function advanceAdventure() {
        playSound('click');
        advanceGame(); // Use the same function as regular game progression
      }
      
      // Show adventure hint
      function showAdventureHint() {
        playSound('click');
        
        // Custom hints for adventure mode
        const hints = [
          "Remember, 1 kilometer = 1000 meters.",
          "Don't forget, 2.2 pounds = 1 kilogram.",
          "To convert from Fahrenheit to Celsius: (°F - 32) × 5/9.",
          "For volume, 1 cup ≈ 240 milliliters.",
          "For time, 1 hour = 60 minutes = 3600 seconds."
        ];
        
        // Show a random hint
        const randomHint = hints[Math.floor(Math.random() * hints.length)];
        alert(randomHint);
      }
      
      // ===== Window Onload =====
      window.onload = function() {
        // Create bubbles in header
        const header = document.querySelector('header');
        for (let i = 0; i < 15; i++) {
          const bubble = document.createElement('div');
          bubble.className = 'bubble';
          bubble.style.width = (20 + Math.random() * 50) + 'px';
          bubble.style.height = bubble.style.width;
          bubble.style.left = (Math.random() * 100) + '%';
          bubble.style.top = (Math.random() * 100) + '%';
          bubble.style.animationDelay = (Math.random() * 5) + 's';
          header.appendChild(bubble);
        }
      };
    });
  </script>
</body>
</html>