<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lojikli Educational Platform</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Fallback for Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #4a6baf;
            --secondary: #f9a826;
            --tertiary: #61c9a8;
            --light: #f7f9fc;
            --dark: #2d3748;
            --danger: #e53e3e;
            --success: #38a169;
            --border-radius: 12px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial Rounded MT Bold', 'Arial', sans-serif;
        }
        
        body {
            background-color: var(--light);
            color: var(--dark);
            line-height: 1.6;
            padding-bottom: 40px;
        }
        
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary) 0%, #7b4397 100%);
            color: white;
            padding: 20px 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
        }
        
        .logo img {
            height: 80px;
            margin-right: 15px;
            border-radius: 50%;
            border: 3px solid white;
        }
        
        .logo h1 {
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .tagline {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-top: 5px;
        }
        
        .section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 25px;
            margin-bottom: 30px;
        }
        
        .section-title {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            color: var(--primary);
            border-bottom: 2px solid var(--light);
            padding-bottom: 10px;
        }
        
        .section-title i {
            font-size: 1.8rem;
            margin-right: 10px;
            color: var(--secondary);
        }
        
        .button-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
        }
        
        .app-button {
            background-color: white;
            border: 2px solid var(--light);
            border-radius: var(--border-radius);
            padding: 15px;
            text-align: center;
            color: var(--dark);
            text-decoration: none;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            min-height: 100px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .app-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-color: var(--secondary);
            background-color: #fff9e6;
        }
        
        .app-button i {
            font-size: 1.5rem;
            margin-bottom: 8px;
            color: var(--tertiary);
        }
        
        .app-button .button-title {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .app-categories {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 10px 0;
        }
        
        .category {
            font-size: 0.9rem;
            background-color: var(--light);
            padding: 3px 10px;
            border-radius: 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .category.active {
            background-color: var(--secondary);
            color: white;
        }
        
        .category:hover {
            background-color: var(--secondary);
            color: white;
        }
        
        .search-box {
            width: 100%;
            max-width: 500px;
            padding: 12px 20px;
            margin-bottom: 20px;
            border-radius: 30px;
            border: 2px solid var(--light);
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s;
        }
        
        .search-box:focus {
            border-color: var(--tertiary);
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            background-color: var(--primary);
            color: white;
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
            }
            
            .logo {
                margin-bottom: 15px;
                flex-direction: column;
            }
            
            .logo img {
                margin-right: 0;
                margin-bottom: 10px;
            }
            
            .button-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
        }

        /* Animation for buttons */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .app-button {
            animation: fadeIn 0.5s ease forwards;
            opacity: 0;
        }
        
        /* Stagger button animations */
        .button-grid .app-button:nth-child(1) { animation-delay: 0.1s; }
        .button-grid .app-button:nth-child(2) { animation-delay: 0.15s; }
        .button-grid .app-button:nth-child(3) { animation-delay: 0.2s; }
        .button-grid .app-button:nth-child(4) { animation-delay: 0.25s; }
        .button-grid .app-button:nth-child(5) { animation-delay: 0.3s; }
        .button-grid .app-button:nth-child(6) { animation-delay: 0.35s; }
        /* Add more if needed */

        /* Debug styles */
        .debug-info {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            font-family: monospace;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <img src="Lojikli QR Code.png" alt="Lojikli Logo">
                    <div>
                        <h1>Lojikli</h1>
                        <p class="tagline">Making Learning Logical & Fun!</p>
                    </div>
                </div>
            </div>
        </div>
    </header>
    
    <div class="container">
        <input type="text" class="search-box" id="searchBox" placeholder="Search for activities...">
        
        <div class="app-categories">
            <span class="category active" data-category="all">All</span>
            <span class="category" data-category="math">Math</span>
            <span class="category" data-category="music">Music</span>
            <span class="category" data-category="games">Games</span>
            <span class="category" data-category="geography">Geography</span>
            <span class="category" data-category="language">Language</span>
        </div>
        
        <section class="section">
            <div class="section-title">
                <i class="fas fa-baby"></i>
                <h2>Activities for Toddlers & Pre-K (2-4 years)</h2>
            </div>
            <div class="button-grid" id="toddlerGrid">
                <!-- Buttons will be added dynamically -->
            </div>
        </section>
        
        <section class="section">
            <div class="section-title">
                <i class="fas fa-child"></i>
                <h2>Activities for Early Elementary (5-8 years)</h2>
            </div>
            <div class="button-grid" id="elementaryGrid">
                <!-- Buttons will be added dynamically -->
            </div>
        </section>

        <!-- Debug section (will be hidden in final version) -->
        <div id="debugInfo" class="debug-info">Loading...</div>
    </div>
    
    <footer>
        <div class="container">
            <p>&copy; 2025 Lojikli Educational Platform. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Define the structure of your repository
// Define the structure of your repository
const repository = {
    "2 yr old": [
        "enhanced-toddler-app.html",
        "reading-game prek to grade 3 v2.html",
        "WritingFitnessV4.html"
    ],
    "5 yr old": [
        "AIpathfinderV2.html",
        "area-volume-game.html",
        "asteroidBlasterV03.html",
        "battleshipv7.html",
        "binomial-blocks-game.html",
        "binomial-multiplication-game.html",
        "BubblePop2.0..html",
        "bubbleshooter v3 working.html",
        "calculus-game.html",
        "Circle of fifths.html",
        "compareFractions v0.2.html",
        "connect4.html",
        "decimal add and subtract v0.1.html",
        "decimal multiply v0.1.html",
        "Distributive property greek.html",
        "divisibility_rulesv_0.6.html",
        "division-adventure-game.html",
        "DotsGameV02.html",
        "enhanced-division-game v3.html",
        "enhanced-mahjong v4.html",
        "factoring Terms.html",
        "factoring-binomials-game.html",
        "factoring-game.html",
        "factoringPolynomialsGCF.html",
        "factortree_v2.html",
        "fraction-game.html",
        "geo-genius-game.html",
        "Guess country Globe v1.html",
        "Guess country v9.html",
        "Hexcells_Minesweeper.html",
        "improved-multiplication-game.html",
        "mahjong-learning-game.html",
        "MIDI music painting v2 additional features.html",
        "MIDI Note analyzer V5.2.html",
        "MidiHarmonicsMath v1.12.html",
        "Multiplication flash cards.html",
        "NegativePolynomials.html",
        "neural-learner-app.html",
        "numberline_negatives.html",
        "pacman-game.html",
        "pemdas v0.html",
        "percentagesV0.html",
        "Piano Learning v5 with midi.html",
        "planetLanderV02.html",
        "plot mx plus b v1.html",
        "Read music.html",
        "Reducing fractions with algebra v3.html",
        "reducing fractions.html",
        "scientific-notation-game.html",
        "Short Division.html",
        "ShortDivisionV1.html",
        "SliderPic.html",
        "Snakes and laddersV02.html",
        "soduku.html",
        "solitaire-game v2.html",
        "space-adventure-game.html",
        "statistics-game v2.html",
        "tech-explorer-game.html",
        "timer-game.html",
        "triangle-explorer-game.html",
        "trig-adventure.html",
        "trinomial-factoring-game.html",
        "TroubleGameV1.html",
        "unit-conversion-game v2.html",
        "vector-scalar-game.html",
        "WordProblem_Mobile v0.html",
        "wordscramble.html",
        "zeroProperty_v2.4.html"
    ]
};

        // Debug info
        const debugInfo = document.getElementById('debugInfo');
        debugInfo.innerHTML = "Scripts are loading...<br>";
        debugInfo.innerHTML += "Font Awesome loaded: " + (typeof FontAwesome !== 'undefined' ? "Yes" : "Unknown") + "<br>";
        debugInfo.innerHTML += "Number of toddler files: " + repository["2 yr old"].length + "<br>";
        debugInfo.innerHTML += "Number of elementary files: " + repository["5 yr old"].length + "<br>";
        
        try {
            // Categories mapping (you can expand this based on actual content)
            const categoryMapping = {
                "math": ["fraction", "multipl", "divisi", "factor", "algebra", "number", "pemdas", "calculus", "binomial", "decimal", "percentages", "scientific", "trigonometry", "trig", "vector", "statistics"],
                "music": ["music", "piano", "midi", "circle of fifths", "note analyzer", "harmonics"],
                "games": ["game", "pacman", "asteroid", "battleship", "bubble", "connect4", "dots", "mahjong", "solitaire", "trouble", "snakes", "soduku", "minesweeper"],
                "geography": ["country", "globe", "geo"],
                "language": ["reading", "writing", "word", "scramble"]
            };

            // Function to create a nice name from filename
            // Replace the current getNiceName function with this improved version
            function getNiceName(filename) {
                // Remove file extension
                let name = filename.replace(".html", "");
                
                // Remove version numbers
                name = name.replace(/v\d+(\.\d+)?/ig, "").replace(/V\d+(\.\d+)?/ig, "");
                
                // Replace hyphens, underscores and dots with spaces
                name = name.replace(/[-_.]/g, " ");
                
                // Capitalize first letter of each word
                name = name.split(" ").map(word => {
                    if (word.length > 0) {
                        return word[0].toUpperCase() + word.slice(1);
                    }
                    return word;
                }).join(" ");
                
                // Trim any extra spaces
                name = name.trim();
                
                console.log(`Original filename: ${filename}, Converted to: ${name}`);
                return name;
            }

            
            // Function to determine icon based on filename
            function getIconForApp(filename) {
                const lowerFilename = filename.toLowerCase();
                
                debugInfo.innerHTML += "Getting icon for: " + filename + "<br>";
                
                // Math related
                if (lowerFilename.includes("fraction") || lowerFilename.includes("math") || lowerFilename.includes("multipl") || lowerFilename.includes("divisi") || lowerFilename.includes("number") || lowerFilename.includes("percentages") || lowerFilename.includes("scientific")) {
                    return "fas fa-calculator";
                } 
                // Algebra & advanced math
                else if (lowerFilename.includes("algebra") || lowerFilename.includes("binomial") || lowerFilename.includes("factor") || lowerFilename.includes("distributive") || lowerFilename.includes("pemdas") || lowerFilename.includes("calculus") || lowerFilename.includes("trig") || lowerFilename.includes("vector") || lowerFilename.includes("statistics") || lowerFilename.includes("plot")) {
                    return "fas fa-square-root-alt";
                } 
                // Music
                else if (lowerFilename.includes("music") || lowerFilename.includes("piano") || lowerFilename.includes("midi") || lowerFilename.includes("fifths") || lowerFilename.includes("note")) {
                    return "fas fa-music";
                } 
                // Reading & writing
                else if (lowerFilename.includes("read") || lowerFilename.includes("word") || lowerFilename.includes("writing")) {
                    return "fas fa-book";
                } 
                // Games
                else if (lowerFilename.includes("game") || lowerFilename.includes("pacman") || lowerFilename.includes("shooter") || lowerFilename.includes("connect4") || lowerFilename.includes("dots") || lowerFilename.includes("solitaire") || lowerFilename.includes("trouble") || lowerFilename.includes("snakes")) {
                    return "fas fa-gamepad";
                } 
                // Geography
                else if (lowerFilename.includes("country") || lowerFilename.includes("geo") || lowerFilename.includes("globe")) {
                    return "fas fa-globe";
                } 
                // Space
                else if (lowerFilename.includes("space") || lowerFilename.includes("planet") || lowerFilename.includes("asteroid")) {
                    return "fas fa-rocket";
                } 
                // Geometry
                else if (lowerFilename.includes("triangle") || lowerFilename.includes("area") || lowerFilename.includes("volume") || lowerFilename.includes("geo")) {
                    return "fas fa-shapes";
                } 
                // Time
                else if (lowerFilename.includes("timer")) {
                    return "fas fa-clock";
                } 
                // Technology
                else if (lowerFilename.includes("tech")) {
                    return "fas fa-laptop-code";
                } 
                // AI/Neural
                else if (lowerFilename.includes("neural") || lowerFilename.includes("ai")) {
                    return "fas fa-brain";
                }
                // Battle games
                else if (lowerFilename.includes("battle") || lowerFilename.includes("shooter")) {
                    return "fas fa-fighter-jet";
                }
                // Puzzle games 
                else if (lowerFilename.includes("puzzle") || lowerFilename.includes("soduku") || lowerFilename.includes("minesweeper") || lowerFilename.includes("mahjong")) {
                    return "fas fa-puzzle-piece";
                }
                
                // If no specific icon is found, use a default icon
                return "fas fa-star"; // Default icon
            }

            // Function to determine categories
            function getCategoriesForApp(filename) {
                const lowerFilename = filename.toLowerCase();
                const categories = [];
                
                for (const [category, keywords] of Object.entries(categoryMapping)) {
                    if (keywords.some(keyword => lowerFilename.includes(keyword))) {
                        categories.push(category);
                    }
                }
                
                // Add "all" category to every app
                categories.push("all");
                
                return categories;
            }

            // Create buttons for each file
            function createButtons() {
                const toddlerGrid = document.getElementById('toddlerGrid');
                const elementaryGrid = document.getElementById('elementaryGrid');

                debugInfo.innerHTML += "Creating buttons...<br>";
                
                // Function to create a button for a file
                function createButton(filename, parentFolder) {
                    const button = document.createElement('a');
                    button.href = `${parentFolder}/${filename}`;
                    button.className = 'app-button';
                    button.dataset.categories = getCategoriesForApp(filename).join(" ");
                    
                    const iconClass = getIconForApp(filename);
                    
                    const icon = document.createElement('i');
                    icon.className = iconClass;
                    
                    // Fallback for icon
                    if (typeof FontAwesome === 'undefined') {
                        icon.textContent = "🎮"; // Emoji fallback
                    }
                    
                    const title = document.createElement('div');
                    title.className = 'button-title';
                    title.textContent = getNiceName(filename);
                    
                    button.appendChild(icon);
                    button.appendChild(title);
                    
                    return button;
                }
                
                // Create buttons for toddler apps
                repository["2 yr old"].forEach(filename => {
                    const button = createButton(filename, "2 yr old");
                    toddlerGrid.appendChild(button);
                });
                
                // Create buttons for elementary apps
                repository["5 yr old"].forEach(filename => {
                    const button = createButton(filename, "5 yr old");
                    elementaryGrid.appendChild(button);
                });
                
                debugInfo.innerHTML += `Created ${repository["2 yr old"].length + repository["5 yr old"].length} total buttons<br>`;
            }

            // Handle category filtering
            function setupCategoryFiltering() {
                const categories = document.querySelectorAll('.category');
                const buttons = document.querySelectorAll('.app-button');
                
                categories.forEach(category => {
                    category.addEventListener('click', () => {
                        // Remove active class from all categories
                        categories.forEach(cat => cat.classList.remove('active'));
                        
                        // Add active class to clicked category
                        category.classList.add('active');
                        
                        const selectedCategory = category.dataset.category;
                        
                        // Show/hide buttons based on selected category
                        buttons.forEach(button => {
                            const buttonCategories = button.dataset.categories.split(" ");
                            
                            if (selectedCategory === 'all' || buttonCategories.includes(selectedCategory)) {
                                button.style.display = 'flex';
                            } else {
                                button.style.display = 'none';
                            }
                        });
                    });
                });
            }

            // Handle search functionality
            function setupSearch() {
                const searchBox = document.getElementById('searchBox');
                const buttons = document.querySelectorAll('.app-button');
                
                searchBox.addEventListener('input', () => {
                    const searchTerm = searchBox.value.toLowerCase();
                    
                    buttons.forEach(button => {
                        const buttonText = button.textContent.toLowerCase();
                        
                        if (buttonText.includes(searchTerm)) {
                            button.style.display = 'flex';
                        } else {
                            button.style.display = 'none';
                        }
                    });
                });
            }

            // Initialize the page
            document.addEventListener('DOMContentLoaded', function() {
                debugInfo.innerHTML += "DOM fully loaded<br>";
                try {
                    createButtons();
                    setupCategoryFiltering();
                    setupSearch();
                    debugInfo.innerHTML += "Initialization complete<br>";
                    
                    // Hide debug info in production
                    setTimeout(() => {
                        debugInfo.style.display = 'none';
                    }, 5000); // Hide after 5 seconds
                } catch (error) {
                    debugInfo.innerHTML += "ERROR: " + error.message + "<br>";
                    console.error(error);
                }
            });
            
        } catch (error) {
            debugInfo.innerHTML += "FATAL ERROR: " + error.message + "<br>";
            console.error(error);
        }
    </script>
</body>
</html>
